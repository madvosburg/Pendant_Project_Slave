
Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cf4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003e88  08003e88  00013e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ec0  08003ec0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003ec0  08003ec0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ec0  08003ec0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ec0  08003ec0  00013ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ec4  08003ec4  00013ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000138  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000144  20000144  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a884  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001ab9  00000000  00000000  0002a903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000778  00000000  00000000  0002c3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005b8  00000000  00000000  0002cb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f019  00000000  00000000  0002d0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000affb  00000000  00000000  0004c109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bc4c4  00000000  00000000  00057104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001d0c  00000000  00000000  001135c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  001152d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003e70 	.word	0x08003e70

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003e70 	.word	0x08003e70

080001d4 <sendData>:
uint8_t TxData[2];
uint8_t RxData[2];
//int indx = 0;

void sendData (uint8_t *data)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	// Pull DE high to enable TX operation
	//HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_SET);
	HAL_UART_Transmit(&huart1, data, 2, 1000);
 80001dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e0:	2202      	movs	r2, #2
 80001e2:	6879      	ldr	r1, [r7, #4]
 80001e4:	4803      	ldr	r0, [pc, #12]	; (80001f4 <sendData+0x20>)
 80001e6:	f002 fb93 	bl	8002910 <HAL_UART_Transmit>
	// Pull RE Low to enable RX operation
	//HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
}
 80001ea:	bf00      	nop
 80001ec:	3708      	adds	r7, #8
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	20000028 	.word	0x20000028

080001f8 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	460b      	mov	r3, r1
 8000202:	807b      	strh	r3, [r7, #2]
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 2);
 8000204:	2202      	movs	r2, #2
 8000206:	4904      	ldr	r1, [pc, #16]	; (8000218 <HAL_UARTEx_RxEventCallback+0x20>)
 8000208:	4804      	ldr	r0, [pc, #16]	; (800021c <HAL_UARTEx_RxEventCallback+0x24>)
 800020a:	f003 fdb1 	bl	8003d70 <HAL_UARTEx_ReceiveToIdle_IT>
}
 800020e:	bf00      	nop
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	2000013c 	.word	0x2000013c
 800021c:	20000028 	.word	0x20000028

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fab0 	bl	8000788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f870 	bl	800030c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f922 	bl	8000474 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000230:	f000 f8f0 	bl	8000414 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000234:	f000 f8be 	bl	80003b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 2);
 8000238:	2202      	movs	r2, #2
 800023a:	492f      	ldr	r1, [pc, #188]	; (80002f8 <main+0xd8>)
 800023c:	482f      	ldr	r0, [pc, #188]	; (80002fc <main+0xdc>)
 800023e:	f003 fd97 	bl	8003d70 <HAL_UARTEx_ReceiveToIdle_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(RxData[0] == 1){	//Check for red button press
 8000242:	4b2d      	ldr	r3, [pc, #180]	; (80002f8 <main+0xd8>)
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	2b01      	cmp	r3, #1
 8000248:	d111      	bne.n	800026e <main+0x4e>
	 		 	  	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2);		//toggle relay to toggle red LED
 800024a:	2104      	movs	r1, #4
 800024c:	482c      	ldr	r0, [pc, #176]	; (8000300 <main+0xe0>)
 800024e:	f000 fe4f 	bl	8000ef0 <HAL_GPIO_TogglePin>
	 		 		  TxData[0] = 5;
 8000252:	4b2c      	ldr	r3, [pc, #176]	; (8000304 <main+0xe4>)
 8000254:	2205      	movs	r2, #5
 8000256:	701a      	strb	r2, [r3, #0]
	 		 		  sendData(TxData);
 8000258:	482a      	ldr	r0, [pc, #168]	; (8000304 <main+0xe4>)
 800025a:	f7ff ffbb 	bl	80001d4 <sendData>
	 		 		  HAL_Delay(500);
 800025e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000262:	f000 faf7 	bl	8000854 <HAL_Delay>
	 		 		  RxData[0] = 0;
 8000266:	4b24      	ldr	r3, [pc, #144]	; (80002f8 <main+0xd8>)
 8000268:	2200      	movs	r2, #0
 800026a:	701a      	strb	r2, [r3, #0]
 800026c:	e7e9      	b.n	8000242 <main+0x22>
	 		 	  }
	 		 	  else if(RxData[0] == 2){	//Check for green button press
 800026e:	4b22      	ldr	r3, [pc, #136]	; (80002f8 <main+0xd8>)
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	2b02      	cmp	r3, #2
 8000274:	d111      	bne.n	800029a <main+0x7a>
	 		 	  	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);	//toggle relay to toggle green LED
 8000276:	2108      	movs	r1, #8
 8000278:	4821      	ldr	r0, [pc, #132]	; (8000300 <main+0xe0>)
 800027a:	f000 fe39 	bl	8000ef0 <HAL_GPIO_TogglePin>
	 		 		  TxData[0] = 6;
 800027e:	4b21      	ldr	r3, [pc, #132]	; (8000304 <main+0xe4>)
 8000280:	2206      	movs	r2, #6
 8000282:	701a      	strb	r2, [r3, #0]
	 		 		  sendData(TxData);
 8000284:	481f      	ldr	r0, [pc, #124]	; (8000304 <main+0xe4>)
 8000286:	f7ff ffa5 	bl	80001d4 <sendData>
	 		 		  HAL_Delay(500);
 800028a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800028e:	f000 fae1 	bl	8000854 <HAL_Delay>
	 		 		  RxData[0] = 0;
 8000292:	4b19      	ldr	r3, [pc, #100]	; (80002f8 <main+0xd8>)
 8000294:	2200      	movs	r2, #0
 8000296:	701a      	strb	r2, [r3, #0]
 8000298:	e7d3      	b.n	8000242 <main+0x22>
	 		 	  }
	 		 	  else if(RxData[0] == 3){	//Check for yellow button press
 800029a:	4b17      	ldr	r3, [pc, #92]	; (80002f8 <main+0xd8>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b03      	cmp	r3, #3
 80002a0:	d112      	bne.n	80002c8 <main+0xa8>
	 		 	  	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);	//toggle relay to toggle yellow LED
 80002a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002a6:	4818      	ldr	r0, [pc, #96]	; (8000308 <main+0xe8>)
 80002a8:	f000 fe22 	bl	8000ef0 <HAL_GPIO_TogglePin>
	 		 		  TxData[0] = 7;
 80002ac:	4b15      	ldr	r3, [pc, #84]	; (8000304 <main+0xe4>)
 80002ae:	2207      	movs	r2, #7
 80002b0:	701a      	strb	r2, [r3, #0]
	 		 		  sendData(TxData);
 80002b2:	4814      	ldr	r0, [pc, #80]	; (8000304 <main+0xe4>)
 80002b4:	f7ff ff8e 	bl	80001d4 <sendData>
	 		 		  HAL_Delay(500);
 80002b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002bc:	f000 faca 	bl	8000854 <HAL_Delay>
	 		 		  RxData[0] = 0;
 80002c0:	4b0d      	ldr	r3, [pc, #52]	; (80002f8 <main+0xd8>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	701a      	strb	r2, [r3, #0]
 80002c6:	e7bc      	b.n	8000242 <main+0x22>
	 		 	  }
	 		 	  else if(RxData[0] == 4){	//Check for blue button press
 80002c8:	4b0b      	ldr	r3, [pc, #44]	; (80002f8 <main+0xd8>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	2b04      	cmp	r3, #4
 80002ce:	d1b8      	bne.n	8000242 <main+0x22>
	 		 	  	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);	//toggle relay to toggle blue LED
 80002d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002d4:	480c      	ldr	r0, [pc, #48]	; (8000308 <main+0xe8>)
 80002d6:	f000 fe0b 	bl	8000ef0 <HAL_GPIO_TogglePin>
	 		 		  TxData[0] = 8;
 80002da:	4b0a      	ldr	r3, [pc, #40]	; (8000304 <main+0xe4>)
 80002dc:	2208      	movs	r2, #8
 80002de:	701a      	strb	r2, [r3, #0]
	 		 		  sendData(TxData);
 80002e0:	4808      	ldr	r0, [pc, #32]	; (8000304 <main+0xe4>)
 80002e2:	f7ff ff77 	bl	80001d4 <sendData>
	 		 		  HAL_Delay(500);
 80002e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002ea:	f000 fab3 	bl	8000854 <HAL_Delay>
	 		 		  RxData[0] = 0;
 80002ee:	4b02      	ldr	r3, [pc, #8]	; (80002f8 <main+0xd8>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	701a      	strb	r2, [r3, #0]
	  if(RxData[0] == 1){	//Check for red button press
 80002f4:	e7a5      	b.n	8000242 <main+0x22>
 80002f6:	bf00      	nop
 80002f8:	2000013c 	.word	0x2000013c
 80002fc:	20000028 	.word	0x20000028
 8000300:	48000800 	.word	0x48000800
 8000304:	20000138 	.word	0x20000138
 8000308:	48000400 	.word	0x48000400

0800030c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b0a6      	sub	sp, #152	; 0x98
 8000310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000312:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000316:	2228      	movs	r2, #40	; 0x28
 8000318:	2100      	movs	r1, #0
 800031a:	4618      	mov	r0, r3
 800031c:	f003 fd7c 	bl	8003e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000320:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000324:	2200      	movs	r2, #0
 8000326:	601a      	str	r2, [r3, #0]
 8000328:	605a      	str	r2, [r3, #4]
 800032a:	609a      	str	r2, [r3, #8]
 800032c:	60da      	str	r2, [r3, #12]
 800032e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	2258      	movs	r2, #88	; 0x58
 8000334:	2100      	movs	r1, #0
 8000336:	4618      	mov	r0, r3
 8000338:	f003 fd6e 	bl	8003e18 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800033c:	2302      	movs	r3, #2
 800033e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000340:	2301      	movs	r3, #1
 8000342:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000344:	2310      	movs	r3, #16
 8000346:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800034a:	2300      	movs	r3, #0
 800034c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000350:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000354:	4618      	mov	r0, r3
 8000356:	f000 fde5 	bl	8000f24 <HAL_RCC_OscConfig>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000360:	f000 f8ea 	bl	8000538 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000364:	230f      	movs	r3, #15
 8000366:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000368:	2300      	movs	r3, #0
 800036a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036c:	2300      	movs	r3, #0
 800036e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000370:	2300      	movs	r3, #0
 8000372:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000374:	2300      	movs	r3, #0
 8000376:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000378:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800037c:	2100      	movs	r1, #0
 800037e:	4618      	mov	r0, r3
 8000380:	f001 fe24 	bl	8001fcc <HAL_RCC_ClockConfig>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800038a:	f000 f8d5 	bl	8000538 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 800038e:	2303      	movs	r3, #3
 8000390:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000392:	2300      	movs	r3, #0
 8000394:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000396:	2300      	movs	r3, #0
 8000398:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	4618      	mov	r0, r3
 800039e:	f002 f84b 	bl	8002438 <HAL_RCCEx_PeriphCLKConfig>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80003a8:	f000 f8c6 	bl	8000538 <Error_Handler>
  }
}
 80003ac:	bf00      	nop
 80003ae:	3798      	adds	r7, #152	; 0x98
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}

080003b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003b8:	4b14      	ldr	r3, [pc, #80]	; (800040c <MX_USART1_UART_Init+0x58>)
 80003ba:	4a15      	ldr	r2, [pc, #84]	; (8000410 <MX_USART1_UART_Init+0x5c>)
 80003bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003be:	4b13      	ldr	r3, [pc, #76]	; (800040c <MX_USART1_UART_Init+0x58>)
 80003c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003c6:	4b11      	ldr	r3, [pc, #68]	; (800040c <MX_USART1_UART_Init+0x58>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003cc:	4b0f      	ldr	r3, [pc, #60]	; (800040c <MX_USART1_UART_Init+0x58>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003d2:	4b0e      	ldr	r3, [pc, #56]	; (800040c <MX_USART1_UART_Init+0x58>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003d8:	4b0c      	ldr	r3, [pc, #48]	; (800040c <MX_USART1_UART_Init+0x58>)
 80003da:	220c      	movs	r2, #12
 80003dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003de:	4b0b      	ldr	r3, [pc, #44]	; (800040c <MX_USART1_UART_Init+0x58>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003e4:	4b09      	ldr	r3, [pc, #36]	; (800040c <MX_USART1_UART_Init+0x58>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003ea:	4b08      	ldr	r3, [pc, #32]	; (800040c <MX_USART1_UART_Init+0x58>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003f0:	4b06      	ldr	r3, [pc, #24]	; (800040c <MX_USART1_UART_Init+0x58>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003f6:	4805      	ldr	r0, [pc, #20]	; (800040c <MX_USART1_UART_Init+0x58>)
 80003f8:	f002 fa3c 	bl	8002874 <HAL_UART_Init>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000402:	f000 f899 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	20000028 	.word	0x20000028
 8000410:	40013800 	.word	0x40013800

08000414 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000418:	4b14      	ldr	r3, [pc, #80]	; (800046c <MX_USART2_UART_Init+0x58>)
 800041a:	4a15      	ldr	r2, [pc, #84]	; (8000470 <MX_USART2_UART_Init+0x5c>)
 800041c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800041e:	4b13      	ldr	r3, [pc, #76]	; (800046c <MX_USART2_UART_Init+0x58>)
 8000420:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000424:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000426:	4b11      	ldr	r3, [pc, #68]	; (800046c <MX_USART2_UART_Init+0x58>)
 8000428:	2200      	movs	r2, #0
 800042a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800042c:	4b0f      	ldr	r3, [pc, #60]	; (800046c <MX_USART2_UART_Init+0x58>)
 800042e:	2200      	movs	r2, #0
 8000430:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000432:	4b0e      	ldr	r3, [pc, #56]	; (800046c <MX_USART2_UART_Init+0x58>)
 8000434:	2200      	movs	r2, #0
 8000436:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000438:	4b0c      	ldr	r3, [pc, #48]	; (800046c <MX_USART2_UART_Init+0x58>)
 800043a:	220c      	movs	r2, #12
 800043c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800043e:	4b0b      	ldr	r3, [pc, #44]	; (800046c <MX_USART2_UART_Init+0x58>)
 8000440:	2200      	movs	r2, #0
 8000442:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000444:	4b09      	ldr	r3, [pc, #36]	; (800046c <MX_USART2_UART_Init+0x58>)
 8000446:	2200      	movs	r2, #0
 8000448:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800044a:	4b08      	ldr	r3, [pc, #32]	; (800046c <MX_USART2_UART_Init+0x58>)
 800044c:	2200      	movs	r2, #0
 800044e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000450:	4b06      	ldr	r3, [pc, #24]	; (800046c <MX_USART2_UART_Init+0x58>)
 8000452:	2200      	movs	r2, #0
 8000454:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000456:	4805      	ldr	r0, [pc, #20]	; (800046c <MX_USART2_UART_Init+0x58>)
 8000458:	f002 fa0c 	bl	8002874 <HAL_UART_Init>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000462:	f000 f869 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	200000b0 	.word	0x200000b0
 8000470:	40004400 	.word	0x40004400

08000474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b088      	sub	sp, #32
 8000478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047a:	f107 030c 	add.w	r3, r7, #12
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]
 8000488:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800048a:	4b28      	ldr	r3, [pc, #160]	; (800052c <MX_GPIO_Init+0xb8>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	4a27      	ldr	r2, [pc, #156]	; (800052c <MX_GPIO_Init+0xb8>)
 8000490:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000494:	6153      	str	r3, [r2, #20]
 8000496:	4b25      	ldr	r3, [pc, #148]	; (800052c <MX_GPIO_Init+0xb8>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800049e:	60bb      	str	r3, [r7, #8]
 80004a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a2:	4b22      	ldr	r3, [pc, #136]	; (800052c <MX_GPIO_Init+0xb8>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4a21      	ldr	r2, [pc, #132]	; (800052c <MX_GPIO_Init+0xb8>)
 80004a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004ac:	6153      	str	r3, [r2, #20]
 80004ae:	4b1f      	ldr	r3, [pc, #124]	; (800052c <MX_GPIO_Init+0xb8>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ba:	4b1c      	ldr	r3, [pc, #112]	; (800052c <MX_GPIO_Init+0xb8>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	4a1b      	ldr	r2, [pc, #108]	; (800052c <MX_GPIO_Init+0xb8>)
 80004c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004c4:	6153      	str	r3, [r2, #20]
 80004c6:	4b19      	ldr	r3, [pc, #100]	; (800052c <MX_GPIO_Init+0xb8>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004ce:	603b      	str	r3, [r7, #0]
 80004d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80004d2:	2200      	movs	r2, #0
 80004d4:	210c      	movs	r1, #12
 80004d6:	4816      	ldr	r0, [pc, #88]	; (8000530 <MX_GPIO_Init+0xbc>)
 80004d8:	f000 fcf2 	bl	8000ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80004e2:	4814      	ldr	r0, [pc, #80]	; (8000534 <MX_GPIO_Init+0xc0>)
 80004e4:	f000 fcec 	bl	8000ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004e8:	230c      	movs	r3, #12
 80004ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ec:	2301      	movs	r3, #1
 80004ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f0:	2300      	movs	r3, #0
 80004f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f4:	2300      	movs	r3, #0
 80004f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004f8:	f107 030c 	add.w	r3, r7, #12
 80004fc:	4619      	mov	r1, r3
 80004fe:	480c      	ldr	r0, [pc, #48]	; (8000530 <MX_GPIO_Init+0xbc>)
 8000500:	f000 fb54 	bl	8000bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000504:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000508:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050a:	2301      	movs	r3, #1
 800050c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	2300      	movs	r3, #0
 8000510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000512:	2300      	movs	r3, #0
 8000514:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000516:	f107 030c 	add.w	r3, r7, #12
 800051a:	4619      	mov	r1, r3
 800051c:	4805      	ldr	r0, [pc, #20]	; (8000534 <MX_GPIO_Init+0xc0>)
 800051e:	f000 fb45 	bl	8000bac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000522:	bf00      	nop
 8000524:	3720      	adds	r7, #32
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40021000 	.word	0x40021000
 8000530:	48000800 	.word	0x48000800
 8000534:	48000400 	.word	0x48000400

08000538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800053c:	b672      	cpsid	i
}
 800053e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000540:	e7fe      	b.n	8000540 <Error_Handler+0x8>
	...

08000544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <HAL_MspInit+0x44>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	4a0e      	ldr	r2, [pc, #56]	; (8000588 <HAL_MspInit+0x44>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6193      	str	r3, [r2, #24]
 8000556:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <HAL_MspInit+0x44>)
 8000558:	699b      	ldr	r3, [r3, #24]
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000562:	4b09      	ldr	r3, [pc, #36]	; (8000588 <HAL_MspInit+0x44>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	4a08      	ldr	r2, [pc, #32]	; (8000588 <HAL_MspInit+0x44>)
 8000568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056c:	61d3      	str	r3, [r2, #28]
 800056e:	4b06      	ldr	r3, [pc, #24]	; (8000588 <HAL_MspInit+0x44>)
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000576:	603b      	str	r3, [r7, #0]
 8000578:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	40021000 	.word	0x40021000

0800058c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08c      	sub	sp, #48	; 0x30
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000594:	f107 031c 	add.w	r3, r7, #28
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a36      	ldr	r2, [pc, #216]	; (8000684 <HAL_UART_MspInit+0xf8>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d130      	bne.n	8000610 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005ae:	4b36      	ldr	r3, [pc, #216]	; (8000688 <HAL_UART_MspInit+0xfc>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	4a35      	ldr	r2, [pc, #212]	; (8000688 <HAL_UART_MspInit+0xfc>)
 80005b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b8:	6193      	str	r3, [r2, #24]
 80005ba:	4b33      	ldr	r3, [pc, #204]	; (8000688 <HAL_UART_MspInit+0xfc>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c2:	61bb      	str	r3, [r7, #24]
 80005c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c6:	4b30      	ldr	r3, [pc, #192]	; (8000688 <HAL_UART_MspInit+0xfc>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	4a2f      	ldr	r2, [pc, #188]	; (8000688 <HAL_UART_MspInit+0xfc>)
 80005cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005d0:	6153      	str	r3, [r2, #20]
 80005d2:	4b2d      	ldr	r3, [pc, #180]	; (8000688 <HAL_UART_MspInit+0xfc>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80005de:	2330      	movs	r3, #48	; 0x30
 80005e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e2:	2302      	movs	r3, #2
 80005e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ea:	2303      	movs	r3, #3
 80005ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80005ee:	2307      	movs	r3, #7
 80005f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005f2:	f107 031c 	add.w	r3, r7, #28
 80005f6:	4619      	mov	r1, r3
 80005f8:	4824      	ldr	r0, [pc, #144]	; (800068c <HAL_UART_MspInit+0x100>)
 80005fa:	f000 fad7 	bl	8000bac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80005fe:	2200      	movs	r2, #0
 8000600:	2100      	movs	r1, #0
 8000602:	2025      	movs	r0, #37	; 0x25
 8000604:	f000 fa25 	bl	8000a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000608:	2025      	movs	r0, #37	; 0x25
 800060a:	f000 fa3e 	bl	8000a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800060e:	e035      	b.n	800067c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a1e      	ldr	r2, [pc, #120]	; (8000690 <HAL_UART_MspInit+0x104>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d130      	bne.n	800067c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800061a:	4b1b      	ldr	r3, [pc, #108]	; (8000688 <HAL_UART_MspInit+0xfc>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	4a1a      	ldr	r2, [pc, #104]	; (8000688 <HAL_UART_MspInit+0xfc>)
 8000620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000624:	61d3      	str	r3, [r2, #28]
 8000626:	4b18      	ldr	r3, [pc, #96]	; (8000688 <HAL_UART_MspInit+0xfc>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800062e:	613b      	str	r3, [r7, #16]
 8000630:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	4b15      	ldr	r3, [pc, #84]	; (8000688 <HAL_UART_MspInit+0xfc>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	4a14      	ldr	r2, [pc, #80]	; (8000688 <HAL_UART_MspInit+0xfc>)
 8000638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800063c:	6153      	str	r3, [r2, #20]
 800063e:	4b12      	ldr	r3, [pc, #72]	; (8000688 <HAL_UART_MspInit+0xfc>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800064a:	230c      	movs	r3, #12
 800064c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064e:	2302      	movs	r3, #2
 8000650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000656:	2303      	movs	r3, #3
 8000658:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800065a:	2307      	movs	r3, #7
 800065c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	4619      	mov	r1, r3
 8000664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000668:	f000 faa0 	bl	8000bac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800066c:	2200      	movs	r2, #0
 800066e:	2100      	movs	r1, #0
 8000670:	2026      	movs	r0, #38	; 0x26
 8000672:	f000 f9ee 	bl	8000a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000676:	2026      	movs	r0, #38	; 0x26
 8000678:	f000 fa07 	bl	8000a8a <HAL_NVIC_EnableIRQ>
}
 800067c:	bf00      	nop
 800067e:	3730      	adds	r7, #48	; 0x30
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40013800 	.word	0x40013800
 8000688:	40021000 	.word	0x40021000
 800068c:	48000800 	.word	0x48000800
 8000690:	40004400 	.word	0x40004400

08000694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000698:	e7fe      	b.n	8000698 <NMI_Handler+0x4>

0800069a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800069e:	e7fe      	b.n	800069e <HardFault_Handler+0x4>

080006a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <MemManage_Handler+0x4>

080006a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006aa:	e7fe      	b.n	80006aa <BusFault_Handler+0x4>

080006ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <UsageFault_Handler+0x4>

080006b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e0:	f000 f898 	bl	8000814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006ec:	4802      	ldr	r0, [pc, #8]	; (80006f8 <USART1_IRQHandler+0x10>)
 80006ee:	f002 f999 	bl	8002a24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000028 	.word	0x20000028

080006fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000700:	4802      	ldr	r0, [pc, #8]	; (800070c <USART2_IRQHandler+0x10>)
 8000702:	f002 f98f 	bl	8002a24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	200000b0 	.word	0x200000b0

08000710 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <SystemInit+0x20>)
 8000716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800071a:	4a05      	ldr	r2, [pc, #20]	; (8000730 <SystemInit+0x20>)
 800071c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000720:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000734:	f8df d034 	ldr.w	sp, [pc, #52]	; 800076c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000738:	f7ff ffea 	bl	8000710 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800073c:	480c      	ldr	r0, [pc, #48]	; (8000770 <LoopForever+0x6>)
  ldr r1, =_edata
 800073e:	490d      	ldr	r1, [pc, #52]	; (8000774 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000740:	4a0d      	ldr	r2, [pc, #52]	; (8000778 <LoopForever+0xe>)
  movs r3, #0
 8000742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000744:	e002      	b.n	800074c <LoopCopyDataInit>

08000746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800074a:	3304      	adds	r3, #4

0800074c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800074c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000750:	d3f9      	bcc.n	8000746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000752:	4a0a      	ldr	r2, [pc, #40]	; (800077c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000754:	4c0a      	ldr	r4, [pc, #40]	; (8000780 <LoopForever+0x16>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000758:	e001      	b.n	800075e <LoopFillZerobss>

0800075a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800075a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800075c:	3204      	adds	r2, #4

0800075e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000760:	d3fb      	bcc.n	800075a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000762:	f003 fb61 	bl	8003e28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000766:	f7ff fd5b 	bl	8000220 <main>

0800076a <LoopForever>:

LoopForever:
    b LoopForever
 800076a:	e7fe      	b.n	800076a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800076c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000774:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000778:	08003ec8 	.word	0x08003ec8
  ldr r2, =_sbss
 800077c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000780:	20000144 	.word	0x20000144

08000784 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000784:	e7fe      	b.n	8000784 <ADC1_2_IRQHandler>
	...

08000788 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800078c:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <HAL_Init+0x28>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a07      	ldr	r2, [pc, #28]	; (80007b0 <HAL_Init+0x28>)
 8000792:	f043 0310 	orr.w	r3, r3, #16
 8000796:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000798:	2003      	movs	r0, #3
 800079a:	f000 f94f 	bl	8000a3c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800079e:	200f      	movs	r0, #15
 80007a0:	f000 f808 	bl	80007b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007a4:	f7ff fece 	bl	8000544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40022000 	.word	0x40022000

080007b4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <HAL_InitTick+0x54>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <HAL_InitTick+0x58>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	4619      	mov	r1, r3
 80007c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 f967 	bl	8000aa6 <HAL_SYSTICK_Config>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
 80007e0:	e00e      	b.n	8000800 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2b0f      	cmp	r3, #15
 80007e6:	d80a      	bhi.n	80007fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e8:	2200      	movs	r2, #0
 80007ea:	6879      	ldr	r1, [r7, #4]
 80007ec:	f04f 30ff 	mov.w	r0, #4294967295
 80007f0:	f000 f92f 	bl	8000a52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007f4:	4a06      	ldr	r2, [pc, #24]	; (8000810 <HAL_InitTick+0x5c>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007fa:	2300      	movs	r3, #0
 80007fc:	e000      	b.n	8000800 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
}
 8000800:	4618      	mov	r0, r3
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000000 	.word	0x20000000
 800080c:	20000008 	.word	0x20000008
 8000810:	20000004 	.word	0x20000004

08000814 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HAL_IncTick+0x20>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	461a      	mov	r2, r3
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <HAL_IncTick+0x24>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4413      	add	r3, r2
 8000824:	4a04      	ldr	r2, [pc, #16]	; (8000838 <HAL_IncTick+0x24>)
 8000826:	6013      	str	r3, [r2, #0]
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	20000008 	.word	0x20000008
 8000838:	20000140 	.word	0x20000140

0800083c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000840:	4b03      	ldr	r3, [pc, #12]	; (8000850 <HAL_GetTick+0x14>)
 8000842:	681b      	ldr	r3, [r3, #0]
}
 8000844:	4618      	mov	r0, r3
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	20000140 	.word	0x20000140

08000854 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800085c:	f7ff ffee 	bl	800083c <HAL_GetTick>
 8000860:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800086c:	d005      	beq.n	800087a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800086e:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <HAL_Delay+0x44>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	461a      	mov	r2, r3
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	4413      	add	r3, r2
 8000878:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800087a:	bf00      	nop
 800087c:	f7ff ffde 	bl	800083c <HAL_GetTick>
 8000880:	4602      	mov	r2, r0
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	68fa      	ldr	r2, [r7, #12]
 8000888:	429a      	cmp	r2, r3
 800088a:	d8f7      	bhi.n	800087c <HAL_Delay+0x28>
  {
  }
}
 800088c:	bf00      	nop
 800088e:	bf00      	nop
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000008 	.word	0x20000008

0800089c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f003 0307 	and.w	r3, r3, #7
 80008aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <__NVIC_SetPriorityGrouping+0x44>)
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008b2:	68ba      	ldr	r2, [r7, #8]
 80008b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008b8:	4013      	ands	r3, r2
 80008ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ce:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <__NVIC_SetPriorityGrouping+0x44>)
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	60d3      	str	r3, [r2, #12]
}
 80008d4:	bf00      	nop
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e8:	4b04      	ldr	r3, [pc, #16]	; (80008fc <__NVIC_GetPriorityGrouping+0x18>)
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	0a1b      	lsrs	r3, r3, #8
 80008ee:	f003 0307 	and.w	r3, r3, #7
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800090a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090e:	2b00      	cmp	r3, #0
 8000910:	db0b      	blt.n	800092a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	f003 021f 	and.w	r2, r3, #31
 8000918:	4907      	ldr	r1, [pc, #28]	; (8000938 <__NVIC_EnableIRQ+0x38>)
 800091a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091e:	095b      	lsrs	r3, r3, #5
 8000920:	2001      	movs	r0, #1
 8000922:	fa00 f202 	lsl.w	r2, r0, r2
 8000926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000e100 	.word	0xe000e100

0800093c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	6039      	str	r1, [r7, #0]
 8000946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094c:	2b00      	cmp	r3, #0
 800094e:	db0a      	blt.n	8000966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	b2da      	uxtb	r2, r3
 8000954:	490c      	ldr	r1, [pc, #48]	; (8000988 <__NVIC_SetPriority+0x4c>)
 8000956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095a:	0112      	lsls	r2, r2, #4
 800095c:	b2d2      	uxtb	r2, r2
 800095e:	440b      	add	r3, r1
 8000960:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000964:	e00a      	b.n	800097c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	b2da      	uxtb	r2, r3
 800096a:	4908      	ldr	r1, [pc, #32]	; (800098c <__NVIC_SetPriority+0x50>)
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	f003 030f 	and.w	r3, r3, #15
 8000972:	3b04      	subs	r3, #4
 8000974:	0112      	lsls	r2, r2, #4
 8000976:	b2d2      	uxtb	r2, r2
 8000978:	440b      	add	r3, r1
 800097a:	761a      	strb	r2, [r3, #24]
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	e000e100 	.word	0xe000e100
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000990:	b480      	push	{r7}
 8000992:	b089      	sub	sp, #36	; 0x24
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	f003 0307 	and.w	r3, r3, #7
 80009a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	f1c3 0307 	rsb	r3, r3, #7
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	bf28      	it	cs
 80009ae:	2304      	movcs	r3, #4
 80009b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	3304      	adds	r3, #4
 80009b6:	2b06      	cmp	r3, #6
 80009b8:	d902      	bls.n	80009c0 <NVIC_EncodePriority+0x30>
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	3b03      	subs	r3, #3
 80009be:	e000      	b.n	80009c2 <NVIC_EncodePriority+0x32>
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c4:	f04f 32ff 	mov.w	r2, #4294967295
 80009c8:	69bb      	ldr	r3, [r7, #24]
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	43da      	mvns	r2, r3
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	401a      	ands	r2, r3
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d8:	f04f 31ff 	mov.w	r1, #4294967295
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	fa01 f303 	lsl.w	r3, r1, r3
 80009e2:	43d9      	mvns	r1, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e8:	4313      	orrs	r3, r2
         );
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3724      	adds	r7, #36	; 0x24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
	...

080009f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a08:	d301      	bcc.n	8000a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e00f      	b.n	8000a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <SysTick_Config+0x40>)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3b01      	subs	r3, #1
 8000a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a16:	210f      	movs	r1, #15
 8000a18:	f04f 30ff 	mov.w	r0, #4294967295
 8000a1c:	f7ff ff8e 	bl	800093c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <SysTick_Config+0x40>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a26:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <SysTick_Config+0x40>)
 8000a28:	2207      	movs	r2, #7
 8000a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	e000e010 	.word	0xe000e010

08000a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f7ff ff29 	bl	800089c <__NVIC_SetPriorityGrouping>
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b086      	sub	sp, #24
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	4603      	mov	r3, r0
 8000a5a:	60b9      	str	r1, [r7, #8]
 8000a5c:	607a      	str	r2, [r7, #4]
 8000a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a64:	f7ff ff3e 	bl	80008e4 <__NVIC_GetPriorityGrouping>
 8000a68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	68b9      	ldr	r1, [r7, #8]
 8000a6e:	6978      	ldr	r0, [r7, #20]
 8000a70:	f7ff ff8e 	bl	8000990 <NVIC_EncodePriority>
 8000a74:	4602      	mov	r2, r0
 8000a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff ff5d 	bl	800093c <__NVIC_SetPriority>
}
 8000a82:	bf00      	nop
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	4603      	mov	r3, r0
 8000a92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff ff31 	bl	8000900 <__NVIC_EnableIRQ>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b082      	sub	sp, #8
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f7ff ffa2 	bl	80009f8 <SysTick_Config>
 8000ab4:	4603      	mov	r3, r0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	d008      	beq.n	8000ae2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2204      	movs	r2, #4
 8000ad4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e020      	b.n	8000b24 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f022 020e 	bic.w	r2, r2, #14
 8000af0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f022 0201 	bic.w	r2, r2, #1
 8000b00:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b10:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2201      	movs	r2, #1
 8000b16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	d005      	beq.n	8000b52 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2204      	movs	r2, #4
 8000b4a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	73fb      	strb	r3, [r7, #15]
 8000b50:	e027      	b.n	8000ba2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f022 020e 	bic.w	r2, r2, #14
 8000b60:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f022 0201 	bic.w	r2, r2, #1
 8000b70:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b80:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2201      	movs	r2, #1
 8000b86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d003      	beq.n	8000ba2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	4798      	blx	r3
    } 
  }
  return status;
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b087      	sub	sp, #28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bba:	e160      	b.n	8000e7e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f000 8152 	beq.w	8000e78 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f003 0303 	and.w	r3, r3, #3
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d005      	beq.n	8000bec <HAL_GPIO_Init+0x40>
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f003 0303 	and.w	r3, r3, #3
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d130      	bne.n	8000c4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	2203      	movs	r2, #3
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	4013      	ands	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	68da      	ldr	r2, [r3, #12]
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c22:	2201      	movs	r2, #1
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	091b      	lsrs	r3, r3, #4
 8000c38:	f003 0201 	and.w	r2, r3, #1
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f003 0303 	and.w	r3, r3, #3
 8000c56:	2b03      	cmp	r3, #3
 8000c58:	d017      	beq.n	8000c8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	2203      	movs	r2, #3
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	689a      	ldr	r2, [r3, #8]
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f003 0303 	and.w	r3, r3, #3
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d123      	bne.n	8000cde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	08da      	lsrs	r2, r3, #3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	3208      	adds	r2, #8
 8000c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	220f      	movs	r2, #15
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	691a      	ldr	r2, [r3, #16]
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	f003 0307 	and.w	r3, r3, #7
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	08da      	lsrs	r2, r3, #3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3208      	adds	r2, #8
 8000cd8:	6939      	ldr	r1, [r7, #16]
 8000cda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	2203      	movs	r2, #3
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f003 0203 	and.w	r2, r3, #3
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	f000 80ac 	beq.w	8000e78 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d20:	4b5e      	ldr	r3, [pc, #376]	; (8000e9c <HAL_GPIO_Init+0x2f0>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	4a5d      	ldr	r2, [pc, #372]	; (8000e9c <HAL_GPIO_Init+0x2f0>)
 8000d26:	f043 0301 	orr.w	r3, r3, #1
 8000d2a:	6193      	str	r3, [r2, #24]
 8000d2c:	4b5b      	ldr	r3, [pc, #364]	; (8000e9c <HAL_GPIO_Init+0x2f0>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d38:	4a59      	ldr	r2, [pc, #356]	; (8000ea0 <HAL_GPIO_Init+0x2f4>)
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	089b      	lsrs	r3, r3, #2
 8000d3e:	3302      	adds	r3, #2
 8000d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	f003 0303 	and.w	r3, r3, #3
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	220f      	movs	r2, #15
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d62:	d025      	beq.n	8000db0 <HAL_GPIO_Init+0x204>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a4f      	ldr	r2, [pc, #316]	; (8000ea4 <HAL_GPIO_Init+0x2f8>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d01f      	beq.n	8000dac <HAL_GPIO_Init+0x200>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a4e      	ldr	r2, [pc, #312]	; (8000ea8 <HAL_GPIO_Init+0x2fc>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d019      	beq.n	8000da8 <HAL_GPIO_Init+0x1fc>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a4d      	ldr	r2, [pc, #308]	; (8000eac <HAL_GPIO_Init+0x300>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d013      	beq.n	8000da4 <HAL_GPIO_Init+0x1f8>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4a4c      	ldr	r2, [pc, #304]	; (8000eb0 <HAL_GPIO_Init+0x304>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d00d      	beq.n	8000da0 <HAL_GPIO_Init+0x1f4>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a4b      	ldr	r2, [pc, #300]	; (8000eb4 <HAL_GPIO_Init+0x308>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d007      	beq.n	8000d9c <HAL_GPIO_Init+0x1f0>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a4a      	ldr	r2, [pc, #296]	; (8000eb8 <HAL_GPIO_Init+0x30c>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d101      	bne.n	8000d98 <HAL_GPIO_Init+0x1ec>
 8000d94:	2306      	movs	r3, #6
 8000d96:	e00c      	b.n	8000db2 <HAL_GPIO_Init+0x206>
 8000d98:	2307      	movs	r3, #7
 8000d9a:	e00a      	b.n	8000db2 <HAL_GPIO_Init+0x206>
 8000d9c:	2305      	movs	r3, #5
 8000d9e:	e008      	b.n	8000db2 <HAL_GPIO_Init+0x206>
 8000da0:	2304      	movs	r3, #4
 8000da2:	e006      	b.n	8000db2 <HAL_GPIO_Init+0x206>
 8000da4:	2303      	movs	r3, #3
 8000da6:	e004      	b.n	8000db2 <HAL_GPIO_Init+0x206>
 8000da8:	2302      	movs	r3, #2
 8000daa:	e002      	b.n	8000db2 <HAL_GPIO_Init+0x206>
 8000dac:	2301      	movs	r3, #1
 8000dae:	e000      	b.n	8000db2 <HAL_GPIO_Init+0x206>
 8000db0:	2300      	movs	r3, #0
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	f002 0203 	and.w	r2, r2, #3
 8000db8:	0092      	lsls	r2, r2, #2
 8000dba:	4093      	lsls	r3, r2
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dc2:	4937      	ldr	r1, [pc, #220]	; (8000ea0 <HAL_GPIO_Init+0x2f4>)
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	089b      	lsrs	r3, r3, #2
 8000dc8:	3302      	adds	r3, #2
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dd0:	4b3a      	ldr	r3, [pc, #232]	; (8000ebc <HAL_GPIO_Init+0x310>)
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d003      	beq.n	8000df4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000df4:	4a31      	ldr	r2, [pc, #196]	; (8000ebc <HAL_GPIO_Init+0x310>)
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dfa:	4b30      	ldr	r3, [pc, #192]	; (8000ebc <HAL_GPIO_Init+0x310>)
 8000dfc:	68db      	ldr	r3, [r3, #12]
 8000dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	43db      	mvns	r3, r3
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d003      	beq.n	8000e1e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e1e:	4a27      	ldr	r2, [pc, #156]	; (8000ebc <HAL_GPIO_Init+0x310>)
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e24:	4b25      	ldr	r3, [pc, #148]	; (8000ebc <HAL_GPIO_Init+0x310>)
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d003      	beq.n	8000e48 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e48:	4a1c      	ldr	r2, [pc, #112]	; (8000ebc <HAL_GPIO_Init+0x310>)
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e4e:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <HAL_GPIO_Init+0x310>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	43db      	mvns	r3, r3
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d003      	beq.n	8000e72 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e72:	4a12      	ldr	r2, [pc, #72]	; (8000ebc <HAL_GPIO_Init+0x310>)
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	fa22 f303 	lsr.w	r3, r2, r3
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	f47f ae97 	bne.w	8000bbc <HAL_GPIO_Init+0x10>
  }
}
 8000e8e:	bf00      	nop
 8000e90:	bf00      	nop
 8000e92:	371c      	adds	r7, #28
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40010000 	.word	0x40010000
 8000ea4:	48000400 	.word	0x48000400
 8000ea8:	48000800 	.word	0x48000800
 8000eac:	48000c00 	.word	0x48000c00
 8000eb0:	48001000 	.word	0x48001000
 8000eb4:	48001400 	.word	0x48001400
 8000eb8:	48001800 	.word	0x48001800
 8000ebc:	40010400 	.word	0x40010400

08000ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	807b      	strh	r3, [r7, #2]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ed0:	787b      	ldrb	r3, [r7, #1]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ed6:	887a      	ldrh	r2, [r7, #2]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000edc:	e002      	b.n	8000ee4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ede:	887a      	ldrh	r2, [r7, #2]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	695b      	ldr	r3, [r3, #20]
 8000f00:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f02:	887a      	ldrh	r2, [r7, #2]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4013      	ands	r3, r2
 8000f08:	041a      	lsls	r2, r3, #16
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	43d9      	mvns	r1, r3
 8000f0e:	887b      	ldrh	r3, [r7, #2]
 8000f10:	400b      	ands	r3, r1
 8000f12:	431a      	orrs	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	619a      	str	r2, [r3, #24]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f34:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f3a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d102      	bne.n	8000f4a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	f001 b83a 	b.w	8001fbe <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f4e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f000 816f 	beq.w	800123e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f60:	4bb5      	ldr	r3, [pc, #724]	; (8001238 <HAL_RCC_OscConfig+0x314>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 030c 	and.w	r3, r3, #12
 8000f68:	2b04      	cmp	r3, #4
 8000f6a:	d00c      	beq.n	8000f86 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f6c:	4bb2      	ldr	r3, [pc, #712]	; (8001238 <HAL_RCC_OscConfig+0x314>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 030c 	and.w	r3, r3, #12
 8000f74:	2b08      	cmp	r3, #8
 8000f76:	d15c      	bne.n	8001032 <HAL_RCC_OscConfig+0x10e>
 8000f78:	4baf      	ldr	r3, [pc, #700]	; (8001238 <HAL_RCC_OscConfig+0x314>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f84:	d155      	bne.n	8001032 <HAL_RCC_OscConfig+0x10e>
 8000f86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f8a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f8e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000f92:	fa93 f3a3 	rbit	r3, r3
 8000f96:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f9a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f9e:	fab3 f383 	clz	r3, r3
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	095b      	lsrs	r3, r3, #5
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d102      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x94>
 8000fb2:	4ba1      	ldr	r3, [pc, #644]	; (8001238 <HAL_RCC_OscConfig+0x314>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	e015      	b.n	8000fe4 <HAL_RCC_OscConfig+0xc0>
 8000fb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fbc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000fc4:	fa93 f3a3 	rbit	r3, r3
 8000fc8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000fcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fd0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000fd4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000fd8:	fa93 f3a3 	rbit	r3, r3
 8000fdc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000fe0:	4b95      	ldr	r3, [pc, #596]	; (8001238 <HAL_RCC_OscConfig+0x314>)
 8000fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fe8:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000fec:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000ff0:	fa92 f2a2 	rbit	r2, r2
 8000ff4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000ff8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000ffc:	fab2 f282 	clz	r2, r2
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	f042 0220 	orr.w	r2, r2, #32
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	f002 021f 	and.w	r2, r2, #31
 800100c:	2101      	movs	r1, #1
 800100e:	fa01 f202 	lsl.w	r2, r1, r2
 8001012:	4013      	ands	r3, r2
 8001014:	2b00      	cmp	r3, #0
 8001016:	f000 8111 	beq.w	800123c <HAL_RCC_OscConfig+0x318>
 800101a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800101e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	f040 8108 	bne.w	800123c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	f000 bfc6 	b.w	8001fbe <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001032:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001036:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001042:	d106      	bne.n	8001052 <HAL_RCC_OscConfig+0x12e>
 8001044:	4b7c      	ldr	r3, [pc, #496]	; (8001238 <HAL_RCC_OscConfig+0x314>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a7b      	ldr	r2, [pc, #492]	; (8001238 <HAL_RCC_OscConfig+0x314>)
 800104a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800104e:	6013      	str	r3, [r2, #0]
 8001050:	e036      	b.n	80010c0 <HAL_RCC_OscConfig+0x19c>
 8001052:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001056:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d10c      	bne.n	800107c <HAL_RCC_OscConfig+0x158>
 8001062:	4b75      	ldr	r3, [pc, #468]	; (8001238 <HAL_RCC_OscConfig+0x314>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a74      	ldr	r2, [pc, #464]	; (8001238 <HAL_RCC_OscConfig+0x314>)
 8001068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800106c:	6013      	str	r3, [r2, #0]
 800106e:	4b72      	ldr	r3, [pc, #456]	; (8001238 <HAL_RCC_OscConfig+0x314>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a71      	ldr	r2, [pc, #452]	; (8001238 <HAL_RCC_OscConfig+0x314>)
 8001074:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001078:	6013      	str	r3, [r2, #0]
 800107a:	e021      	b.n	80010c0 <HAL_RCC_OscConfig+0x19c>
 800107c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001080:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800108c:	d10c      	bne.n	80010a8 <HAL_RCC_OscConfig+0x184>
 800108e:	4b6a      	ldr	r3, [pc, #424]	; (8001238 <HAL_RCC_OscConfig+0x314>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a69      	ldr	r2, [pc, #420]	; (8001238 <HAL_RCC_OscConfig+0x314>)
 8001094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001098:	6013      	str	r3, [r2, #0]
 800109a:	4b67      	ldr	r3, [pc, #412]	; (8001238 <HAL_RCC_OscConfig+0x314>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a66      	ldr	r2, [pc, #408]	; (8001238 <HAL_RCC_OscConfig+0x314>)
 80010a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	e00b      	b.n	80010c0 <HAL_RCC_OscConfig+0x19c>
 80010a8:	4b63      	ldr	r3, [pc, #396]	; (8001238 <HAL_RCC_OscConfig+0x314>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a62      	ldr	r2, [pc, #392]	; (8001238 <HAL_RCC_OscConfig+0x314>)
 80010ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010b2:	6013      	str	r3, [r2, #0]
 80010b4:	4b60      	ldr	r3, [pc, #384]	; (8001238 <HAL_RCC_OscConfig+0x314>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a5f      	ldr	r2, [pc, #380]	; (8001238 <HAL_RCC_OscConfig+0x314>)
 80010ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010be:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d059      	beq.n	8001184 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d0:	f7ff fbb4 	bl	800083c <HAL_GetTick>
 80010d4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d8:	e00a      	b.n	80010f0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010da:	f7ff fbaf 	bl	800083c <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b64      	cmp	r3, #100	; 0x64
 80010e8:	d902      	bls.n	80010f0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	f000 bf67 	b.w	8001fbe <HAL_RCC_OscConfig+0x109a>
 80010f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010f4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80010fc:	fa93 f3a3 	rbit	r3, r3
 8001100:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001104:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001108:	fab3 f383 	clz	r3, r3
 800110c:	b2db      	uxtb	r3, r3
 800110e:	095b      	lsrs	r3, r3, #5
 8001110:	b2db      	uxtb	r3, r3
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b01      	cmp	r3, #1
 800111a:	d102      	bne.n	8001122 <HAL_RCC_OscConfig+0x1fe>
 800111c:	4b46      	ldr	r3, [pc, #280]	; (8001238 <HAL_RCC_OscConfig+0x314>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	e015      	b.n	800114e <HAL_RCC_OscConfig+0x22a>
 8001122:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001126:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800112e:	fa93 f3a3 	rbit	r3, r3
 8001132:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001136:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800113a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800113e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001142:	fa93 f3a3 	rbit	r3, r3
 8001146:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800114a:	4b3b      	ldr	r3, [pc, #236]	; (8001238 <HAL_RCC_OscConfig+0x314>)
 800114c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001152:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001156:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800115a:	fa92 f2a2 	rbit	r2, r2
 800115e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001162:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001166:	fab2 f282 	clz	r2, r2
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	f042 0220 	orr.w	r2, r2, #32
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	f002 021f 	and.w	r2, r2, #31
 8001176:	2101      	movs	r1, #1
 8001178:	fa01 f202 	lsl.w	r2, r1, r2
 800117c:	4013      	ands	r3, r2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d0ab      	beq.n	80010da <HAL_RCC_OscConfig+0x1b6>
 8001182:	e05c      	b.n	800123e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001184:	f7ff fb5a 	bl	800083c <HAL_GetTick>
 8001188:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800118c:	e00a      	b.n	80011a4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800118e:	f7ff fb55 	bl	800083c <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b64      	cmp	r3, #100	; 0x64
 800119c:	d902      	bls.n	80011a4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	f000 bf0d 	b.w	8001fbe <HAL_RCC_OscConfig+0x109a>
 80011a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011a8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80011b0:	fa93 f3a3 	rbit	r3, r3
 80011b4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80011b8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011bc:	fab3 f383 	clz	r3, r3
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	095b      	lsrs	r3, r3, #5
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d102      	bne.n	80011d6 <HAL_RCC_OscConfig+0x2b2>
 80011d0:	4b19      	ldr	r3, [pc, #100]	; (8001238 <HAL_RCC_OscConfig+0x314>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	e015      	b.n	8001202 <HAL_RCC_OscConfig+0x2de>
 80011d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011da:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011de:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80011e2:	fa93 f3a3 	rbit	r3, r3
 80011e6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80011ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011ee:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80011f2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80011f6:	fa93 f3a3 	rbit	r3, r3
 80011fa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <HAL_RCC_OscConfig+0x314>)
 8001200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001202:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001206:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800120a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800120e:	fa92 f2a2 	rbit	r2, r2
 8001212:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001216:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800121a:	fab2 f282 	clz	r2, r2
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	f042 0220 	orr.w	r2, r2, #32
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	f002 021f 	and.w	r2, r2, #31
 800122a:	2101      	movs	r1, #1
 800122c:	fa01 f202 	lsl.w	r2, r1, r2
 8001230:	4013      	ands	r3, r2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1ab      	bne.n	800118e <HAL_RCC_OscConfig+0x26a>
 8001236:	e002      	b.n	800123e <HAL_RCC_OscConfig+0x31a>
 8001238:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800123c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800123e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001242:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 817f 	beq.w	8001552 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001254:	4ba7      	ldr	r3, [pc, #668]	; (80014f4 <HAL_RCC_OscConfig+0x5d0>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 030c 	and.w	r3, r3, #12
 800125c:	2b00      	cmp	r3, #0
 800125e:	d00c      	beq.n	800127a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001260:	4ba4      	ldr	r3, [pc, #656]	; (80014f4 <HAL_RCC_OscConfig+0x5d0>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 030c 	and.w	r3, r3, #12
 8001268:	2b08      	cmp	r3, #8
 800126a:	d173      	bne.n	8001354 <HAL_RCC_OscConfig+0x430>
 800126c:	4ba1      	ldr	r3, [pc, #644]	; (80014f4 <HAL_RCC_OscConfig+0x5d0>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001278:	d16c      	bne.n	8001354 <HAL_RCC_OscConfig+0x430>
 800127a:	2302      	movs	r3, #2
 800127c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001280:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001284:	fa93 f3a3 	rbit	r3, r3
 8001288:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800128c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001290:	fab3 f383 	clz	r3, r3
 8001294:	b2db      	uxtb	r3, r3
 8001296:	095b      	lsrs	r3, r3, #5
 8001298:	b2db      	uxtb	r3, r3
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d102      	bne.n	80012aa <HAL_RCC_OscConfig+0x386>
 80012a4:	4b93      	ldr	r3, [pc, #588]	; (80014f4 <HAL_RCC_OscConfig+0x5d0>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	e013      	b.n	80012d2 <HAL_RCC_OscConfig+0x3ae>
 80012aa:	2302      	movs	r3, #2
 80012ac:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80012b4:	fa93 f3a3 	rbit	r3, r3
 80012b8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80012bc:	2302      	movs	r3, #2
 80012be:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80012c2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80012c6:	fa93 f3a3 	rbit	r3, r3
 80012ca:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80012ce:	4b89      	ldr	r3, [pc, #548]	; (80014f4 <HAL_RCC_OscConfig+0x5d0>)
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d2:	2202      	movs	r2, #2
 80012d4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80012d8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80012dc:	fa92 f2a2 	rbit	r2, r2
 80012e0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80012e4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80012e8:	fab2 f282 	clz	r2, r2
 80012ec:	b2d2      	uxtb	r2, r2
 80012ee:	f042 0220 	orr.w	r2, r2, #32
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	f002 021f 	and.w	r2, r2, #31
 80012f8:	2101      	movs	r1, #1
 80012fa:	fa01 f202 	lsl.w	r2, r1, r2
 80012fe:	4013      	ands	r3, r2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d00a      	beq.n	800131a <HAL_RCC_OscConfig+0x3f6>
 8001304:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001308:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d002      	beq.n	800131a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	f000 be52 	b.w	8001fbe <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131a:	4b76      	ldr	r3, [pc, #472]	; (80014f4 <HAL_RCC_OscConfig+0x5d0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001322:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001326:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	21f8      	movs	r1, #248	; 0xf8
 8001330:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001334:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001338:	fa91 f1a1 	rbit	r1, r1
 800133c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001340:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001344:	fab1 f181 	clz	r1, r1
 8001348:	b2c9      	uxtb	r1, r1
 800134a:	408b      	lsls	r3, r1
 800134c:	4969      	ldr	r1, [pc, #420]	; (80014f4 <HAL_RCC_OscConfig+0x5d0>)
 800134e:	4313      	orrs	r3, r2
 8001350:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001352:	e0fe      	b.n	8001552 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001354:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001358:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 8088 	beq.w	8001476 <HAL_RCC_OscConfig+0x552>
 8001366:	2301      	movs	r3, #1
 8001368:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001370:	fa93 f3a3 	rbit	r3, r3
 8001374:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001378:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800137c:	fab3 f383 	clz	r3, r3
 8001380:	b2db      	uxtb	r3, r3
 8001382:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001386:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	461a      	mov	r2, r3
 800138e:	2301      	movs	r3, #1
 8001390:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001392:	f7ff fa53 	bl	800083c <HAL_GetTick>
 8001396:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139a:	e00a      	b.n	80013b2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800139c:	f7ff fa4e 	bl	800083c <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d902      	bls.n	80013b2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	f000 be06 	b.w	8001fbe <HAL_RCC_OscConfig+0x109a>
 80013b2:	2302      	movs	r3, #2
 80013b4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80013bc:	fa93 f3a3 	rbit	r3, r3
 80013c0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80013c4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c8:	fab3 f383 	clz	r3, r3
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	095b      	lsrs	r3, r3, #5
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d102      	bne.n	80013e2 <HAL_RCC_OscConfig+0x4be>
 80013dc:	4b45      	ldr	r3, [pc, #276]	; (80014f4 <HAL_RCC_OscConfig+0x5d0>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	e013      	b.n	800140a <HAL_RCC_OscConfig+0x4e6>
 80013e2:	2302      	movs	r3, #2
 80013e4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80013ec:	fa93 f3a3 	rbit	r3, r3
 80013f0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80013f4:	2302      	movs	r3, #2
 80013f6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80013fa:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80013fe:	fa93 f3a3 	rbit	r3, r3
 8001402:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001406:	4b3b      	ldr	r3, [pc, #236]	; (80014f4 <HAL_RCC_OscConfig+0x5d0>)
 8001408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140a:	2202      	movs	r2, #2
 800140c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001410:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001414:	fa92 f2a2 	rbit	r2, r2
 8001418:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800141c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001420:	fab2 f282 	clz	r2, r2
 8001424:	b2d2      	uxtb	r2, r2
 8001426:	f042 0220 	orr.w	r2, r2, #32
 800142a:	b2d2      	uxtb	r2, r2
 800142c:	f002 021f 	and.w	r2, r2, #31
 8001430:	2101      	movs	r1, #1
 8001432:	fa01 f202 	lsl.w	r2, r1, r2
 8001436:	4013      	ands	r3, r2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d0af      	beq.n	800139c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143c:	4b2d      	ldr	r3, [pc, #180]	; (80014f4 <HAL_RCC_OscConfig+0x5d0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001444:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001448:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	21f8      	movs	r1, #248	; 0xf8
 8001452:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001456:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800145a:	fa91 f1a1 	rbit	r1, r1
 800145e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001462:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001466:	fab1 f181 	clz	r1, r1
 800146a:	b2c9      	uxtb	r1, r1
 800146c:	408b      	lsls	r3, r1
 800146e:	4921      	ldr	r1, [pc, #132]	; (80014f4 <HAL_RCC_OscConfig+0x5d0>)
 8001470:	4313      	orrs	r3, r2
 8001472:	600b      	str	r3, [r1, #0]
 8001474:	e06d      	b.n	8001552 <HAL_RCC_OscConfig+0x62e>
 8001476:	2301      	movs	r3, #1
 8001478:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001480:	fa93 f3a3 	rbit	r3, r3
 8001484:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001488:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800148c:	fab3 f383 	clz	r3, r3
 8001490:	b2db      	uxtb	r3, r3
 8001492:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001496:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	461a      	mov	r2, r3
 800149e:	2300      	movs	r3, #0
 80014a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a2:	f7ff f9cb 	bl	800083c <HAL_GetTick>
 80014a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014aa:	e00a      	b.n	80014c2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ac:	f7ff f9c6 	bl	800083c <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d902      	bls.n	80014c2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	f000 bd7e 	b.w	8001fbe <HAL_RCC_OscConfig+0x109a>
 80014c2:	2302      	movs	r3, #2
 80014c4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80014cc:	fa93 f3a3 	rbit	r3, r3
 80014d0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80014d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d8:	fab3 f383 	clz	r3, r3
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	095b      	lsrs	r3, r3, #5
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d105      	bne.n	80014f8 <HAL_RCC_OscConfig+0x5d4>
 80014ec:	4b01      	ldr	r3, [pc, #4]	; (80014f4 <HAL_RCC_OscConfig+0x5d0>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	e016      	b.n	8001520 <HAL_RCC_OscConfig+0x5fc>
 80014f2:	bf00      	nop
 80014f4:	40021000 	.word	0x40021000
 80014f8:	2302      	movs	r3, #2
 80014fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001502:	fa93 f3a3 	rbit	r3, r3
 8001506:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800150a:	2302      	movs	r3, #2
 800150c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001510:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001514:	fa93 f3a3 	rbit	r3, r3
 8001518:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800151c:	4bbf      	ldr	r3, [pc, #764]	; (800181c <HAL_RCC_OscConfig+0x8f8>)
 800151e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001520:	2202      	movs	r2, #2
 8001522:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001526:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800152a:	fa92 f2a2 	rbit	r2, r2
 800152e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001532:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001536:	fab2 f282 	clz	r2, r2
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	f042 0220 	orr.w	r2, r2, #32
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	f002 021f 	and.w	r2, r2, #31
 8001546:	2101      	movs	r1, #1
 8001548:	fa01 f202 	lsl.w	r2, r1, r2
 800154c:	4013      	ands	r3, r2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1ac      	bne.n	80014ac <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001552:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001556:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	2b00      	cmp	r3, #0
 8001564:	f000 8113 	beq.w	800178e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001568:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800156c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	695b      	ldr	r3, [r3, #20]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d07c      	beq.n	8001672 <HAL_RCC_OscConfig+0x74e>
 8001578:	2301      	movs	r3, #1
 800157a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001582:	fa93 f3a3 	rbit	r3, r3
 8001586:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800158a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800158e:	fab3 f383 	clz	r3, r3
 8001592:	b2db      	uxtb	r3, r3
 8001594:	461a      	mov	r2, r3
 8001596:	4ba2      	ldr	r3, [pc, #648]	; (8001820 <HAL_RCC_OscConfig+0x8fc>)
 8001598:	4413      	add	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	461a      	mov	r2, r3
 800159e:	2301      	movs	r3, #1
 80015a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a2:	f7ff f94b 	bl	800083c <HAL_GetTick>
 80015a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015aa:	e00a      	b.n	80015c2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ac:	f7ff f946 	bl	800083c <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d902      	bls.n	80015c2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	f000 bcfe 	b.w	8001fbe <HAL_RCC_OscConfig+0x109a>
 80015c2:	2302      	movs	r3, #2
 80015c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80015cc:	fa93 f2a3 	rbit	r2, r3
 80015d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015d4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80015e2:	2202      	movs	r2, #2
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	fa93 f2a3 	rbit	r2, r3
 80015f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001602:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001606:	2202      	movs	r2, #2
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800160e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	fa93 f2a3 	rbit	r2, r3
 8001618:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800161c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001620:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001622:	4b7e      	ldr	r3, [pc, #504]	; (800181c <HAL_RCC_OscConfig+0x8f8>)
 8001624:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001626:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800162a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800162e:	2102      	movs	r1, #2
 8001630:	6019      	str	r1, [r3, #0]
 8001632:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001636:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	fa93 f1a3 	rbit	r1, r3
 8001640:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001644:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001648:	6019      	str	r1, [r3, #0]
  return result;
 800164a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800164e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	fab3 f383 	clz	r3, r3
 8001658:	b2db      	uxtb	r3, r3
 800165a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800165e:	b2db      	uxtb	r3, r3
 8001660:	f003 031f 	and.w	r3, r3, #31
 8001664:	2101      	movs	r1, #1
 8001666:	fa01 f303 	lsl.w	r3, r1, r3
 800166a:	4013      	ands	r3, r2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d09d      	beq.n	80015ac <HAL_RCC_OscConfig+0x688>
 8001670:	e08d      	b.n	800178e <HAL_RCC_OscConfig+0x86a>
 8001672:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001676:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800167a:	2201      	movs	r2, #1
 800167c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001682:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	fa93 f2a3 	rbit	r2, r3
 800168c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001690:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001694:	601a      	str	r2, [r3, #0]
  return result;
 8001696:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800169a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800169e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016a0:	fab3 f383 	clz	r3, r3
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	461a      	mov	r2, r3
 80016a8:	4b5d      	ldr	r3, [pc, #372]	; (8001820 <HAL_RCC_OscConfig+0x8fc>)
 80016aa:	4413      	add	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	461a      	mov	r2, r3
 80016b0:	2300      	movs	r3, #0
 80016b2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b4:	f7ff f8c2 	bl	800083c <HAL_GetTick>
 80016b8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016bc:	e00a      	b.n	80016d4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016be:	f7ff f8bd 	bl	800083c <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d902      	bls.n	80016d4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	f000 bc75 	b.w	8001fbe <HAL_RCC_OscConfig+0x109a>
 80016d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016d8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80016dc:	2202      	movs	r2, #2
 80016de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016e4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	fa93 f2a3 	rbit	r2, r3
 80016ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016f2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001700:	2202      	movs	r2, #2
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001708:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	fa93 f2a3 	rbit	r2, r3
 8001712:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001716:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001720:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001724:	2202      	movs	r2, #2
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800172c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	fa93 f2a3 	rbit	r2, r3
 8001736:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800173a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800173e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001740:	4b36      	ldr	r3, [pc, #216]	; (800181c <HAL_RCC_OscConfig+0x8f8>)
 8001742:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001744:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001748:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800174c:	2102      	movs	r1, #2
 800174e:	6019      	str	r1, [r3, #0]
 8001750:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001754:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	fa93 f1a3 	rbit	r1, r3
 800175e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001762:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001766:	6019      	str	r1, [r3, #0]
  return result;
 8001768:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800176c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	fab3 f383 	clz	r3, r3
 8001776:	b2db      	uxtb	r3, r3
 8001778:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800177c:	b2db      	uxtb	r3, r3
 800177e:	f003 031f 	and.w	r3, r3, #31
 8001782:	2101      	movs	r1, #1
 8001784:	fa01 f303 	lsl.w	r3, r1, r3
 8001788:	4013      	ands	r3, r2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d197      	bne.n	80016be <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800178e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001792:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f000 81a5 	beq.w	8001aee <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017a4:	2300      	movs	r3, #0
 80017a6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017aa:	4b1c      	ldr	r3, [pc, #112]	; (800181c <HAL_RCC_OscConfig+0x8f8>)
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d116      	bne.n	80017e4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017b6:	4b19      	ldr	r3, [pc, #100]	; (800181c <HAL_RCC_OscConfig+0x8f8>)
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	4a18      	ldr	r2, [pc, #96]	; (800181c <HAL_RCC_OscConfig+0x8f8>)
 80017bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c0:	61d3      	str	r3, [r2, #28]
 80017c2:	4b16      	ldr	r3, [pc, #88]	; (800181c <HAL_RCC_OscConfig+0x8f8>)
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80017ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017dc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80017de:	2301      	movs	r3, #1
 80017e0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e4:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <HAL_RCC_OscConfig+0x900>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d121      	bne.n	8001834 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <HAL_RCC_OscConfig+0x900>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a0b      	ldr	r2, [pc, #44]	; (8001824 <HAL_RCC_OscConfig+0x900>)
 80017f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017fc:	f7ff f81e 	bl	800083c <HAL_GetTick>
 8001800:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001804:	e010      	b.n	8001828 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001806:	f7ff f819 	bl	800083c <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b64      	cmp	r3, #100	; 0x64
 8001814:	d908      	bls.n	8001828 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e3d1      	b.n	8001fbe <HAL_RCC_OscConfig+0x109a>
 800181a:	bf00      	nop
 800181c:	40021000 	.word	0x40021000
 8001820:	10908120 	.word	0x10908120
 8001824:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001828:	4b8d      	ldr	r3, [pc, #564]	; (8001a60 <HAL_RCC_OscConfig+0xb3c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0e8      	beq.n	8001806 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001834:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001838:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d106      	bne.n	8001852 <HAL_RCC_OscConfig+0x92e>
 8001844:	4b87      	ldr	r3, [pc, #540]	; (8001a64 <HAL_RCC_OscConfig+0xb40>)
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	4a86      	ldr	r2, [pc, #536]	; (8001a64 <HAL_RCC_OscConfig+0xb40>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	6213      	str	r3, [r2, #32]
 8001850:	e035      	b.n	80018be <HAL_RCC_OscConfig+0x99a>
 8001852:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001856:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10c      	bne.n	800187c <HAL_RCC_OscConfig+0x958>
 8001862:	4b80      	ldr	r3, [pc, #512]	; (8001a64 <HAL_RCC_OscConfig+0xb40>)
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	4a7f      	ldr	r2, [pc, #508]	; (8001a64 <HAL_RCC_OscConfig+0xb40>)
 8001868:	f023 0301 	bic.w	r3, r3, #1
 800186c:	6213      	str	r3, [r2, #32]
 800186e:	4b7d      	ldr	r3, [pc, #500]	; (8001a64 <HAL_RCC_OscConfig+0xb40>)
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	4a7c      	ldr	r2, [pc, #496]	; (8001a64 <HAL_RCC_OscConfig+0xb40>)
 8001874:	f023 0304 	bic.w	r3, r3, #4
 8001878:	6213      	str	r3, [r2, #32]
 800187a:	e020      	b.n	80018be <HAL_RCC_OscConfig+0x99a>
 800187c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001880:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b05      	cmp	r3, #5
 800188a:	d10c      	bne.n	80018a6 <HAL_RCC_OscConfig+0x982>
 800188c:	4b75      	ldr	r3, [pc, #468]	; (8001a64 <HAL_RCC_OscConfig+0xb40>)
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	4a74      	ldr	r2, [pc, #464]	; (8001a64 <HAL_RCC_OscConfig+0xb40>)
 8001892:	f043 0304 	orr.w	r3, r3, #4
 8001896:	6213      	str	r3, [r2, #32]
 8001898:	4b72      	ldr	r3, [pc, #456]	; (8001a64 <HAL_RCC_OscConfig+0xb40>)
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	4a71      	ldr	r2, [pc, #452]	; (8001a64 <HAL_RCC_OscConfig+0xb40>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	6213      	str	r3, [r2, #32]
 80018a4:	e00b      	b.n	80018be <HAL_RCC_OscConfig+0x99a>
 80018a6:	4b6f      	ldr	r3, [pc, #444]	; (8001a64 <HAL_RCC_OscConfig+0xb40>)
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	4a6e      	ldr	r2, [pc, #440]	; (8001a64 <HAL_RCC_OscConfig+0xb40>)
 80018ac:	f023 0301 	bic.w	r3, r3, #1
 80018b0:	6213      	str	r3, [r2, #32]
 80018b2:	4b6c      	ldr	r3, [pc, #432]	; (8001a64 <HAL_RCC_OscConfig+0xb40>)
 80018b4:	6a1b      	ldr	r3, [r3, #32]
 80018b6:	4a6b      	ldr	r2, [pc, #428]	; (8001a64 <HAL_RCC_OscConfig+0xb40>)
 80018b8:	f023 0304 	bic.w	r3, r3, #4
 80018bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 8081 	beq.w	80019d2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d0:	f7fe ffb4 	bl	800083c <HAL_GetTick>
 80018d4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d8:	e00b      	b.n	80018f2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018da:	f7fe ffaf 	bl	800083c <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e365      	b.n	8001fbe <HAL_RCC_OscConfig+0x109a>
 80018f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018f6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80018fa:	2202      	movs	r2, #2
 80018fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001902:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	fa93 f2a3 	rbit	r2, r3
 800190c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001910:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800191a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800191e:	2202      	movs	r2, #2
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001926:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	fa93 f2a3 	rbit	r2, r3
 8001930:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001934:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001938:	601a      	str	r2, [r3, #0]
  return result;
 800193a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800193e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001942:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001944:	fab3 f383 	clz	r3, r3
 8001948:	b2db      	uxtb	r3, r3
 800194a:	095b      	lsrs	r3, r3, #5
 800194c:	b2db      	uxtb	r3, r3
 800194e:	f043 0302 	orr.w	r3, r3, #2
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d102      	bne.n	800195e <HAL_RCC_OscConfig+0xa3a>
 8001958:	4b42      	ldr	r3, [pc, #264]	; (8001a64 <HAL_RCC_OscConfig+0xb40>)
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	e013      	b.n	8001986 <HAL_RCC_OscConfig+0xa62>
 800195e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001962:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001966:	2202      	movs	r2, #2
 8001968:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800196e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	fa93 f2a3 	rbit	r2, r3
 8001978:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800197c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	4b38      	ldr	r3, [pc, #224]	; (8001a64 <HAL_RCC_OscConfig+0xb40>)
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800198a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800198e:	2102      	movs	r1, #2
 8001990:	6011      	str	r1, [r2, #0]
 8001992:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001996:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800199a:	6812      	ldr	r2, [r2, #0]
 800199c:	fa92 f1a2 	rbit	r1, r2
 80019a0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019a4:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80019a8:	6011      	str	r1, [r2, #0]
  return result;
 80019aa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019ae:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80019b2:	6812      	ldr	r2, [r2, #0]
 80019b4:	fab2 f282 	clz	r2, r2
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	f002 021f 	and.w	r2, r2, #31
 80019c4:	2101      	movs	r1, #1
 80019c6:	fa01 f202 	lsl.w	r2, r1, r2
 80019ca:	4013      	ands	r3, r2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d084      	beq.n	80018da <HAL_RCC_OscConfig+0x9b6>
 80019d0:	e083      	b.n	8001ada <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d2:	f7fe ff33 	bl	800083c <HAL_GetTick>
 80019d6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019da:	e00b      	b.n	80019f4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019dc:	f7fe ff2e 	bl	800083c <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e2e4      	b.n	8001fbe <HAL_RCC_OscConfig+0x109a>
 80019f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019f8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80019fc:	2202      	movs	r2, #2
 80019fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a04:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	fa93 f2a3 	rbit	r2, r3
 8001a0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a12:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a1c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001a20:	2202      	movs	r2, #2
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a28:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	fa93 f2a3 	rbit	r2, r3
 8001a32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a36:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a3a:	601a      	str	r2, [r3, #0]
  return result;
 8001a3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a40:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a44:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a46:	fab3 f383 	clz	r3, r3
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	095b      	lsrs	r3, r3, #5
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	f043 0302 	orr.w	r3, r3, #2
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d106      	bne.n	8001a68 <HAL_RCC_OscConfig+0xb44>
 8001a5a:	4b02      	ldr	r3, [pc, #8]	; (8001a64 <HAL_RCC_OscConfig+0xb40>)
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	e017      	b.n	8001a90 <HAL_RCC_OscConfig+0xb6c>
 8001a60:	40007000 	.word	0x40007000
 8001a64:	40021000 	.word	0x40021000
 8001a68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a6c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001a70:	2202      	movs	r2, #2
 8001a72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a78:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	fa93 f2a3 	rbit	r2, r3
 8001a82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a86:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	4bb3      	ldr	r3, [pc, #716]	; (8001d5c <HAL_RCC_OscConfig+0xe38>)
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a94:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a98:	2102      	movs	r1, #2
 8001a9a:	6011      	str	r1, [r2, #0]
 8001a9c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001aa0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001aa4:	6812      	ldr	r2, [r2, #0]
 8001aa6:	fa92 f1a2 	rbit	r1, r2
 8001aaa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001aae:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001ab2:	6011      	str	r1, [r2, #0]
  return result;
 8001ab4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ab8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001abc:	6812      	ldr	r2, [r2, #0]
 8001abe:	fab2 f282 	clz	r2, r2
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	f002 021f 	and.w	r2, r2, #31
 8001ace:	2101      	movs	r1, #1
 8001ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d180      	bne.n	80019dc <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ada:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d105      	bne.n	8001aee <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae2:	4b9e      	ldr	r3, [pc, #632]	; (8001d5c <HAL_RCC_OscConfig+0xe38>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	4a9d      	ldr	r2, [pc, #628]	; (8001d5c <HAL_RCC_OscConfig+0xe38>)
 8001ae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aec:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 825e 	beq.w	8001fbc <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b00:	4b96      	ldr	r3, [pc, #600]	; (8001d5c <HAL_RCC_OscConfig+0xe38>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 030c 	and.w	r3, r3, #12
 8001b08:	2b08      	cmp	r3, #8
 8001b0a:	f000 821f 	beq.w	8001f4c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b12:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	f040 8170 	bne.w	8001e00 <HAL_RCC_OscConfig+0xedc>
 8001b20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b24:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001b28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b32:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	fa93 f2a3 	rbit	r2, r3
 8001b3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b40:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b44:	601a      	str	r2, [r3, #0]
  return result;
 8001b46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b4a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b4e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b50:	fab3 f383 	clz	r3, r3
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b5a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	461a      	mov	r2, r3
 8001b62:	2300      	movs	r3, #0
 8001b64:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b66:	f7fe fe69 	bl	800083c <HAL_GetTick>
 8001b6a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b6e:	e009      	b.n	8001b84 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b70:	f7fe fe64 	bl	800083c <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e21c      	b.n	8001fbe <HAL_RCC_OscConfig+0x109a>
 8001b84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b88:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b96:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	fa93 f2a3 	rbit	r2, r3
 8001ba0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ba4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001ba8:	601a      	str	r2, [r3, #0]
  return result;
 8001baa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bae:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001bb2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb4:	fab3 f383 	clz	r3, r3
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	095b      	lsrs	r3, r3, #5
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d102      	bne.n	8001bce <HAL_RCC_OscConfig+0xcaa>
 8001bc8:	4b64      	ldr	r3, [pc, #400]	; (8001d5c <HAL_RCC_OscConfig+0xe38>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	e027      	b.n	8001c1e <HAL_RCC_OscConfig+0xcfa>
 8001bce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bd2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001bd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001be0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	fa93 f2a3 	rbit	r2, r3
 8001bea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bee:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bf8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001bfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c06:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	fa93 f2a3 	rbit	r2, r3
 8001c10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c14:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	4b50      	ldr	r3, [pc, #320]	; (8001d5c <HAL_RCC_OscConfig+0xe38>)
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c22:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001c26:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c2a:	6011      	str	r1, [r2, #0]
 8001c2c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c30:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001c34:	6812      	ldr	r2, [r2, #0]
 8001c36:	fa92 f1a2 	rbit	r1, r2
 8001c3a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c3e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001c42:	6011      	str	r1, [r2, #0]
  return result;
 8001c44:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c48:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001c4c:	6812      	ldr	r2, [r2, #0]
 8001c4e:	fab2 f282 	clz	r2, r2
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	f042 0220 	orr.w	r2, r2, #32
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	f002 021f 	and.w	r2, r2, #31
 8001c5e:	2101      	movs	r1, #1
 8001c60:	fa01 f202 	lsl.w	r2, r1, r2
 8001c64:	4013      	ands	r3, r2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d182      	bne.n	8001b70 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c6a:	4b3c      	ldr	r3, [pc, #240]	; (8001d5c <HAL_RCC_OscConfig+0xe38>)
 8001c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6e:	f023 020f 	bic.w	r2, r3, #15
 8001c72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c76:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	4937      	ldr	r1, [pc, #220]	; (8001d5c <HAL_RCC_OscConfig+0xe38>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001c84:	4b35      	ldr	r3, [pc, #212]	; (8001d5c <HAL_RCC_OscConfig+0xe38>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001c8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c90:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6a19      	ldr	r1, [r3, #32]
 8001c98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c9c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	69db      	ldr	r3, [r3, #28]
 8001ca4:	430b      	orrs	r3, r1
 8001ca6:	492d      	ldr	r1, [pc, #180]	; (8001d5c <HAL_RCC_OscConfig+0xe38>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	604b      	str	r3, [r1, #4]
 8001cac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001cb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cbe:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	fa93 f2a3 	rbit	r2, r3
 8001cc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ccc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001cd0:	601a      	str	r2, [r3, #0]
  return result;
 8001cd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001cda:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cdc:	fab3 f383 	clz	r3, r3
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ce6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	461a      	mov	r2, r3
 8001cee:	2301      	movs	r3, #1
 8001cf0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf2:	f7fe fda3 	bl	800083c <HAL_GetTick>
 8001cf6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cfa:	e009      	b.n	8001d10 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cfc:	f7fe fd9e 	bl	800083c <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e156      	b.n	8001fbe <HAL_RCC_OscConfig+0x109a>
 8001d10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d14:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001d18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d22:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	fa93 f2a3 	rbit	r2, r3
 8001d2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d30:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001d34:	601a      	str	r2, [r3, #0]
  return result;
 8001d36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d3a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001d3e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d40:	fab3 f383 	clz	r3, r3
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	095b      	lsrs	r3, r3, #5
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d105      	bne.n	8001d60 <HAL_RCC_OscConfig+0xe3c>
 8001d54:	4b01      	ldr	r3, [pc, #4]	; (8001d5c <HAL_RCC_OscConfig+0xe38>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	e02a      	b.n	8001db0 <HAL_RCC_OscConfig+0xe8c>
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d64:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001d68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d72:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	fa93 f2a3 	rbit	r2, r3
 8001d7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d80:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d8a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001d8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d98:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	fa93 f2a3 	rbit	r2, r3
 8001da2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	4b86      	ldr	r3, [pc, #536]	; (8001fc8 <HAL_RCC_OscConfig+0x10a4>)
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001db4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001db8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001dbc:	6011      	str	r1, [r2, #0]
 8001dbe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001dc2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001dc6:	6812      	ldr	r2, [r2, #0]
 8001dc8:	fa92 f1a2 	rbit	r1, r2
 8001dcc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001dd0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001dd4:	6011      	str	r1, [r2, #0]
  return result;
 8001dd6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001dda:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	fab2 f282 	clz	r2, r2
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	f042 0220 	orr.w	r2, r2, #32
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	f002 021f 	and.w	r2, r2, #31
 8001df0:	2101      	movs	r1, #1
 8001df2:	fa01 f202 	lsl.w	r2, r1, r2
 8001df6:	4013      	ands	r3, r2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f43f af7f 	beq.w	8001cfc <HAL_RCC_OscConfig+0xdd8>
 8001dfe:	e0dd      	b.n	8001fbc <HAL_RCC_OscConfig+0x1098>
 8001e00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e04:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001e08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e12:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	fa93 f2a3 	rbit	r2, r3
 8001e1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e20:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001e24:	601a      	str	r2, [r3, #0]
  return result;
 8001e26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e2a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001e2e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e30:	fab3 f383 	clz	r3, r3
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e3a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	461a      	mov	r2, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e46:	f7fe fcf9 	bl	800083c <HAL_GetTick>
 8001e4a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e4e:	e009      	b.n	8001e64 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e50:	f7fe fcf4 	bl	800083c <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e0ac      	b.n	8001fbe <HAL_RCC_OscConfig+0x109a>
 8001e64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e68:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e76:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	fa93 f2a3 	rbit	r2, r3
 8001e80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e84:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e88:	601a      	str	r2, [r3, #0]
  return result;
 8001e8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e8e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e92:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e94:	fab3 f383 	clz	r3, r3
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	095b      	lsrs	r3, r3, #5
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d102      	bne.n	8001eae <HAL_RCC_OscConfig+0xf8a>
 8001ea8:	4b47      	ldr	r3, [pc, #284]	; (8001fc8 <HAL_RCC_OscConfig+0x10a4>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	e027      	b.n	8001efe <HAL_RCC_OscConfig+0xfda>
 8001eae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001eb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ec0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	fa93 f2a3 	rbit	r2, r3
 8001eca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ece:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ed8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001edc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	fa93 f2a3 	rbit	r2, r3
 8001ef0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ef4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	4b33      	ldr	r3, [pc, #204]	; (8001fc8 <HAL_RCC_OscConfig+0x10a4>)
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f02:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001f06:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f0a:	6011      	str	r1, [r2, #0]
 8001f0c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f10:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001f14:	6812      	ldr	r2, [r2, #0]
 8001f16:	fa92 f1a2 	rbit	r1, r2
 8001f1a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f1e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001f22:	6011      	str	r1, [r2, #0]
  return result;
 8001f24:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f28:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	fab2 f282 	clz	r2, r2
 8001f32:	b2d2      	uxtb	r2, r2
 8001f34:	f042 0220 	orr.w	r2, r2, #32
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	f002 021f 	and.w	r2, r2, #31
 8001f3e:	2101      	movs	r1, #1
 8001f40:	fa01 f202 	lsl.w	r2, r1, r2
 8001f44:	4013      	ands	r3, r2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d182      	bne.n	8001e50 <HAL_RCC_OscConfig+0xf2c>
 8001f4a:	e037      	b.n	8001fbc <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f50:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d101      	bne.n	8001f60 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e02e      	b.n	8001fbe <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f60:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <HAL_RCC_OscConfig+0x10a4>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001f68:	4b17      	ldr	r3, [pc, #92]	; (8001fc8 <HAL_RCC_OscConfig+0x10a4>)
 8001f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f70:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001f74:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001f78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f7c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d117      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001f88:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001f8c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f94:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d10b      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001fa0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fa4:	f003 020f 	and.w	r2, r3, #15
 8001fa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d001      	beq.n	8001fbc <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e000      	b.n	8001fbe <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40021000 	.word	0x40021000

08001fcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b09e      	sub	sp, #120	; 0x78
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e162      	b.n	80022aa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe4:	4b90      	ldr	r3, [pc, #576]	; (8002228 <HAL_RCC_ClockConfig+0x25c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d910      	bls.n	8002014 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff2:	4b8d      	ldr	r3, [pc, #564]	; (8002228 <HAL_RCC_ClockConfig+0x25c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f023 0207 	bic.w	r2, r3, #7
 8001ffa:	498b      	ldr	r1, [pc, #556]	; (8002228 <HAL_RCC_ClockConfig+0x25c>)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002002:	4b89      	ldr	r3, [pc, #548]	; (8002228 <HAL_RCC_ClockConfig+0x25c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	429a      	cmp	r2, r3
 800200e:	d001      	beq.n	8002014 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e14a      	b.n	80022aa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d008      	beq.n	8002032 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002020:	4b82      	ldr	r3, [pc, #520]	; (800222c <HAL_RCC_ClockConfig+0x260>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	497f      	ldr	r1, [pc, #508]	; (800222c <HAL_RCC_ClockConfig+0x260>)
 800202e:	4313      	orrs	r3, r2
 8002030:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 80dc 	beq.w	80021f8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d13c      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xf6>
 8002048:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800204c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002050:	fa93 f3a3 	rbit	r3, r3
 8002054:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002058:	fab3 f383 	clz	r3, r3
 800205c:	b2db      	uxtb	r3, r3
 800205e:	095b      	lsrs	r3, r3, #5
 8002060:	b2db      	uxtb	r3, r3
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b01      	cmp	r3, #1
 800206a:	d102      	bne.n	8002072 <HAL_RCC_ClockConfig+0xa6>
 800206c:	4b6f      	ldr	r3, [pc, #444]	; (800222c <HAL_RCC_ClockConfig+0x260>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	e00f      	b.n	8002092 <HAL_RCC_ClockConfig+0xc6>
 8002072:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002076:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002078:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800207a:	fa93 f3a3 	rbit	r3, r3
 800207e:	667b      	str	r3, [r7, #100]	; 0x64
 8002080:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002084:	663b      	str	r3, [r7, #96]	; 0x60
 8002086:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002088:	fa93 f3a3 	rbit	r3, r3
 800208c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800208e:	4b67      	ldr	r3, [pc, #412]	; (800222c <HAL_RCC_ClockConfig+0x260>)
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002096:	65ba      	str	r2, [r7, #88]	; 0x58
 8002098:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800209a:	fa92 f2a2 	rbit	r2, r2
 800209e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80020a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80020a2:	fab2 f282 	clz	r2, r2
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	f042 0220 	orr.w	r2, r2, #32
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	f002 021f 	and.w	r2, r2, #31
 80020b2:	2101      	movs	r1, #1
 80020b4:	fa01 f202 	lsl.w	r2, r1, r2
 80020b8:	4013      	ands	r3, r2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d17b      	bne.n	80021b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e0f3      	b.n	80022aa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d13c      	bne.n	8002144 <HAL_RCC_ClockConfig+0x178>
 80020ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020d2:	fa93 f3a3 	rbit	r3, r3
 80020d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80020d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020da:	fab3 f383 	clz	r3, r3
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	095b      	lsrs	r3, r3, #5
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d102      	bne.n	80020f4 <HAL_RCC_ClockConfig+0x128>
 80020ee:	4b4f      	ldr	r3, [pc, #316]	; (800222c <HAL_RCC_ClockConfig+0x260>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	e00f      	b.n	8002114 <HAL_RCC_ClockConfig+0x148>
 80020f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020fc:	fa93 f3a3 	rbit	r3, r3
 8002100:	647b      	str	r3, [r7, #68]	; 0x44
 8002102:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002106:	643b      	str	r3, [r7, #64]	; 0x40
 8002108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800210a:	fa93 f3a3 	rbit	r3, r3
 800210e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002110:	4b46      	ldr	r3, [pc, #280]	; (800222c <HAL_RCC_ClockConfig+0x260>)
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002118:	63ba      	str	r2, [r7, #56]	; 0x38
 800211a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800211c:	fa92 f2a2 	rbit	r2, r2
 8002120:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002122:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002124:	fab2 f282 	clz	r2, r2
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	f042 0220 	orr.w	r2, r2, #32
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	f002 021f 	and.w	r2, r2, #31
 8002134:	2101      	movs	r1, #1
 8002136:	fa01 f202 	lsl.w	r2, r1, r2
 800213a:	4013      	ands	r3, r2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d13a      	bne.n	80021b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e0b2      	b.n	80022aa <HAL_RCC_ClockConfig+0x2de>
 8002144:	2302      	movs	r3, #2
 8002146:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214a:	fa93 f3a3 	rbit	r3, r3
 800214e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002152:	fab3 f383 	clz	r3, r3
 8002156:	b2db      	uxtb	r3, r3
 8002158:	095b      	lsrs	r3, r3, #5
 800215a:	b2db      	uxtb	r3, r3
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b01      	cmp	r3, #1
 8002164:	d102      	bne.n	800216c <HAL_RCC_ClockConfig+0x1a0>
 8002166:	4b31      	ldr	r3, [pc, #196]	; (800222c <HAL_RCC_ClockConfig+0x260>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	e00d      	b.n	8002188 <HAL_RCC_ClockConfig+0x1bc>
 800216c:	2302      	movs	r3, #2
 800216e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002172:	fa93 f3a3 	rbit	r3, r3
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
 8002178:	2302      	movs	r3, #2
 800217a:	623b      	str	r3, [r7, #32]
 800217c:	6a3b      	ldr	r3, [r7, #32]
 800217e:	fa93 f3a3 	rbit	r3, r3
 8002182:	61fb      	str	r3, [r7, #28]
 8002184:	4b29      	ldr	r3, [pc, #164]	; (800222c <HAL_RCC_ClockConfig+0x260>)
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	2202      	movs	r2, #2
 800218a:	61ba      	str	r2, [r7, #24]
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	fa92 f2a2 	rbit	r2, r2
 8002192:	617a      	str	r2, [r7, #20]
  return result;
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	fab2 f282 	clz	r2, r2
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	f042 0220 	orr.w	r2, r2, #32
 80021a0:	b2d2      	uxtb	r2, r2
 80021a2:	f002 021f 	and.w	r2, r2, #31
 80021a6:	2101      	movs	r1, #1
 80021a8:	fa01 f202 	lsl.w	r2, r1, r2
 80021ac:	4013      	ands	r3, r2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e079      	b.n	80022aa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021b6:	4b1d      	ldr	r3, [pc, #116]	; (800222c <HAL_RCC_ClockConfig+0x260>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f023 0203 	bic.w	r2, r3, #3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	491a      	ldr	r1, [pc, #104]	; (800222c <HAL_RCC_ClockConfig+0x260>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021c8:	f7fe fb38 	bl	800083c <HAL_GetTick>
 80021cc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ce:	e00a      	b.n	80021e6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d0:	f7fe fb34 	bl	800083c <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	f241 3288 	movw	r2, #5000	; 0x1388
 80021de:	4293      	cmp	r3, r2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e061      	b.n	80022aa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <HAL_RCC_ClockConfig+0x260>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 020c 	and.w	r2, r3, #12
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d1eb      	bne.n	80021d0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <HAL_RCC_ClockConfig+0x25c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d214      	bcs.n	8002230 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002206:	4b08      	ldr	r3, [pc, #32]	; (8002228 <HAL_RCC_ClockConfig+0x25c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 0207 	bic.w	r2, r3, #7
 800220e:	4906      	ldr	r1, [pc, #24]	; (8002228 <HAL_RCC_ClockConfig+0x25c>)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	4313      	orrs	r3, r2
 8002214:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002216:	4b04      	ldr	r3, [pc, #16]	; (8002228 <HAL_RCC_ClockConfig+0x25c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d005      	beq.n	8002230 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e040      	b.n	80022aa <HAL_RCC_ClockConfig+0x2de>
 8002228:	40022000 	.word	0x40022000
 800222c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d008      	beq.n	800224e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800223c:	4b1d      	ldr	r3, [pc, #116]	; (80022b4 <HAL_RCC_ClockConfig+0x2e8>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	491a      	ldr	r1, [pc, #104]	; (80022b4 <HAL_RCC_ClockConfig+0x2e8>)
 800224a:	4313      	orrs	r3, r2
 800224c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	2b00      	cmp	r3, #0
 8002258:	d009      	beq.n	800226e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800225a:	4b16      	ldr	r3, [pc, #88]	; (80022b4 <HAL_RCC_ClockConfig+0x2e8>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4912      	ldr	r1, [pc, #72]	; (80022b4 <HAL_RCC_ClockConfig+0x2e8>)
 800226a:	4313      	orrs	r3, r2
 800226c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800226e:	f000 f829 	bl	80022c4 <HAL_RCC_GetSysClockFreq>
 8002272:	4601      	mov	r1, r0
 8002274:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <HAL_RCC_ClockConfig+0x2e8>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800227c:	22f0      	movs	r2, #240	; 0xf0
 800227e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	fa92 f2a2 	rbit	r2, r2
 8002286:	60fa      	str	r2, [r7, #12]
  return result;
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	fab2 f282 	clz	r2, r2
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	40d3      	lsrs	r3, r2
 8002292:	4a09      	ldr	r2, [pc, #36]	; (80022b8 <HAL_RCC_ClockConfig+0x2ec>)
 8002294:	5cd3      	ldrb	r3, [r2, r3]
 8002296:	fa21 f303 	lsr.w	r3, r1, r3
 800229a:	4a08      	ldr	r2, [pc, #32]	; (80022bc <HAL_RCC_ClockConfig+0x2f0>)
 800229c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800229e:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <HAL_RCC_ClockConfig+0x2f4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe fa86 	bl	80007b4 <HAL_InitTick>
  
  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3778      	adds	r7, #120	; 0x78
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40021000 	.word	0x40021000
 80022b8:	08003e88 	.word	0x08003e88
 80022bc:	20000000 	.word	0x20000000
 80022c0:	20000004 	.word	0x20000004

080022c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b08b      	sub	sp, #44	; 0x2c
 80022c8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
 80022ce:	2300      	movs	r3, #0
 80022d0:	61bb      	str	r3, [r7, #24]
 80022d2:	2300      	movs	r3, #0
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022da:	2300      	movs	r3, #0
 80022dc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80022de:	4b2a      	ldr	r3, [pc, #168]	; (8002388 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f003 030c 	and.w	r3, r3, #12
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d002      	beq.n	80022f4 <HAL_RCC_GetSysClockFreq+0x30>
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	d003      	beq.n	80022fa <HAL_RCC_GetSysClockFreq+0x36>
 80022f2:	e03f      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022f4:	4b25      	ldr	r3, [pc, #148]	; (800238c <HAL_RCC_GetSysClockFreq+0xc8>)
 80022f6:	623b      	str	r3, [r7, #32]
      break;
 80022f8:	e03f      	b.n	800237a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002300:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002304:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	fa92 f2a2 	rbit	r2, r2
 800230c:	607a      	str	r2, [r7, #4]
  return result;
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	fab2 f282 	clz	r2, r2
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	40d3      	lsrs	r3, r2
 8002318:	4a1d      	ldr	r2, [pc, #116]	; (8002390 <HAL_RCC_GetSysClockFreq+0xcc>)
 800231a:	5cd3      	ldrb	r3, [r2, r3]
 800231c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800231e:	4b1a      	ldr	r3, [pc, #104]	; (8002388 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	220f      	movs	r2, #15
 8002328:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	fa92 f2a2 	rbit	r2, r2
 8002330:	60fa      	str	r2, [r7, #12]
  return result;
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	fab2 f282 	clz	r2, r2
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	40d3      	lsrs	r3, r2
 800233c:	4a15      	ldr	r2, [pc, #84]	; (8002394 <HAL_RCC_GetSysClockFreq+0xd0>)
 800233e:	5cd3      	ldrb	r3, [r2, r3]
 8002340:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d008      	beq.n	800235e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800234c:	4a0f      	ldr	r2, [pc, #60]	; (800238c <HAL_RCC_GetSysClockFreq+0xc8>)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	fbb2 f2f3 	udiv	r2, r2, r3
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	fb02 f303 	mul.w	r3, r2, r3
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
 800235c:	e007      	b.n	800236e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800235e:	4a0b      	ldr	r2, [pc, #44]	; (800238c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	fbb2 f2f3 	udiv	r2, r2, r3
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	fb02 f303 	mul.w	r3, r2, r3
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	623b      	str	r3, [r7, #32]
      break;
 8002372:	e002      	b.n	800237a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002376:	623b      	str	r3, [r7, #32]
      break;
 8002378:	bf00      	nop
    }
  }
  return sysclockfreq;
 800237a:	6a3b      	ldr	r3, [r7, #32]
}
 800237c:	4618      	mov	r0, r3
 800237e:	372c      	adds	r7, #44	; 0x2c
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	40021000 	.word	0x40021000
 800238c:	007a1200 	.word	0x007a1200
 8002390:	08003ea0 	.word	0x08003ea0
 8002394:	08003eb0 	.word	0x08003eb0

08002398 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800239c:	4b03      	ldr	r3, [pc, #12]	; (80023ac <HAL_RCC_GetHCLKFreq+0x14>)
 800239e:	681b      	ldr	r3, [r3, #0]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	20000000 	.word	0x20000000

080023b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80023b6:	f7ff ffef 	bl	8002398 <HAL_RCC_GetHCLKFreq>
 80023ba:	4601      	mov	r1, r0
 80023bc:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <HAL_RCC_GetPCLK1Freq+0x3c>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023c4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80023c8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	fa92 f2a2 	rbit	r2, r2
 80023d0:	603a      	str	r2, [r7, #0]
  return result;
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	fab2 f282 	clz	r2, r2
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	40d3      	lsrs	r3, r2
 80023dc:	4a04      	ldr	r2, [pc, #16]	; (80023f0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80023de:	5cd3      	ldrb	r3, [r2, r3]
 80023e0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80023e4:	4618      	mov	r0, r3
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40021000 	.word	0x40021000
 80023f0:	08003e98 	.word	0x08003e98

080023f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80023fa:	f7ff ffcd 	bl	8002398 <HAL_RCC_GetHCLKFreq>
 80023fe:	4601      	mov	r1, r0
 8002400:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002408:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800240c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	fa92 f2a2 	rbit	r2, r2
 8002414:	603a      	str	r2, [r7, #0]
  return result;
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	fab2 f282 	clz	r2, r2
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	40d3      	lsrs	r3, r2
 8002420:	4a04      	ldr	r2, [pc, #16]	; (8002434 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002422:	5cd3      	ldrb	r3, [r2, r3]
 8002424:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002428:	4618      	mov	r0, r3
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40021000 	.word	0x40021000
 8002434:	08003e98 	.word	0x08003e98

08002438 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b092      	sub	sp, #72	; 0x48
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002440:	2300      	movs	r3, #0
 8002442:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002448:	2300      	movs	r3, #0
 800244a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 80d4 	beq.w	8002604 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800245c:	4b4e      	ldr	r3, [pc, #312]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10e      	bne.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002468:	4b4b      	ldr	r3, [pc, #300]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	4a4a      	ldr	r2, [pc, #296]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800246e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002472:	61d3      	str	r3, [r2, #28]
 8002474:	4b48      	ldr	r3, [pc, #288]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002480:	2301      	movs	r3, #1
 8002482:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002486:	4b45      	ldr	r3, [pc, #276]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248e:	2b00      	cmp	r3, #0
 8002490:	d118      	bne.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002492:	4b42      	ldr	r3, [pc, #264]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a41      	ldr	r2, [pc, #260]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800249c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800249e:	f7fe f9cd 	bl	800083c <HAL_GetTick>
 80024a2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a4:	e008      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a6:	f7fe f9c9 	bl	800083c <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b64      	cmp	r3, #100	; 0x64
 80024b2:	d901      	bls.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e1d6      	b.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b8:	4b38      	ldr	r3, [pc, #224]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024c4:	4b34      	ldr	r3, [pc, #208]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 8084 	beq.w	80025de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d07c      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024e4:	4b2c      	ldr	r3, [pc, #176]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f6:	fa93 f3a3 	rbit	r3, r3
 80024fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80024fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024fe:	fab3 f383 	clz	r3, r3
 8002502:	b2db      	uxtb	r3, r3
 8002504:	461a      	mov	r2, r3
 8002506:	4b26      	ldr	r3, [pc, #152]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002508:	4413      	add	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	461a      	mov	r2, r3
 800250e:	2301      	movs	r3, #1
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002516:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800251a:	fa93 f3a3 	rbit	r3, r3
 800251e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002522:	fab3 f383 	clz	r3, r3
 8002526:	b2db      	uxtb	r3, r3
 8002528:	461a      	mov	r2, r3
 800252a:	4b1d      	ldr	r3, [pc, #116]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800252c:	4413      	add	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	461a      	mov	r2, r3
 8002532:	2300      	movs	r3, #0
 8002534:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002536:	4a18      	ldr	r2, [pc, #96]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800253a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800253c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d04b      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002546:	f7fe f979 	bl	800083c <HAL_GetTick>
 800254a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254c:	e00a      	b.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800254e:	f7fe f975 	bl	800083c <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	f241 3288 	movw	r2, #5000	; 0x1388
 800255c:	4293      	cmp	r3, r2
 800255e:	d901      	bls.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e180      	b.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002564:	2302      	movs	r3, #2
 8002566:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256a:	fa93 f3a3 	rbit	r3, r3
 800256e:	627b      	str	r3, [r7, #36]	; 0x24
 8002570:	2302      	movs	r3, #2
 8002572:	623b      	str	r3, [r7, #32]
 8002574:	6a3b      	ldr	r3, [r7, #32]
 8002576:	fa93 f3a3 	rbit	r3, r3
 800257a:	61fb      	str	r3, [r7, #28]
  return result;
 800257c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257e:	fab3 f383 	clz	r3, r3
 8002582:	b2db      	uxtb	r3, r3
 8002584:	095b      	lsrs	r3, r3, #5
 8002586:	b2db      	uxtb	r3, r3
 8002588:	f043 0302 	orr.w	r3, r3, #2
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d108      	bne.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002592:	4b01      	ldr	r3, [pc, #4]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	e00d      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002598:	40021000 	.word	0x40021000
 800259c:	40007000 	.word	0x40007000
 80025a0:	10908100 	.word	0x10908100
 80025a4:	2302      	movs	r3, #2
 80025a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	fa93 f3a3 	rbit	r3, r3
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	4b9a      	ldr	r3, [pc, #616]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	2202      	movs	r2, #2
 80025b6:	613a      	str	r2, [r7, #16]
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	fa92 f2a2 	rbit	r2, r2
 80025be:	60fa      	str	r2, [r7, #12]
  return result;
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	fab2 f282 	clz	r2, r2
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	f002 021f 	and.w	r2, r2, #31
 80025d2:	2101      	movs	r1, #1
 80025d4:	fa01 f202 	lsl.w	r2, r1, r2
 80025d8:	4013      	ands	r3, r2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0b7      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80025de:	4b8f      	ldr	r3, [pc, #572]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	498c      	ldr	r1, [pc, #560]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d105      	bne.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f8:	4b88      	ldr	r3, [pc, #544]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	4a87      	ldr	r2, [pc, #540]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002602:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b00      	cmp	r3, #0
 800260e:	d008      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002610:	4b82      	ldr	r3, [pc, #520]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002614:	f023 0203 	bic.w	r2, r3, #3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	497f      	ldr	r1, [pc, #508]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800261e:	4313      	orrs	r3, r2
 8002620:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d008      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800262e:	4b7b      	ldr	r3, [pc, #492]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	4978      	ldr	r1, [pc, #480]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800263c:	4313      	orrs	r3, r2
 800263e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d008      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800264c:	4b73      	ldr	r3, [pc, #460]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002650:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	4970      	ldr	r1, [pc, #448]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800265a:	4313      	orrs	r3, r2
 800265c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0320 	and.w	r3, r3, #32
 8002666:	2b00      	cmp	r3, #0
 8002668:	d008      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800266a:	4b6c      	ldr	r3, [pc, #432]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	f023 0210 	bic.w	r2, r3, #16
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	4969      	ldr	r1, [pc, #420]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002678:	4313      	orrs	r3, r2
 800267a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d008      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002688:	4b64      	ldr	r3, [pc, #400]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002694:	4961      	ldr	r1, [pc, #388]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002696:	4313      	orrs	r3, r2
 8002698:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d008      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026a6:	4b5d      	ldr	r3, [pc, #372]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	f023 0220 	bic.w	r2, r3, #32
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	495a      	ldr	r1, [pc, #360]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d008      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026c4:	4b55      	ldr	r3, [pc, #340]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	4952      	ldr	r1, [pc, #328]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d008      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026e2:	4b4e      	ldr	r3, [pc, #312]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	494b      	ldr	r1, [pc, #300]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0310 	and.w	r3, r3, #16
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d008      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002700:	4b46      	ldr	r3, [pc, #280]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002704:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	4943      	ldr	r1, [pc, #268]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800270e:	4313      	orrs	r3, r2
 8002710:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800271a:	2b00      	cmp	r3, #0
 800271c:	d008      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800271e:	4b3f      	ldr	r3, [pc, #252]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	493c      	ldr	r1, [pc, #240]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800272c:	4313      	orrs	r3, r2
 800272e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002738:	2b00      	cmp	r3, #0
 800273a:	d008      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800273c:	4b37      	ldr	r3, [pc, #220]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800273e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002740:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	4934      	ldr	r1, [pc, #208]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800274a:	4313      	orrs	r3, r2
 800274c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002756:	2b00      	cmp	r3, #0
 8002758:	d008      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800275a:	4b30      	ldr	r3, [pc, #192]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800275c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002766:	492d      	ldr	r1, [pc, #180]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002768:	4313      	orrs	r3, r2
 800276a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002778:	4b28      	ldr	r3, [pc, #160]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800277a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002784:	4925      	ldr	r1, [pc, #148]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002786:	4313      	orrs	r3, r2
 8002788:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d008      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002796:	4b21      	ldr	r3, [pc, #132]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	491e      	ldr	r1, [pc, #120]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d008      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80027b4:	4b19      	ldr	r3, [pc, #100]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c0:	4916      	ldr	r1, [pc, #88]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d008      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80027d2:	4b12      	ldr	r3, [pc, #72]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027de:	490f      	ldr	r1, [pc, #60]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d008      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80027f0:	4b0a      	ldr	r3, [pc, #40]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fc:	4907      	ldr	r1, [pc, #28]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00c      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800280e:	4b03      	ldr	r3, [pc, #12]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	e002      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800281a:	bf00      	nop
 800281c:	40021000 	.word	0x40021000
 8002820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002822:	4913      	ldr	r1, [pc, #76]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002824:	4313      	orrs	r3, r2
 8002826:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d008      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002834:	4b0e      	ldr	r3, [pc, #56]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002838:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002840:	490b      	ldr	r1, [pc, #44]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002842:	4313      	orrs	r3, r2
 8002844:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d008      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002852:	4b07      	ldr	r3, [pc, #28]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800285e:	4904      	ldr	r1, [pc, #16]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002860:	4313      	orrs	r3, r2
 8002862:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3748      	adds	r7, #72	; 0x48
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40021000 	.word	0x40021000

08002874 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e040      	b.n	8002908 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800288a:	2b00      	cmp	r3, #0
 800288c:	d106      	bne.n	800289c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7fd fe78 	bl	800058c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2224      	movs	r2, #36	; 0x24
 80028a0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 0201 	bic.w	r2, r2, #1
 80028b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 fbba 	bl	800302c <UART_SetConfig>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d101      	bne.n	80028c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e022      	b.n	8002908 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d002      	beq.n	80028d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 fd82 	bl	80033d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 fe09 	bl	8003518 <UART_CheckIdleState>
 8002906:	4603      	mov	r3, r0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b08a      	sub	sp, #40	; 0x28
 8002914:	af02      	add	r7, sp, #8
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	603b      	str	r3, [r7, #0]
 800291c:	4613      	mov	r3, r2
 800291e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002924:	2b20      	cmp	r3, #32
 8002926:	d178      	bne.n	8002a1a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <HAL_UART_Transmit+0x24>
 800292e:	88fb      	ldrh	r3, [r7, #6]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e071      	b.n	8002a1c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2221      	movs	r2, #33	; 0x21
 8002944:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002946:	f7fd ff79 	bl	800083c <HAL_GetTick>
 800294a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	88fa      	ldrh	r2, [r7, #6]
 8002950:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	88fa      	ldrh	r2, [r7, #6]
 8002958:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002964:	d108      	bne.n	8002978 <HAL_UART_Transmit+0x68>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d104      	bne.n	8002978 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	61bb      	str	r3, [r7, #24]
 8002976:	e003      	b.n	8002980 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800297c:	2300      	movs	r3, #0
 800297e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002980:	e030      	b.n	80029e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	2200      	movs	r2, #0
 800298a:	2180      	movs	r1, #128	; 0x80
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f000 fe6b 	bl	8003668 <UART_WaitOnFlagUntilTimeout>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d004      	beq.n	80029a2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2220      	movs	r2, #32
 800299c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e03c      	b.n	8002a1c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10b      	bne.n	80029c0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	881a      	ldrh	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029b4:	b292      	uxth	r2, r2
 80029b6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	3302      	adds	r3, #2
 80029bc:	61bb      	str	r3, [r7, #24]
 80029be:	e008      	b.n	80029d2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	781a      	ldrb	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	b292      	uxth	r2, r2
 80029ca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	3301      	adds	r3, #1
 80029d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029d8:	b29b      	uxth	r3, r3
 80029da:	3b01      	subs	r3, #1
 80029dc:	b29a      	uxth	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1c8      	bne.n	8002982 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	2200      	movs	r2, #0
 80029f8:	2140      	movs	r1, #64	; 0x40
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 fe34 	bl	8003668 <UART_WaitOnFlagUntilTimeout>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d004      	beq.n	8002a10 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e005      	b.n	8002a1c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2220      	movs	r2, #32
 8002a14:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002a16:	2300      	movs	r3, #0
 8002a18:	e000      	b.n	8002a1c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002a1a:	2302      	movs	r3, #2
  }
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3720      	adds	r7, #32
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b0ba      	sub	sp, #232	; 0xe8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a4a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002a4e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002a52:	4013      	ands	r3, r2
 8002a54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002a58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d115      	bne.n	8002a8c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a64:	f003 0320 	and.w	r3, r3, #32
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00f      	beq.n	8002a8c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a70:	f003 0320 	and.w	r3, r3, #32
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d009      	beq.n	8002a8c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 82ab 	beq.w	8002fd8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	4798      	blx	r3
      }
      return;
 8002a8a:	e2a5      	b.n	8002fd8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002a8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 8117 	beq.w	8002cc4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002a96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d106      	bne.n	8002ab0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002aa2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002aa6:	4b85      	ldr	r3, [pc, #532]	; (8002cbc <HAL_UART_IRQHandler+0x298>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 810a 	beq.w	8002cc4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d011      	beq.n	8002ae0 <HAL_UART_IRQHandler+0xbc>
 8002abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00b      	beq.n	8002ae0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2201      	movs	r2, #1
 8002ace:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ad6:	f043 0201 	orr.w	r2, r3, #1
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d011      	beq.n	8002b10 <HAL_UART_IRQHandler+0xec>
 8002aec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00b      	beq.n	8002b10 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2202      	movs	r2, #2
 8002afe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b06:	f043 0204 	orr.w	r2, r3, #4
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d011      	beq.n	8002b40 <HAL_UART_IRQHandler+0x11c>
 8002b1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00b      	beq.n	8002b40 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2204      	movs	r2, #4
 8002b2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b36:	f043 0202 	orr.w	r2, r3, #2
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b44:	f003 0308 	and.w	r3, r3, #8
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d017      	beq.n	8002b7c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b50:	f003 0320 	and.w	r3, r3, #32
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d105      	bne.n	8002b64 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002b58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b5c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00b      	beq.n	8002b7c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2208      	movs	r2, #8
 8002b6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b72:	f043 0208 	orr.w	r2, r3, #8
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d012      	beq.n	8002bae <HAL_UART_IRQHandler+0x18a>
 8002b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00c      	beq.n	8002bae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ba4:	f043 0220 	orr.w	r2, r3, #32
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 8211 	beq.w	8002fdc <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bbe:	f003 0320 	and.w	r3, r3, #32
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00d      	beq.n	8002be2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bca:	f003 0320 	and.w	r3, r3, #32
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d007      	beq.n	8002be2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002be8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf6:	2b40      	cmp	r3, #64	; 0x40
 8002bf8:	d005      	beq.n	8002c06 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002bfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002bfe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d04f      	beq.n	8002ca6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 fe5c 	bl	80038c4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c16:	2b40      	cmp	r3, #64	; 0x40
 8002c18:	d141      	bne.n	8002c9e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	3308      	adds	r3, #8
 8002c20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c28:	e853 3f00 	ldrex	r3, [r3]
 8002c2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	3308      	adds	r3, #8
 8002c42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c56:	e841 2300 	strex	r3, r2, [r1]
 8002c5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002c5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1d9      	bne.n	8002c1a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d013      	beq.n	8002c96 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c72:	4a13      	ldr	r2, [pc, #76]	; (8002cc0 <HAL_UART_IRQHandler+0x29c>)
 8002c74:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fd ff58 	bl	8000b30 <HAL_DMA_Abort_IT>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d017      	beq.n	8002cb6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002c90:	4610      	mov	r0, r2
 8002c92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c94:	e00f      	b.n	8002cb6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f9be 	bl	8003018 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c9c:	e00b      	b.n	8002cb6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f9ba 	bl	8003018 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ca4:	e007      	b.n	8002cb6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f9b6 	bl	8003018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002cb4:	e192      	b.n	8002fdc <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb6:	bf00      	nop
    return;
 8002cb8:	e190      	b.n	8002fdc <HAL_UART_IRQHandler+0x5b8>
 8002cba:	bf00      	nop
 8002cbc:	04000120 	.word	0x04000120
 8002cc0:	0800398d 	.word	0x0800398d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	f040 814b 	bne.w	8002f64 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cd2:	f003 0310 	and.w	r3, r3, #16
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 8144 	beq.w	8002f64 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ce0:	f003 0310 	and.w	r3, r3, #16
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 813d 	beq.w	8002f64 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2210      	movs	r2, #16
 8002cf0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfc:	2b40      	cmp	r3, #64	; 0x40
 8002cfe:	f040 80b5 	bne.w	8002e6c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d0e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 8164 	beq.w	8002fe0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002d1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d22:	429a      	cmp	r2, r3
 8002d24:	f080 815c 	bcs.w	8002fe0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	2b20      	cmp	r3, #32
 8002d3a:	f000 8086 	beq.w	8002e4a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d4a:	e853 3f00 	ldrex	r3, [r3]
 8002d4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002d52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	461a      	mov	r2, r3
 8002d64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002d68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d6c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d70:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d74:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d78:	e841 2300 	strex	r3, r2, [r1]
 8002d7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1da      	bne.n	8002d3e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	3308      	adds	r3, #8
 8002d8e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d92:	e853 3f00 	ldrex	r3, [r3]
 8002d96:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d9a:	f023 0301 	bic.w	r3, r3, #1
 8002d9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	3308      	adds	r3, #8
 8002da8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002dac:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002db0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002db4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002db8:	e841 2300 	strex	r3, r2, [r1]
 8002dbc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002dbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1e1      	bne.n	8002d88 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	3308      	adds	r3, #8
 8002dca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dce:	e853 3f00 	ldrex	r3, [r3]
 8002dd2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002dd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	3308      	adds	r3, #8
 8002de4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002de8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002dea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002dee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002df0:	e841 2300 	strex	r3, r2, [r1]
 8002df4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002df6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1e3      	bne.n	8002dc4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e12:	e853 3f00 	ldrex	r3, [r3]
 8002e16:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e1a:	f023 0310 	bic.w	r3, r3, #16
 8002e1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e2e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e34:	e841 2300 	strex	r3, r2, [r1]
 8002e38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1e4      	bne.n	8002e0a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fd fe3a 	bl	8000abe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	4619      	mov	r1, r3
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7fd f9c7 	bl	80001f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e6a:	e0b9      	b.n	8002fe0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 80ab 	beq.w	8002fe4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002e8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 80a6 	beq.w	8002fe4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea0:	e853 3f00 	ldrex	r3, [r3]
 8002ea4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002eac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002eba:	647b      	str	r3, [r7, #68]	; 0x44
 8002ebc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ebe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ec0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ec2:	e841 2300 	strex	r3, r2, [r1]
 8002ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1e4      	bne.n	8002e98 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	3308      	adds	r3, #8
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	e853 3f00 	ldrex	r3, [r3]
 8002edc:	623b      	str	r3, [r7, #32]
   return(result);
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	f023 0301 	bic.w	r3, r3, #1
 8002ee4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	3308      	adds	r3, #8
 8002eee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ef2:	633a      	str	r2, [r7, #48]	; 0x30
 8002ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002efa:	e841 2300 	strex	r3, r2, [r1]
 8002efe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1e3      	bne.n	8002ece <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	e853 3f00 	ldrex	r3, [r3]
 8002f26:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f023 0310 	bic.w	r3, r3, #16
 8002f2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	461a      	mov	r2, r3
 8002f38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f3c:	61fb      	str	r3, [r7, #28]
 8002f3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f40:	69b9      	ldr	r1, [r7, #24]
 8002f42:	69fa      	ldr	r2, [r7, #28]
 8002f44:	e841 2300 	strex	r3, r2, [r1]
 8002f48:	617b      	str	r3, [r7, #20]
   return(result);
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1e4      	bne.n	8002f1a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2202      	movs	r2, #2
 8002f54:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f7fd f94b 	bl	80001f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f62:	e03f      	b.n	8002fe4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00e      	beq.n	8002f8e <HAL_UART_IRQHandler+0x56a>
 8002f70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d008      	beq.n	8002f8e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 fee8 	bl	8003d5c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f8c:	e02d      	b.n	8002fea <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00e      	beq.n	8002fb8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002f9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d008      	beq.n	8002fb8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d01c      	beq.n	8002fe8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	4798      	blx	r3
    }
    return;
 8002fb6:	e017      	b.n	8002fe8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d012      	beq.n	8002fea <HAL_UART_IRQHandler+0x5c6>
 8002fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00c      	beq.n	8002fea <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 fcf1 	bl	80039b8 <UART_EndTransmit_IT>
    return;
 8002fd6:	e008      	b.n	8002fea <HAL_UART_IRQHandler+0x5c6>
      return;
 8002fd8:	bf00      	nop
 8002fda:	e006      	b.n	8002fea <HAL_UART_IRQHandler+0x5c6>
    return;
 8002fdc:	bf00      	nop
 8002fde:	e004      	b.n	8002fea <HAL_UART_IRQHandler+0x5c6>
      return;
 8002fe0:	bf00      	nop
 8002fe2:	e002      	b.n	8002fea <HAL_UART_IRQHandler+0x5c6>
      return;
 8002fe4:	bf00      	nop
 8002fe6:	e000      	b.n	8002fea <HAL_UART_IRQHandler+0x5c6>
    return;
 8002fe8:	bf00      	nop
  }

}
 8002fea:	37e8      	adds	r7, #232	; 0xe8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b088      	sub	sp, #32
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003034:	2300      	movs	r3, #0
 8003036:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	431a      	orrs	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	4313      	orrs	r3, r2
 800304e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	4b92      	ldr	r3, [pc, #584]	; (80032a0 <UART_SetConfig+0x274>)
 8003058:	4013      	ands	r3, r2
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6812      	ldr	r2, [r2, #0]
 800305e:	6979      	ldr	r1, [r7, #20]
 8003060:	430b      	orrs	r3, r1
 8003062:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	4313      	orrs	r3, r2
 8003088:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	430a      	orrs	r2, r1
 800309c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a80      	ldr	r2, [pc, #512]	; (80032a4 <UART_SetConfig+0x278>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d120      	bne.n	80030ea <UART_SetConfig+0xbe>
 80030a8:	4b7f      	ldr	r3, [pc, #508]	; (80032a8 <UART_SetConfig+0x27c>)
 80030aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d817      	bhi.n	80030e4 <UART_SetConfig+0xb8>
 80030b4:	a201      	add	r2, pc, #4	; (adr r2, 80030bc <UART_SetConfig+0x90>)
 80030b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ba:	bf00      	nop
 80030bc:	080030cd 	.word	0x080030cd
 80030c0:	080030d9 	.word	0x080030d9
 80030c4:	080030df 	.word	0x080030df
 80030c8:	080030d3 	.word	0x080030d3
 80030cc:	2301      	movs	r3, #1
 80030ce:	77fb      	strb	r3, [r7, #31]
 80030d0:	e0b5      	b.n	800323e <UART_SetConfig+0x212>
 80030d2:	2302      	movs	r3, #2
 80030d4:	77fb      	strb	r3, [r7, #31]
 80030d6:	e0b2      	b.n	800323e <UART_SetConfig+0x212>
 80030d8:	2304      	movs	r3, #4
 80030da:	77fb      	strb	r3, [r7, #31]
 80030dc:	e0af      	b.n	800323e <UART_SetConfig+0x212>
 80030de:	2308      	movs	r3, #8
 80030e0:	77fb      	strb	r3, [r7, #31]
 80030e2:	e0ac      	b.n	800323e <UART_SetConfig+0x212>
 80030e4:	2310      	movs	r3, #16
 80030e6:	77fb      	strb	r3, [r7, #31]
 80030e8:	e0a9      	b.n	800323e <UART_SetConfig+0x212>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a6f      	ldr	r2, [pc, #444]	; (80032ac <UART_SetConfig+0x280>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d124      	bne.n	800313e <UART_SetConfig+0x112>
 80030f4:	4b6c      	ldr	r3, [pc, #432]	; (80032a8 <UART_SetConfig+0x27c>)
 80030f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003100:	d011      	beq.n	8003126 <UART_SetConfig+0xfa>
 8003102:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003106:	d817      	bhi.n	8003138 <UART_SetConfig+0x10c>
 8003108:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800310c:	d011      	beq.n	8003132 <UART_SetConfig+0x106>
 800310e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003112:	d811      	bhi.n	8003138 <UART_SetConfig+0x10c>
 8003114:	2b00      	cmp	r3, #0
 8003116:	d003      	beq.n	8003120 <UART_SetConfig+0xf4>
 8003118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800311c:	d006      	beq.n	800312c <UART_SetConfig+0x100>
 800311e:	e00b      	b.n	8003138 <UART_SetConfig+0x10c>
 8003120:	2300      	movs	r3, #0
 8003122:	77fb      	strb	r3, [r7, #31]
 8003124:	e08b      	b.n	800323e <UART_SetConfig+0x212>
 8003126:	2302      	movs	r3, #2
 8003128:	77fb      	strb	r3, [r7, #31]
 800312a:	e088      	b.n	800323e <UART_SetConfig+0x212>
 800312c:	2304      	movs	r3, #4
 800312e:	77fb      	strb	r3, [r7, #31]
 8003130:	e085      	b.n	800323e <UART_SetConfig+0x212>
 8003132:	2308      	movs	r3, #8
 8003134:	77fb      	strb	r3, [r7, #31]
 8003136:	e082      	b.n	800323e <UART_SetConfig+0x212>
 8003138:	2310      	movs	r3, #16
 800313a:	77fb      	strb	r3, [r7, #31]
 800313c:	e07f      	b.n	800323e <UART_SetConfig+0x212>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a5b      	ldr	r2, [pc, #364]	; (80032b0 <UART_SetConfig+0x284>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d124      	bne.n	8003192 <UART_SetConfig+0x166>
 8003148:	4b57      	ldr	r3, [pc, #348]	; (80032a8 <UART_SetConfig+0x27c>)
 800314a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003150:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003154:	d011      	beq.n	800317a <UART_SetConfig+0x14e>
 8003156:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800315a:	d817      	bhi.n	800318c <UART_SetConfig+0x160>
 800315c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003160:	d011      	beq.n	8003186 <UART_SetConfig+0x15a>
 8003162:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003166:	d811      	bhi.n	800318c <UART_SetConfig+0x160>
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <UART_SetConfig+0x148>
 800316c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003170:	d006      	beq.n	8003180 <UART_SetConfig+0x154>
 8003172:	e00b      	b.n	800318c <UART_SetConfig+0x160>
 8003174:	2300      	movs	r3, #0
 8003176:	77fb      	strb	r3, [r7, #31]
 8003178:	e061      	b.n	800323e <UART_SetConfig+0x212>
 800317a:	2302      	movs	r3, #2
 800317c:	77fb      	strb	r3, [r7, #31]
 800317e:	e05e      	b.n	800323e <UART_SetConfig+0x212>
 8003180:	2304      	movs	r3, #4
 8003182:	77fb      	strb	r3, [r7, #31]
 8003184:	e05b      	b.n	800323e <UART_SetConfig+0x212>
 8003186:	2308      	movs	r3, #8
 8003188:	77fb      	strb	r3, [r7, #31]
 800318a:	e058      	b.n	800323e <UART_SetConfig+0x212>
 800318c:	2310      	movs	r3, #16
 800318e:	77fb      	strb	r3, [r7, #31]
 8003190:	e055      	b.n	800323e <UART_SetConfig+0x212>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a47      	ldr	r2, [pc, #284]	; (80032b4 <UART_SetConfig+0x288>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d124      	bne.n	80031e6 <UART_SetConfig+0x1ba>
 800319c:	4b42      	ldr	r3, [pc, #264]	; (80032a8 <UART_SetConfig+0x27c>)
 800319e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80031a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031a8:	d011      	beq.n	80031ce <UART_SetConfig+0x1a2>
 80031aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031ae:	d817      	bhi.n	80031e0 <UART_SetConfig+0x1b4>
 80031b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031b4:	d011      	beq.n	80031da <UART_SetConfig+0x1ae>
 80031b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031ba:	d811      	bhi.n	80031e0 <UART_SetConfig+0x1b4>
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <UART_SetConfig+0x19c>
 80031c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031c4:	d006      	beq.n	80031d4 <UART_SetConfig+0x1a8>
 80031c6:	e00b      	b.n	80031e0 <UART_SetConfig+0x1b4>
 80031c8:	2300      	movs	r3, #0
 80031ca:	77fb      	strb	r3, [r7, #31]
 80031cc:	e037      	b.n	800323e <UART_SetConfig+0x212>
 80031ce:	2302      	movs	r3, #2
 80031d0:	77fb      	strb	r3, [r7, #31]
 80031d2:	e034      	b.n	800323e <UART_SetConfig+0x212>
 80031d4:	2304      	movs	r3, #4
 80031d6:	77fb      	strb	r3, [r7, #31]
 80031d8:	e031      	b.n	800323e <UART_SetConfig+0x212>
 80031da:	2308      	movs	r3, #8
 80031dc:	77fb      	strb	r3, [r7, #31]
 80031de:	e02e      	b.n	800323e <UART_SetConfig+0x212>
 80031e0:	2310      	movs	r3, #16
 80031e2:	77fb      	strb	r3, [r7, #31]
 80031e4:	e02b      	b.n	800323e <UART_SetConfig+0x212>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a33      	ldr	r2, [pc, #204]	; (80032b8 <UART_SetConfig+0x28c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d124      	bne.n	800323a <UART_SetConfig+0x20e>
 80031f0:	4b2d      	ldr	r3, [pc, #180]	; (80032a8 <UART_SetConfig+0x27c>)
 80031f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80031f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031fc:	d011      	beq.n	8003222 <UART_SetConfig+0x1f6>
 80031fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003202:	d817      	bhi.n	8003234 <UART_SetConfig+0x208>
 8003204:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003208:	d011      	beq.n	800322e <UART_SetConfig+0x202>
 800320a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800320e:	d811      	bhi.n	8003234 <UART_SetConfig+0x208>
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <UART_SetConfig+0x1f0>
 8003214:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003218:	d006      	beq.n	8003228 <UART_SetConfig+0x1fc>
 800321a:	e00b      	b.n	8003234 <UART_SetConfig+0x208>
 800321c:	2300      	movs	r3, #0
 800321e:	77fb      	strb	r3, [r7, #31]
 8003220:	e00d      	b.n	800323e <UART_SetConfig+0x212>
 8003222:	2302      	movs	r3, #2
 8003224:	77fb      	strb	r3, [r7, #31]
 8003226:	e00a      	b.n	800323e <UART_SetConfig+0x212>
 8003228:	2304      	movs	r3, #4
 800322a:	77fb      	strb	r3, [r7, #31]
 800322c:	e007      	b.n	800323e <UART_SetConfig+0x212>
 800322e:	2308      	movs	r3, #8
 8003230:	77fb      	strb	r3, [r7, #31]
 8003232:	e004      	b.n	800323e <UART_SetConfig+0x212>
 8003234:	2310      	movs	r3, #16
 8003236:	77fb      	strb	r3, [r7, #31]
 8003238:	e001      	b.n	800323e <UART_SetConfig+0x212>
 800323a:	2310      	movs	r3, #16
 800323c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003246:	d16b      	bne.n	8003320 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003248:	7ffb      	ldrb	r3, [r7, #31]
 800324a:	2b08      	cmp	r3, #8
 800324c:	d838      	bhi.n	80032c0 <UART_SetConfig+0x294>
 800324e:	a201      	add	r2, pc, #4	; (adr r2, 8003254 <UART_SetConfig+0x228>)
 8003250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003254:	08003279 	.word	0x08003279
 8003258:	08003281 	.word	0x08003281
 800325c:	08003289 	.word	0x08003289
 8003260:	080032c1 	.word	0x080032c1
 8003264:	0800328f 	.word	0x0800328f
 8003268:	080032c1 	.word	0x080032c1
 800326c:	080032c1 	.word	0x080032c1
 8003270:	080032c1 	.word	0x080032c1
 8003274:	08003297 	.word	0x08003297
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003278:	f7ff f89a 	bl	80023b0 <HAL_RCC_GetPCLK1Freq>
 800327c:	61b8      	str	r0, [r7, #24]
        break;
 800327e:	e024      	b.n	80032ca <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003280:	f7ff f8b8 	bl	80023f4 <HAL_RCC_GetPCLK2Freq>
 8003284:	61b8      	str	r0, [r7, #24]
        break;
 8003286:	e020      	b.n	80032ca <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003288:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <UART_SetConfig+0x290>)
 800328a:	61bb      	str	r3, [r7, #24]
        break;
 800328c:	e01d      	b.n	80032ca <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800328e:	f7ff f819 	bl	80022c4 <HAL_RCC_GetSysClockFreq>
 8003292:	61b8      	str	r0, [r7, #24]
        break;
 8003294:	e019      	b.n	80032ca <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800329a:	61bb      	str	r3, [r7, #24]
        break;
 800329c:	e015      	b.n	80032ca <UART_SetConfig+0x29e>
 800329e:	bf00      	nop
 80032a0:	efff69f3 	.word	0xefff69f3
 80032a4:	40013800 	.word	0x40013800
 80032a8:	40021000 	.word	0x40021000
 80032ac:	40004400 	.word	0x40004400
 80032b0:	40004800 	.word	0x40004800
 80032b4:	40004c00 	.word	0x40004c00
 80032b8:	40005000 	.word	0x40005000
 80032bc:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	77bb      	strb	r3, [r7, #30]
        break;
 80032c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d073      	beq.n	80033b8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	005a      	lsls	r2, r3, #1
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	085b      	lsrs	r3, r3, #1
 80032da:	441a      	add	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	2b0f      	cmp	r3, #15
 80032ea:	d916      	bls.n	800331a <UART_SetConfig+0x2ee>
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f2:	d212      	bcs.n	800331a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	f023 030f 	bic.w	r3, r3, #15
 80032fc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	085b      	lsrs	r3, r3, #1
 8003302:	b29b      	uxth	r3, r3
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	b29a      	uxth	r2, r3
 800330a:	89fb      	ldrh	r3, [r7, #14]
 800330c:	4313      	orrs	r3, r2
 800330e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	89fa      	ldrh	r2, [r7, #14]
 8003316:	60da      	str	r2, [r3, #12]
 8003318:	e04e      	b.n	80033b8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	77bb      	strb	r3, [r7, #30]
 800331e:	e04b      	b.n	80033b8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003320:	7ffb      	ldrb	r3, [r7, #31]
 8003322:	2b08      	cmp	r3, #8
 8003324:	d827      	bhi.n	8003376 <UART_SetConfig+0x34a>
 8003326:	a201      	add	r2, pc, #4	; (adr r2, 800332c <UART_SetConfig+0x300>)
 8003328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332c:	08003351 	.word	0x08003351
 8003330:	08003359 	.word	0x08003359
 8003334:	08003361 	.word	0x08003361
 8003338:	08003377 	.word	0x08003377
 800333c:	08003367 	.word	0x08003367
 8003340:	08003377 	.word	0x08003377
 8003344:	08003377 	.word	0x08003377
 8003348:	08003377 	.word	0x08003377
 800334c:	0800336f 	.word	0x0800336f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003350:	f7ff f82e 	bl	80023b0 <HAL_RCC_GetPCLK1Freq>
 8003354:	61b8      	str	r0, [r7, #24]
        break;
 8003356:	e013      	b.n	8003380 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003358:	f7ff f84c 	bl	80023f4 <HAL_RCC_GetPCLK2Freq>
 800335c:	61b8      	str	r0, [r7, #24]
        break;
 800335e:	e00f      	b.n	8003380 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003360:	4b1b      	ldr	r3, [pc, #108]	; (80033d0 <UART_SetConfig+0x3a4>)
 8003362:	61bb      	str	r3, [r7, #24]
        break;
 8003364:	e00c      	b.n	8003380 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003366:	f7fe ffad 	bl	80022c4 <HAL_RCC_GetSysClockFreq>
 800336a:	61b8      	str	r0, [r7, #24]
        break;
 800336c:	e008      	b.n	8003380 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800336e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003372:	61bb      	str	r3, [r7, #24]
        break;
 8003374:	e004      	b.n	8003380 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003376:	2300      	movs	r3, #0
 8003378:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	77bb      	strb	r3, [r7, #30]
        break;
 800337e:	bf00      	nop
    }

    if (pclk != 0U)
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d018      	beq.n	80033b8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	085a      	lsrs	r2, r3, #1
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	441a      	add	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	fbb2 f3f3 	udiv	r3, r2, r3
 8003398:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	2b0f      	cmp	r3, #15
 800339e:	d909      	bls.n	80033b4 <UART_SetConfig+0x388>
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a6:	d205      	bcs.n	80033b4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	60da      	str	r2, [r3, #12]
 80033b2:	e001      	b.n	80033b8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80033c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3720      	adds	r7, #32
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	007a1200 	.word	0x007a1200

080033d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00a      	beq.n	80033fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00a      	beq.n	8003442 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00a      	beq.n	8003464 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	f003 0310 	and.w	r3, r3, #16
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00a      	beq.n	8003486 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	f003 0320 	and.w	r3, r3, #32
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d01a      	beq.n	80034ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034d2:	d10a      	bne.n	80034ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	605a      	str	r2, [r3, #4]
  }
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b098      	sub	sp, #96	; 0x60
 800351c:	af02      	add	r7, sp, #8
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003528:	f7fd f988 	bl	800083c <HAL_GetTick>
 800352c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	2b08      	cmp	r3, #8
 800353a:	d12e      	bne.n	800359a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800353c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003544:	2200      	movs	r2, #0
 8003546:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f88c 	bl	8003668 <UART_WaitOnFlagUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d021      	beq.n	800359a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800355e:	e853 3f00 	ldrex	r3, [r3]
 8003562:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003566:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800356a:	653b      	str	r3, [r7, #80]	; 0x50
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	461a      	mov	r2, r3
 8003572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003574:	647b      	str	r3, [r7, #68]	; 0x44
 8003576:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003578:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800357a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800357c:	e841 2300 	strex	r3, r2, [r1]
 8003580:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1e6      	bne.n	8003556 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2220      	movs	r2, #32
 800358c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e062      	b.n	8003660 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d149      	bne.n	800363c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035b0:	2200      	movs	r2, #0
 80035b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f856 	bl	8003668 <UART_WaitOnFlagUntilTimeout>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d03c      	beq.n	800363c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	e853 3f00 	ldrex	r3, [r3]
 80035ce:	623b      	str	r3, [r7, #32]
   return(result);
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	461a      	mov	r2, r3
 80035de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035e0:	633b      	str	r3, [r7, #48]	; 0x30
 80035e2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035e8:	e841 2300 	strex	r3, r2, [r1]
 80035ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1e6      	bne.n	80035c2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	3308      	adds	r3, #8
 80035fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	e853 3f00 	ldrex	r3, [r3]
 8003602:	60fb      	str	r3, [r7, #12]
   return(result);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f023 0301 	bic.w	r3, r3, #1
 800360a:	64bb      	str	r3, [r7, #72]	; 0x48
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	3308      	adds	r3, #8
 8003612:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003614:	61fa      	str	r2, [r7, #28]
 8003616:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003618:	69b9      	ldr	r1, [r7, #24]
 800361a:	69fa      	ldr	r2, [r7, #28]
 800361c:	e841 2300 	strex	r3, r2, [r1]
 8003620:	617b      	str	r3, [r7, #20]
   return(result);
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1e5      	bne.n	80035f4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2220      	movs	r2, #32
 800362c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e011      	b.n	8003660 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2220      	movs	r2, #32
 8003640:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2220      	movs	r2, #32
 8003646:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3758      	adds	r7, #88	; 0x58
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	603b      	str	r3, [r7, #0]
 8003674:	4613      	mov	r3, r2
 8003676:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003678:	e049      	b.n	800370e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003680:	d045      	beq.n	800370e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003682:	f7fd f8db 	bl	800083c <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	429a      	cmp	r2, r3
 8003690:	d302      	bcc.n	8003698 <UART_WaitOnFlagUntilTimeout+0x30>
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e048      	b.n	800372e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0304 	and.w	r3, r3, #4
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d031      	beq.n	800370e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	f003 0308 	and.w	r3, r3, #8
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d110      	bne.n	80036da <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2208      	movs	r2, #8
 80036be:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 f8ff 	bl	80038c4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2208      	movs	r2, #8
 80036ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e029      	b.n	800372e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036e8:	d111      	bne.n	800370e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 f8e5 	bl	80038c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2220      	movs	r2, #32
 80036fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e00f      	b.n	800372e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	69da      	ldr	r2, [r3, #28]
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4013      	ands	r3, r2
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	429a      	cmp	r2, r3
 800371c:	bf0c      	ite	eq
 800371e:	2301      	moveq	r3, #1
 8003720:	2300      	movne	r3, #0
 8003722:	b2db      	uxtb	r3, r3
 8003724:	461a      	mov	r2, r3
 8003726:	79fb      	ldrb	r3, [r7, #7]
 8003728:	429a      	cmp	r2, r3
 800372a:	d0a6      	beq.n	800367a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003738:	b480      	push	{r7}
 800373a:	b097      	sub	sp, #92	; 0x5c
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	4613      	mov	r3, r2
 8003744:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	88fa      	ldrh	r2, [r7, #6]
 8003750:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	88fa      	ldrh	r2, [r7, #6]
 8003758:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800376a:	d10e      	bne.n	800378a <UART_Start_Receive_IT+0x52>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d105      	bne.n	8003780 <UART_Start_Receive_IT+0x48>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f240 12ff 	movw	r2, #511	; 0x1ff
 800377a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800377e:	e02d      	b.n	80037dc <UART_Start_Receive_IT+0xa4>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	22ff      	movs	r2, #255	; 0xff
 8003784:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003788:	e028      	b.n	80037dc <UART_Start_Receive_IT+0xa4>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10d      	bne.n	80037ae <UART_Start_Receive_IT+0x76>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d104      	bne.n	80037a4 <UART_Start_Receive_IT+0x6c>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	22ff      	movs	r2, #255	; 0xff
 800379e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037a2:	e01b      	b.n	80037dc <UART_Start_Receive_IT+0xa4>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	227f      	movs	r2, #127	; 0x7f
 80037a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037ac:	e016      	b.n	80037dc <UART_Start_Receive_IT+0xa4>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037b6:	d10d      	bne.n	80037d4 <UART_Start_Receive_IT+0x9c>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d104      	bne.n	80037ca <UART_Start_Receive_IT+0x92>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	227f      	movs	r2, #127	; 0x7f
 80037c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037c8:	e008      	b.n	80037dc <UART_Start_Receive_IT+0xa4>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	223f      	movs	r2, #63	; 0x3f
 80037ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037d2:	e003      	b.n	80037dc <UART_Start_Receive_IT+0xa4>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2222      	movs	r2, #34	; 0x22
 80037e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	3308      	adds	r3, #8
 80037f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037f6:	e853 3f00 	ldrex	r3, [r3]
 80037fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	657b      	str	r3, [r7, #84]	; 0x54
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	3308      	adds	r3, #8
 800380a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800380c:	64ba      	str	r2, [r7, #72]	; 0x48
 800380e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003810:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003812:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003814:	e841 2300 	strex	r3, r2, [r1]
 8003818:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800381a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1e5      	bne.n	80037ec <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003828:	d107      	bne.n	800383a <UART_Start_Receive_IT+0x102>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d103      	bne.n	800383a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	4a21      	ldr	r2, [pc, #132]	; (80038bc <UART_Start_Receive_IT+0x184>)
 8003836:	669a      	str	r2, [r3, #104]	; 0x68
 8003838:	e002      	b.n	8003840 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	4a20      	ldr	r2, [pc, #128]	; (80038c0 <UART_Start_Receive_IT+0x188>)
 800383e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d019      	beq.n	800387c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003850:	e853 3f00 	ldrex	r3, [r3]
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800385c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003866:	637b      	str	r3, [r7, #52]	; 0x34
 8003868:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800386c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800386e:	e841 2300 	strex	r3, r2, [r1]
 8003872:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1e6      	bne.n	8003848 <UART_Start_Receive_IT+0x110>
 800387a:	e018      	b.n	80038ae <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	e853 3f00 	ldrex	r3, [r3]
 8003888:	613b      	str	r3, [r7, #16]
   return(result);
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f043 0320 	orr.w	r3, r3, #32
 8003890:	653b      	str	r3, [r7, #80]	; 0x50
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	461a      	mov	r2, r3
 8003898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800389a:	623b      	str	r3, [r7, #32]
 800389c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389e:	69f9      	ldr	r1, [r7, #28]
 80038a0:	6a3a      	ldr	r2, [r7, #32]
 80038a2:	e841 2300 	strex	r3, r2, [r1]
 80038a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1e6      	bne.n	800387c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	375c      	adds	r7, #92	; 0x5c
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr
 80038bc:	08003bb5 	.word	0x08003bb5
 80038c0:	08003a0d 	.word	0x08003a0d

080038c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b095      	sub	sp, #84	; 0x54
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d4:	e853 3f00 	ldrex	r3, [r3]
 80038d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80038da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	461a      	mov	r2, r3
 80038e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038ea:	643b      	str	r3, [r7, #64]	; 0x40
 80038ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038f2:	e841 2300 	strex	r3, r2, [r1]
 80038f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1e6      	bne.n	80038cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	3308      	adds	r3, #8
 8003904:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003906:	6a3b      	ldr	r3, [r7, #32]
 8003908:	e853 3f00 	ldrex	r3, [r3]
 800390c:	61fb      	str	r3, [r7, #28]
   return(result);
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	f023 0301 	bic.w	r3, r3, #1
 8003914:	64bb      	str	r3, [r7, #72]	; 0x48
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	3308      	adds	r3, #8
 800391c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800391e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003920:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003922:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003926:	e841 2300 	strex	r3, r2, [r1]
 800392a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1e5      	bne.n	80038fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003936:	2b01      	cmp	r3, #1
 8003938:	d118      	bne.n	800396c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	e853 3f00 	ldrex	r3, [r3]
 8003946:	60bb      	str	r3, [r7, #8]
   return(result);
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	f023 0310 	bic.w	r3, r3, #16
 800394e:	647b      	str	r3, [r7, #68]	; 0x44
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	461a      	mov	r2, r3
 8003956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003958:	61bb      	str	r3, [r7, #24]
 800395a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395c:	6979      	ldr	r1, [r7, #20]
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	e841 2300 	strex	r3, r2, [r1]
 8003964:	613b      	str	r3, [r7, #16]
   return(result);
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1e6      	bne.n	800393a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2220      	movs	r2, #32
 8003970:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003980:	bf00      	nop
 8003982:	3754      	adds	r7, #84	; 0x54
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f7ff fb34 	bl	8003018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039b0:	bf00      	nop
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	e853 3f00 	ldrex	r3, [r3]
 80039cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039d4:	61fb      	str	r3, [r7, #28]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	461a      	mov	r2, r3
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	61bb      	str	r3, [r7, #24]
 80039e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e2:	6979      	ldr	r1, [r7, #20]
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	e841 2300 	strex	r3, r2, [r1]
 80039ea:	613b      	str	r3, [r7, #16]
   return(result);
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1e6      	bne.n	80039c0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2220      	movs	r2, #32
 80039f6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7ff faf6 	bl	8002ff0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a04:	bf00      	nop
 8003a06:	3720      	adds	r7, #32
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b09c      	sub	sp, #112	; 0x70
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003a1a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a24:	2b22      	cmp	r3, #34	; 0x22
 8003a26:	f040 80b9 	bne.w	8003b9c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003a30:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003a34:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003a38:	b2d9      	uxtb	r1, r3
 8003a3a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a44:	400a      	ands	r2, r1
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4e:	1c5a      	adds	r2, r3, #1
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f040 809c 	bne.w	8003bac <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a7c:	e853 3f00 	ldrex	r3, [r3]
 8003a80:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a88:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a92:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a94:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a9a:	e841 2300 	strex	r3, r2, [r1]
 8003a9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003aa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1e6      	bne.n	8003a74 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	3308      	adds	r3, #8
 8003aac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab0:	e853 3f00 	ldrex	r3, [r3]
 8003ab4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab8:	f023 0301 	bic.w	r3, r3, #1
 8003abc:	667b      	str	r3, [r7, #100]	; 0x64
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3308      	adds	r3, #8
 8003ac4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003ac6:	647a      	str	r2, [r7, #68]	; 0x44
 8003ac8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003acc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ace:	e841 2300 	strex	r3, r2, [r1]
 8003ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1e5      	bne.n	8003aa6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2220      	movs	r2, #32
 8003ade:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d018      	beq.n	8003b2e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	e853 3f00 	ldrex	r3, [r3]
 8003b08:	623b      	str	r3, [r7, #32]
   return(result);
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b10:	663b      	str	r3, [r7, #96]	; 0x60
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	461a      	mov	r2, r3
 8003b18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b1a:	633b      	str	r3, [r7, #48]	; 0x30
 8003b1c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b22:	e841 2300 	strex	r3, r2, [r1]
 8003b26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1e6      	bne.n	8003afc <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d12e      	bne.n	8003b94 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	e853 3f00 	ldrex	r3, [r3]
 8003b48:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f023 0310 	bic.w	r3, r3, #16
 8003b50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	461a      	mov	r2, r3
 8003b58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b5a:	61fb      	str	r3, [r7, #28]
 8003b5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5e:	69b9      	ldr	r1, [r7, #24]
 8003b60:	69fa      	ldr	r2, [r7, #28]
 8003b62:	e841 2300 	strex	r3, r2, [r1]
 8003b66:	617b      	str	r3, [r7, #20]
   return(result);
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1e6      	bne.n	8003b3c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	f003 0310 	and.w	r3, r3, #16
 8003b78:	2b10      	cmp	r3, #16
 8003b7a:	d103      	bne.n	8003b84 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2210      	movs	r2, #16
 8003b82:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7fc fb33 	bl	80001f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b92:	e00b      	b.n	8003bac <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f7ff fa35 	bl	8003004 <HAL_UART_RxCpltCallback>
}
 8003b9a:	e007      	b.n	8003bac <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699a      	ldr	r2, [r3, #24]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 0208 	orr.w	r2, r2, #8
 8003baa:	619a      	str	r2, [r3, #24]
}
 8003bac:	bf00      	nop
 8003bae:	3770      	adds	r7, #112	; 0x70
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b09c      	sub	sp, #112	; 0x70
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003bc2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bcc:	2b22      	cmp	r3, #34	; 0x22
 8003bce:	f040 80b9 	bne.w	8003d44 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003bd8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003be2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8003be6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003bea:	4013      	ands	r3, r2
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bf0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf6:	1c9a      	adds	r2, r3, #2
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f040 809c 	bne.w	8003d54 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c24:	e853 3f00 	ldrex	r3, [r3]
 8003c28:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003c2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c30:	667b      	str	r3, [r7, #100]	; 0x64
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c3a:	657b      	str	r3, [r7, #84]	; 0x54
 8003c3c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003c40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c42:	e841 2300 	strex	r3, r2, [r1]
 8003c46:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1e6      	bne.n	8003c1c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	3308      	adds	r3, #8
 8003c54:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c58:	e853 3f00 	ldrex	r3, [r3]
 8003c5c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c60:	f023 0301 	bic.w	r3, r3, #1
 8003c64:	663b      	str	r3, [r7, #96]	; 0x60
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	3308      	adds	r3, #8
 8003c6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c6e:	643a      	str	r2, [r7, #64]	; 0x40
 8003c70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c76:	e841 2300 	strex	r3, r2, [r1]
 8003c7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1e5      	bne.n	8003c4e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d018      	beq.n	8003cd6 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	e853 3f00 	ldrex	r3, [r3]
 8003cb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cc4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cca:	e841 2300 	strex	r3, r2, [r1]
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1e6      	bne.n	8003ca4 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d12e      	bne.n	8003d3c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	e853 3f00 	ldrex	r3, [r3]
 8003cf0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	f023 0310 	bic.w	r3, r3, #16
 8003cf8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d02:	61bb      	str	r3, [r7, #24]
 8003d04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d06:	6979      	ldr	r1, [r7, #20]
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	e841 2300 	strex	r3, r2, [r1]
 8003d0e:	613b      	str	r3, [r7, #16]
   return(result);
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1e6      	bne.n	8003ce4 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	f003 0310 	and.w	r3, r3, #16
 8003d20:	2b10      	cmp	r3, #16
 8003d22:	d103      	bne.n	8003d2c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2210      	movs	r2, #16
 8003d2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003d32:	4619      	mov	r1, r3
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f7fc fa5f 	bl	80001f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d3a:	e00b      	b.n	8003d54 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff f961 	bl	8003004 <HAL_UART_RxCpltCallback>
}
 8003d42:	e007      	b.n	8003d54 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	699a      	ldr	r2, [r3, #24]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0208 	orr.w	r2, r2, #8
 8003d52:	619a      	str	r2, [r3, #24]
}
 8003d54:	bf00      	nop
 8003d56:	3770      	adds	r7, #112	; 0x70
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b08c      	sub	sp, #48	; 0x30
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d84:	2b20      	cmp	r3, #32
 8003d86:	d142      	bne.n	8003e0e <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 8003d8e:	88fb      	ldrh	r3, [r7, #6]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e03b      	b.n	8003e10 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8003da4:	88fb      	ldrh	r3, [r7, #6]
 8003da6:	461a      	mov	r2, r3
 8003da8:	68b9      	ldr	r1, [r7, #8]
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f7ff fcc4 	bl	8003738 <UART_Start_Receive_IT>
 8003db0:	4603      	mov	r3, r0
 8003db2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003db6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d124      	bne.n	8003e08 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d11d      	bne.n	8003e02 <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2210      	movs	r2, #16
 8003dcc:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	e853 3f00 	ldrex	r3, [r3]
 8003dda:	617b      	str	r3, [r7, #20]
   return(result);
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f043 0310 	orr.w	r3, r3, #16
 8003de2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	461a      	mov	r2, r3
 8003dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
 8003dee:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df0:	6a39      	ldr	r1, [r7, #32]
 8003df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003df4:	e841 2300 	strex	r3, r2, [r1]
 8003df8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1e6      	bne.n	8003dce <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 8003e00:	e002      	b.n	8003e08 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003e08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003e0c:	e000      	b.n	8003e10 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003e0e:	2302      	movs	r3, #2
  }
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3730      	adds	r7, #48	; 0x30
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <memset>:
 8003e18:	4402      	add	r2, r0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d100      	bne.n	8003e22 <memset+0xa>
 8003e20:	4770      	bx	lr
 8003e22:	f803 1b01 	strb.w	r1, [r3], #1
 8003e26:	e7f9      	b.n	8003e1c <memset+0x4>

08003e28 <__libc_init_array>:
 8003e28:	b570      	push	{r4, r5, r6, lr}
 8003e2a:	4d0d      	ldr	r5, [pc, #52]	; (8003e60 <__libc_init_array+0x38>)
 8003e2c:	4c0d      	ldr	r4, [pc, #52]	; (8003e64 <__libc_init_array+0x3c>)
 8003e2e:	1b64      	subs	r4, r4, r5
 8003e30:	10a4      	asrs	r4, r4, #2
 8003e32:	2600      	movs	r6, #0
 8003e34:	42a6      	cmp	r6, r4
 8003e36:	d109      	bne.n	8003e4c <__libc_init_array+0x24>
 8003e38:	4d0b      	ldr	r5, [pc, #44]	; (8003e68 <__libc_init_array+0x40>)
 8003e3a:	4c0c      	ldr	r4, [pc, #48]	; (8003e6c <__libc_init_array+0x44>)
 8003e3c:	f000 f818 	bl	8003e70 <_init>
 8003e40:	1b64      	subs	r4, r4, r5
 8003e42:	10a4      	asrs	r4, r4, #2
 8003e44:	2600      	movs	r6, #0
 8003e46:	42a6      	cmp	r6, r4
 8003e48:	d105      	bne.n	8003e56 <__libc_init_array+0x2e>
 8003e4a:	bd70      	pop	{r4, r5, r6, pc}
 8003e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e50:	4798      	blx	r3
 8003e52:	3601      	adds	r6, #1
 8003e54:	e7ee      	b.n	8003e34 <__libc_init_array+0xc>
 8003e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e5a:	4798      	blx	r3
 8003e5c:	3601      	adds	r6, #1
 8003e5e:	e7f2      	b.n	8003e46 <__libc_init_array+0x1e>
 8003e60:	08003ec0 	.word	0x08003ec0
 8003e64:	08003ec0 	.word	0x08003ec0
 8003e68:	08003ec0 	.word	0x08003ec0
 8003e6c:	08003ec4 	.word	0x08003ec4

08003e70 <_init>:
 8003e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e72:	bf00      	nop
 8003e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e76:	bc08      	pop	{r3}
 8003e78:	469e      	mov	lr, r3
 8003e7a:	4770      	bx	lr

08003e7c <_fini>:
 8003e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e7e:	bf00      	nop
 8003e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e82:	bc08      	pop	{r3}
 8003e84:	469e      	mov	lr, r3
 8003e86:	4770      	bx	lr
