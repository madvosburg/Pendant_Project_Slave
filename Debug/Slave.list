
Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000420c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080043a0  080043a0  000143a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043e0  080043e0  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  080043e0  080043e0  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043e0  080043e0  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043e0  080043e0  000143e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043e4  080043e4  000143e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  080043e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a0  2**0
                  CONTENTS
 10 .bss          000001d0  200000a0  200000a0  000200a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000270  20000270  000200a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b7ba  00000000  00000000  00020113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001ec7  00000000  00000000  0002b8cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000840  00000000  00000000  0002d798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000064a  00000000  00000000  0002dfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020111  00000000  00000000  0002e622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000c8bf  00000000  00000000  0004e733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c0aed  00000000  00000000  0005aff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002088  00000000  00000000  0011bae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0011db68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000a0 	.word	0x200000a0
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004388 	.word	0x08004388

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200000a4 	.word	0x200000a4
 80001d0:	08004388 	.word	0x08004388

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <HAL_UARTEx_RxEventCallback>:
char appended_data[40];
char result[5];
char tmp[10];

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
 80001ec:	460b      	mov	r3, r1
 80001ee:	807b      	strh	r3, [r7, #2]
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t*)RxData, sizeof(RxData));
 80001f0:	220c      	movs	r2, #12
 80001f2:	4905      	ldr	r1, [pc, #20]	; (8000208 <HAL_UARTEx_RxEventCallback+0x24>)
 80001f4:	4805      	ldr	r0, [pc, #20]	; (800020c <HAL_UARTEx_RxEventCallback+0x28>)
 80001f6:	f004 f80f 	bl	8004218 <HAL_UARTEx_ReceiveToIdle_IT>
	flag = true;
 80001fa:	4b05      	ldr	r3, [pc, #20]	; (8000210 <HAL_UARTEx_RxEventCallback+0x2c>)
 80001fc:	2201      	movs	r2, #1
 80001fe:	701a      	strb	r2, [r3, #0]

}
 8000200:	bf00      	nop
 8000202:	3708      	adds	r7, #8
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}
 8000208:	200001f0 	.word	0x200001f0
 800020c:	200000e0 	.word	0x200000e0
 8000210:	200001fc 	.word	0x200001fc

08000214 <xor>:

void xor(char* str1, char* str2){
 8000214:	b480      	push	{r7}
 8000216:	b085      	sub	sp, #20
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < 5; i++){
 800021e:	2300      	movs	r3, #0
 8000220:	60fb      	str	r3, [r7, #12]
 8000222:	e017      	b.n	8000254 <xor+0x40>
		if(str1[i] == str2[i]){
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	687a      	ldr	r2, [r7, #4]
 8000228:	4413      	add	r3, r2
 800022a:	781a      	ldrb	r2, [r3, #0]
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	6839      	ldr	r1, [r7, #0]
 8000230:	440b      	add	r3, r1
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	429a      	cmp	r2, r3
 8000236:	d105      	bne.n	8000244 <xor+0x30>
			result[i] = '0';			//if bits are same, XOR is 0
 8000238:	4a0c      	ldr	r2, [pc, #48]	; (800026c <xor+0x58>)
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	4413      	add	r3, r2
 800023e:	2230      	movs	r2, #48	; 0x30
 8000240:	701a      	strb	r2, [r3, #0]
 8000242:	e004      	b.n	800024e <xor+0x3a>
		}else{
			result[i] = '1';			//if bits are different, XOR is 1
 8000244:	4a09      	ldr	r2, [pc, #36]	; (800026c <xor+0x58>)
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	4413      	add	r3, r2
 800024a:	2231      	movs	r2, #49	; 0x31
 800024c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 5; i++){
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	3301      	adds	r3, #1
 8000252:	60fb      	str	r3, [r7, #12]
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	2b04      	cmp	r3, #4
 8000258:	dde4      	ble.n	8000224 <xor+0x10>
		}
	}
	result[4] = '\0';
 800025a:	4b04      	ldr	r3, [pc, #16]	; (800026c <xor+0x58>)
 800025c:	2200      	movs	r2, #0
 800025e:	711a      	strb	r2, [r3, #4]
}
 8000260:	bf00      	nop
 8000262:	3714      	adds	r7, #20
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr
 800026c:	20000258 	.word	0x20000258

08000270 <division>:

void division(){
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
	int dividend_len = strlen(appended_data);
 8000276:	482c      	ldr	r0, [pc, #176]	; (8000328 <division+0xb8>)
 8000278:	f7ff ffac 	bl	80001d4 <strlen>
 800027c:	4603      	mov	r3, r0
 800027e:	603b      	str	r3, [r7, #0]
	int xor_bits = 4;
 8000280:	2304      	movs	r3, #4
 8000282:	607b      	str	r3, [r7, #4]

	strncpy(tmp, appended_data, xor_bits);
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	461a      	mov	r2, r3
 8000288:	4927      	ldr	r1, [pc, #156]	; (8000328 <division+0xb8>)
 800028a:	4828      	ldr	r0, [pc, #160]	; (800032c <division+0xbc>)
 800028c:	f004 f83c 	bl	8004308 <strncpy>

	while(xor_bits < dividend_len){
 8000290:	e029      	b.n	80002e6 <division+0x76>
		if(tmp[0] == '1'){		//if leftmost bit is 1, perform xor with key
 8000292:	4b26      	ldr	r3, [pc, #152]	; (800032c <division+0xbc>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	2b31      	cmp	r3, #49	; 0x31
 8000298:	d111      	bne.n	80002be <division+0x4e>
			xor(key, tmp);
 800029a:	4924      	ldr	r1, [pc, #144]	; (800032c <division+0xbc>)
 800029c:	4824      	ldr	r0, [pc, #144]	; (8000330 <division+0xc0>)
 800029e:	f7ff ffb9 	bl	8000214 <xor>
			strncpy(tmp, result+1, 4);
 80002a2:	4b24      	ldr	r3, [pc, #144]	; (8000334 <division+0xc4>)
 80002a4:	2204      	movs	r2, #4
 80002a6:	4619      	mov	r1, r3
 80002a8:	4820      	ldr	r0, [pc, #128]	; (800032c <division+0xbc>)
 80002aa:	f004 f82d 	bl	8004308 <strncpy>
			strcat(tmp, &appended_data[xor_bits]);
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	4a1d      	ldr	r2, [pc, #116]	; (8000328 <division+0xb8>)
 80002b2:	4413      	add	r3, r2
 80002b4:	4619      	mov	r1, r3
 80002b6:	481d      	ldr	r0, [pc, #116]	; (800032c <division+0xbc>)
 80002b8:	f004 f80a 	bl	80042d0 <strcat>
 80002bc:	e010      	b.n	80002e0 <division+0x70>
		}else{					//if leftmost bit is 0, perform xor with string of zeros
			xor("0000", tmp);
 80002be:	491b      	ldr	r1, [pc, #108]	; (800032c <division+0xbc>)
 80002c0:	481d      	ldr	r0, [pc, #116]	; (8000338 <division+0xc8>)
 80002c2:	f7ff ffa7 	bl	8000214 <xor>
			strncpy(tmp, result+1, 4);
 80002c6:	4b1b      	ldr	r3, [pc, #108]	; (8000334 <division+0xc4>)
 80002c8:	2204      	movs	r2, #4
 80002ca:	4619      	mov	r1, r3
 80002cc:	4817      	ldr	r0, [pc, #92]	; (800032c <division+0xbc>)
 80002ce:	f004 f81b 	bl	8004308 <strncpy>
			strcat(tmp, &appended_data[xor_bits]);
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4a14      	ldr	r2, [pc, #80]	; (8000328 <division+0xb8>)
 80002d6:	4413      	add	r3, r2
 80002d8:	4619      	mov	r1, r3
 80002da:	4814      	ldr	r0, [pc, #80]	; (800032c <division+0xbc>)
 80002dc:	f003 fff8 	bl	80042d0 <strcat>
		}
		xor_bits++;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	3301      	adds	r3, #1
 80002e4:	607b      	str	r3, [r7, #4]
	while(xor_bits < dividend_len){
 80002e6:	687a      	ldr	r2, [r7, #4]
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	429a      	cmp	r2, r3
 80002ec:	dbd1      	blt.n	8000292 <division+0x22>
	}

	if(tmp[0] == '1'){
 80002ee:	4b0f      	ldr	r3, [pc, #60]	; (800032c <division+0xbc>)
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	2b31      	cmp	r3, #49	; 0x31
 80002f4:	d108      	bne.n	8000308 <division+0x98>
		xor(key, tmp);
 80002f6:	490d      	ldr	r1, [pc, #52]	; (800032c <division+0xbc>)
 80002f8:	480d      	ldr	r0, [pc, #52]	; (8000330 <division+0xc0>)
 80002fa:	f7ff ff8b 	bl	8000214 <xor>
		strcpy(tmp, result);
 80002fe:	490f      	ldr	r1, [pc, #60]	; (800033c <division+0xcc>)
 8000300:	480a      	ldr	r0, [pc, #40]	; (800032c <division+0xbc>)
 8000302:	f004 f839 	bl	8004378 <strcpy>
 8000306:	e007      	b.n	8000318 <division+0xa8>
	}else{
		xor("0000", tmp);
 8000308:	4908      	ldr	r1, [pc, #32]	; (800032c <division+0xbc>)
 800030a:	480b      	ldr	r0, [pc, #44]	; (8000338 <division+0xc8>)
 800030c:	f7ff ff82 	bl	8000214 <xor>
		strcpy(tmp, result);
 8000310:	490a      	ldr	r1, [pc, #40]	; (800033c <division+0xcc>)
 8000312:	4806      	ldr	r0, [pc, #24]	; (800032c <division+0xbc>)
 8000314:	f004 f830 	bl	8004378 <strcpy>
	}
	strcpy(remain, tmp);
 8000318:	4904      	ldr	r1, [pc, #16]	; (800032c <division+0xbc>)
 800031a:	4809      	ldr	r0, [pc, #36]	; (8000340 <division+0xd0>)
 800031c:	f004 f82c 	bl	8004378 <strcpy>
}
 8000320:	bf00      	nop
 8000322:	3708      	adds	r7, #8
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	20000230 	.word	0x20000230
 800032c:	20000260 	.word	0x20000260
 8000330:	2000008c 	.word	0x2000008c
 8000334:	20000259 	.word	0x20000259
 8000338:	080043a0 	.word	0x080043a0
 800033c:	20000258 	.word	0x20000258
 8000340:	20000228 	.word	0x20000228

08000344 <str_rev>:

char* str_rev(char* str){
 8000344:	b580      	push	{r7, lr}
 8000346:	b086      	sub	sp, #24
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
	int len = strlen(str);
 800034c:	6878      	ldr	r0, [r7, #4]
 800034e:	f7ff ff41 	bl	80001d4 <strlen>
 8000352:	4603      	mov	r3, r0
 8000354:	60fb      	str	r3, [r7, #12]
	for(int i = 0, j = len - 1; i <= j; i++, j--){
 8000356:	2300      	movs	r3, #0
 8000358:	617b      	str	r3, [r7, #20]
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	3b01      	subs	r3, #1
 800035e:	613b      	str	r3, [r7, #16]
 8000360:	e017      	b.n	8000392 <str_rev+0x4e>
		char c = str[i];
 8000362:	697b      	ldr	r3, [r7, #20]
 8000364:	687a      	ldr	r2, [r7, #4]
 8000366:	4413      	add	r3, r2
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	72fb      	strb	r3, [r7, #11]
		str[i] = str[j];
 800036c:	693b      	ldr	r3, [r7, #16]
 800036e:	687a      	ldr	r2, [r7, #4]
 8000370:	441a      	add	r2, r3
 8000372:	697b      	ldr	r3, [r7, #20]
 8000374:	6879      	ldr	r1, [r7, #4]
 8000376:	440b      	add	r3, r1
 8000378:	7812      	ldrb	r2, [r2, #0]
 800037a:	701a      	strb	r2, [r3, #0]
		str[j] = c;
 800037c:	693b      	ldr	r3, [r7, #16]
 800037e:	687a      	ldr	r2, [r7, #4]
 8000380:	4413      	add	r3, r2
 8000382:	7afa      	ldrb	r2, [r7, #11]
 8000384:	701a      	strb	r2, [r3, #0]
	for(int i = 0, j = len - 1; i <= j; i++, j--){
 8000386:	697b      	ldr	r3, [r7, #20]
 8000388:	3301      	adds	r3, #1
 800038a:	617b      	str	r3, [r7, #20]
 800038c:	693b      	ldr	r3, [r7, #16]
 800038e:	3b01      	subs	r3, #1
 8000390:	613b      	str	r3, [r7, #16]
 8000392:	697a      	ldr	r2, [r7, #20]
 8000394:	693b      	ldr	r3, [r7, #16]
 8000396:	429a      	cmp	r2, r3
 8000398:	dde3      	ble.n	8000362 <str_rev+0x1e>
	}
	return str;
 800039a:	687b      	ldr	r3, [r7, #4]
}
 800039c:	4618      	mov	r0, r3
 800039e:	3718      	adds	r7, #24
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <toStr>:

void toStr(){
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
	uint32_t temp = RxData[1];
 80003aa:	4b13      	ldr	r3, [pc, #76]	; (80003f8 <toStr+0x54>)
 80003ac:	685b      	ldr	r3, [r3, #4]
 80003ae:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < 35; i++){
 80003b0:	2300      	movs	r3, #0
 80003b2:	603b      	str	r3, [r7, #0]
 80003b4:	e015      	b.n	80003e2 <toStr+0x3e>
		if(temp & 1){
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	f003 0301 	and.w	r3, r3, #1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d005      	beq.n	80003cc <toStr+0x28>
			data_str[i] = '1';
 80003c0:	4a0e      	ldr	r2, [pc, #56]	; (80003fc <toStr+0x58>)
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	4413      	add	r3, r2
 80003c6:	2231      	movs	r2, #49	; 0x31
 80003c8:	701a      	strb	r2, [r3, #0]
 80003ca:	e004      	b.n	80003d6 <toStr+0x32>
		}else{
			data_str[i] = '0';
 80003cc:	4a0b      	ldr	r2, [pc, #44]	; (80003fc <toStr+0x58>)
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	4413      	add	r3, r2
 80003d2:	2230      	movs	r2, #48	; 0x30
 80003d4:	701a      	strb	r2, [r3, #0]
		}
		temp = temp >> 1;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	085b      	lsrs	r3, r3, #1
 80003da:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < 35; i++){
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	3301      	adds	r3, #1
 80003e0:	603b      	str	r3, [r7, #0]
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	2b22      	cmp	r3, #34	; 0x22
 80003e6:	dde6      	ble.n	80003b6 <toStr+0x12>
	}
}
 80003e8:	bf00      	nop
 80003ea:	bf00      	nop
 80003ec:	370c      	adds	r7, #12
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	200001f0 	.word	0x200001f0
 80003fc:	20000200 	.word	0x20000200

08000400 <decode_crc>:

void decode_crc(){
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
	flag = false;
 8000404:	4b0e      	ldr	r3, [pc, #56]	; (8000440 <decode_crc+0x40>)
 8000406:	2200      	movs	r2, #0
 8000408:	701a      	strb	r2, [r3, #0]
	toStr();
 800040a:	f7ff ffcb 	bl	80003a4 <toStr>
	strcpy(appended_data, str_rev(data_str));
 800040e:	480d      	ldr	r0, [pc, #52]	; (8000444 <decode_crc+0x44>)
 8000410:	f7ff ff98 	bl	8000344 <str_rev>
 8000414:	4603      	mov	r3, r0
 8000416:	4619      	mov	r1, r3
 8000418:	480b      	ldr	r0, [pc, #44]	; (8000448 <decode_crc+0x48>)
 800041a:	f003 ffad 	bl	8004378 <strcpy>
	division();
 800041e:	f7ff ff27 	bl	8000270 <division>
	if(strchr(remain, '1') != NULL){
 8000422:	2131      	movs	r1, #49	; 0x31
 8000424:	4809      	ldr	r0, [pc, #36]	; (800044c <decode_crc+0x4c>)
 8000426:	f003 ff62 	bl	80042ee <strchr>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d005      	beq.n	800043c <decode_crc+0x3c>
			errors++;
 8000430:	4b07      	ldr	r3, [pc, #28]	; (8000450 <decode_crc+0x50>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	3301      	adds	r3, #1
 8000436:	b2da      	uxtb	r2, r3
 8000438:	4b05      	ldr	r3, [pc, #20]	; (8000450 <decode_crc+0x50>)
 800043a:	701a      	strb	r2, [r3, #0]
	}
}
 800043c:	bf00      	nop
 800043e:	bd80      	pop	{r7, pc}
 8000440:	200001fc 	.word	0x200001fc
 8000444:	20000200 	.word	0x20000200
 8000448:	20000230 	.word	0x20000230
 800044c:	20000228 	.word	0x20000228
 8000450:	200001fd 	.word	0x200001fd

08000454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000458:	f000 fb1a 	bl	8000a90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800045c:	f000 f88c 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000460:	f000 f96c 	bl	800073c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000464:	f000 f93a 	bl	80006dc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000468:	f000 f908 	bl	800067c <MX_USART1_UART_Init>
  MX_CRC_Init();
 800046c:	f000 f8d8 	bl	8000620 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

 // HAL_TIM_Base_Start_IT(&htim16);

  HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t*)RxData, sizeof(RxData));
 8000470:	220c      	movs	r2, #12
 8000472:	4934      	ldr	r1, [pc, #208]	; (8000544 <main+0xf0>)
 8000474:	4834      	ldr	r0, [pc, #208]	; (8000548 <main+0xf4>)
 8000476:	f003 fecf 	bl	8004218 <HAL_UARTEx_ReceiveToIdle_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(flag){
 800047a:	4b34      	ldr	r3, [pc, #208]	; (800054c <main+0xf8>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d055      	beq.n	800052e <main+0xda>

		  decode_crc();
 8000482:	f7ff ffbd 	bl	8000400 <decode_crc>

	   	  if(RxData[0] == 1){								//red
 8000486:	4b2f      	ldr	r3, [pc, #188]	; (8000544 <main+0xf0>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	2b01      	cmp	r3, #1
 800048c:	d10d      	bne.n	80004aa <main+0x56>
	   		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2);
 800048e:	2104      	movs	r1, #4
 8000490:	482f      	ldr	r0, [pc, #188]	; (8000550 <main+0xfc>)
 8000492:	f000 ff81 	bl	8001398 <HAL_GPIO_TogglePin>
	   		  RxData[0] = 0;
 8000496:	4b2b      	ldr	r3, [pc, #172]	; (8000544 <main+0xf0>)
 8000498:	2200      	movs	r2, #0
 800049a:	601a      	str	r2, [r3, #0]
	   		  HAL_UART_Transmit(&huart2, led_a, 20, 10);
 800049c:	230a      	movs	r3, #10
 800049e:	2214      	movs	r2, #20
 80004a0:	492c      	ldr	r1, [pc, #176]	; (8000554 <main+0x100>)
 80004a2:	482d      	ldr	r0, [pc, #180]	; (8000558 <main+0x104>)
 80004a4:	f002 fc88 	bl	8002db8 <HAL_UART_Transmit>
 80004a8:	e041      	b.n	800052e <main+0xda>
	   	  }else if(RxData[0] == 2){							//green
 80004aa:	4b26      	ldr	r3, [pc, #152]	; (8000544 <main+0xf0>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	2b02      	cmp	r3, #2
 80004b0:	d10d      	bne.n	80004ce <main+0x7a>
	   		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 80004b2:	2108      	movs	r1, #8
 80004b4:	4826      	ldr	r0, [pc, #152]	; (8000550 <main+0xfc>)
 80004b6:	f000 ff6f 	bl	8001398 <HAL_GPIO_TogglePin>
	   		  RxData[0] = 0;
 80004ba:	4b22      	ldr	r3, [pc, #136]	; (8000544 <main+0xf0>)
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
	   		  HAL_UART_Transmit(&huart2, led_d, 20, 10);
 80004c0:	230a      	movs	r3, #10
 80004c2:	2214      	movs	r2, #20
 80004c4:	4925      	ldr	r1, [pc, #148]	; (800055c <main+0x108>)
 80004c6:	4824      	ldr	r0, [pc, #144]	; (8000558 <main+0x104>)
 80004c8:	f002 fc76 	bl	8002db8 <HAL_UART_Transmit>
 80004cc:	e02f      	b.n	800052e <main+0xda>
	   	  }else if(RxData[0] == 3){							//yellow
 80004ce:	4b1d      	ldr	r3, [pc, #116]	; (8000544 <main+0xf0>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	2b03      	cmp	r3, #3
 80004d4:	d10e      	bne.n	80004f4 <main+0xa0>
	   		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80004d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004da:	4821      	ldr	r0, [pc, #132]	; (8000560 <main+0x10c>)
 80004dc:	f000 ff5c 	bl	8001398 <HAL_GPIO_TogglePin>
	   		  RxData[0] = 0;
 80004e0:	4b18      	ldr	r3, [pc, #96]	; (8000544 <main+0xf0>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
	   		  HAL_UART_Transmit(&huart2, led_c, 20, 10);
 80004e6:	230a      	movs	r3, #10
 80004e8:	2214      	movs	r2, #20
 80004ea:	491e      	ldr	r1, [pc, #120]	; (8000564 <main+0x110>)
 80004ec:	481a      	ldr	r0, [pc, #104]	; (8000558 <main+0x104>)
 80004ee:	f002 fc63 	bl	8002db8 <HAL_UART_Transmit>
 80004f2:	e01c      	b.n	800052e <main+0xda>
	   	  }else if(RxData[0] == 4){							//blue
 80004f4:	4b13      	ldr	r3, [pc, #76]	; (8000544 <main+0xf0>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2b04      	cmp	r3, #4
 80004fa:	d10e      	bne.n	800051a <main+0xc6>
	   		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 80004fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000500:	4817      	ldr	r0, [pc, #92]	; (8000560 <main+0x10c>)
 8000502:	f000 ff49 	bl	8001398 <HAL_GPIO_TogglePin>
	   		  RxData[0] = 0;
 8000506:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <main+0xf0>)
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
	   		  HAL_UART_Transmit(&huart2, led_b, 20, 10);
 800050c:	230a      	movs	r3, #10
 800050e:	2214      	movs	r2, #20
 8000510:	4915      	ldr	r1, [pc, #84]	; (8000568 <main+0x114>)
 8000512:	4811      	ldr	r0, [pc, #68]	; (8000558 <main+0x104>)
 8000514:	f002 fc50 	bl	8002db8 <HAL_UART_Transmit>
 8000518:	e009      	b.n	800052e <main+0xda>
	   	  }else if(RxData[0] == 0){
 800051a:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <main+0xf0>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d105      	bne.n	800052e <main+0xda>
	   		  HAL_UART_Transmit(&huart2, buf, 20, 10);
 8000522:	230a      	movs	r3, #10
 8000524:	2214      	movs	r2, #20
 8000526:	4911      	ldr	r1, [pc, #68]	; (800056c <main+0x118>)
 8000528:	480b      	ldr	r0, [pc, #44]	; (8000558 <main+0x104>)
 800052a:	f002 fc45 	bl	8002db8 <HAL_UART_Transmit>
	   	  }
	  }
	  if(errors > 10){
 800052e:	4b10      	ldr	r3, [pc, #64]	; (8000570 <main+0x11c>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2b0a      	cmp	r3, #10
 8000534:	d9a1      	bls.n	800047a <main+0x26>
		  HAL_UART_Transmit(&huart2, err_max, 40, 10);
 8000536:	230a      	movs	r3, #10
 8000538:	2228      	movs	r2, #40	; 0x28
 800053a:	490e      	ldr	r1, [pc, #56]	; (8000574 <main+0x120>)
 800053c:	4806      	ldr	r0, [pc, #24]	; (8000558 <main+0x104>)
 800053e:	f002 fc3b 	bl	8002db8 <HAL_UART_Transmit>
	  if(flag){
 8000542:	e79a      	b.n	800047a <main+0x26>
 8000544:	200001f0 	.word	0x200001f0
 8000548:	200000e0 	.word	0x200000e0
 800054c:	200001fc 	.word	0x200001fc
 8000550:	48000800 	.word	0x48000800
 8000554:	20000014 	.word	0x20000014
 8000558:	20000168 	.word	0x20000168
 800055c:	20000050 	.word	0x20000050
 8000560:	48000400 	.word	0x48000400
 8000564:	2000003c 	.word	0x2000003c
 8000568:	20000028 	.word	0x20000028
 800056c:	20000000 	.word	0x20000000
 8000570:	200001fd 	.word	0x200001fd
 8000574:	20000064 	.word	0x20000064

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b0a6      	sub	sp, #152	; 0x98
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000582:	2228      	movs	r2, #40	; 0x28
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f003 fe9a 	bl	80042c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2258      	movs	r2, #88	; 0x58
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 fe8c 	bl	80042c0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a8:	2302      	movs	r3, #2
 80005aa:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ac:	2301      	movs	r3, #1
 80005ae:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b0:	2310      	movs	r3, #16
 80005b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b6:	2300      	movs	r3, #0
 80005b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 ff03 	bl	80013cc <HAL_RCC_OscConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005cc:	f000 f918 	bl	8000800 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d0:	230f      	movs	r3, #15
 80005d2:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005d4:	2300      	movs	r3, #0
 80005d6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f001 ff42 	bl	8002474 <HAL_RCC_ClockConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005f6:	f000 f903 	bl	8000800 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80005fa:	2303      	movs	r3, #3
 80005fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	4618      	mov	r0, r3
 800060a:	f002 f969 	bl	80028e0 <HAL_RCCEx_PeriphCLKConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000614:	f000 f8f4 	bl	8000800 <Error_Handler>
  }
}
 8000618:	bf00      	nop
 800061a:	3798      	adds	r7, #152	; 0x98
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <MX_CRC_Init+0x50>)
 8000626:	4a13      	ldr	r2, [pc, #76]	; (8000674 <MX_CRC_Init+0x54>)
 8000628:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_CRC_Init+0x50>)
 800062c:	2201      	movs	r2, #1
 800062e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_CRC_Init+0x50>)
 8000632:	2201      	movs	r2, #1
 8000634:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 79764919;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_CRC_Init+0x50>)
 8000638:	4a0f      	ldr	r2, [pc, #60]	; (8000678 <MX_CRC_Init+0x58>)
 800063a:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_32B;
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_CRC_Init+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <MX_CRC_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_CRC_Init+0x50>)
 800064a:	2200      	movs	r2, #0
 800064c:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <MX_CRC_Init+0x50>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_CRC_Init+0x50>)
 8000656:	2203      	movs	r2, #3
 8000658:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_CRC_Init+0x50>)
 800065c:	f000 fb90 	bl	8000d80 <HAL_CRC_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 8000666:	f000 f8cb 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	200000bc 	.word	0x200000bc
 8000674:	40023000 	.word	0x40023000
 8000678:	04c11db7 	.word	0x04c11db7

0800067c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000680:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 8000682:	4a15      	ldr	r2, [pc, #84]	; (80006d8 <MX_USART1_UART_Init+0x5c>)
 8000684:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000686:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 8000688:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800068c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 80006a2:	220c      	movs	r2, #12
 80006a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 80006c0:	f002 fb2c 	bl	8002d1c <HAL_UART_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006ca:	f000 f899 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	200000e0 	.word	0x200000e0
 80006d8:	40013800 	.word	0x40013800

080006dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e0:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_USART2_UART_Init+0x58>)
 80006e2:	4a15      	ldr	r2, [pc, #84]	; (8000738 <MX_USART2_UART_Init+0x5c>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006e6:	4b13      	ldr	r3, [pc, #76]	; (8000734 <MX_USART2_UART_Init+0x58>)
 80006e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_USART2_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_USART2_UART_Init+0x58>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_USART2_UART_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_USART2_UART_Init+0x58>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <MX_USART2_UART_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_USART2_UART_Init+0x58>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <MX_USART2_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_USART2_UART_Init+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_USART2_UART_Init+0x58>)
 8000720:	f002 fafc 	bl	8002d1c <HAL_UART_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800072a:	f000 f869 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000168 	.word	0x20000168
 8000738:	40004400 	.word	0x40004400

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b088      	sub	sp, #32
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	4b28      	ldr	r3, [pc, #160]	; (80007f4 <MX_GPIO_Init+0xb8>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	4a27      	ldr	r2, [pc, #156]	; (80007f4 <MX_GPIO_Init+0xb8>)
 8000758:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800075c:	6153      	str	r3, [r2, #20]
 800075e:	4b25      	ldr	r3, [pc, #148]	; (80007f4 <MX_GPIO_Init+0xb8>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	4b22      	ldr	r3, [pc, #136]	; (80007f4 <MX_GPIO_Init+0xb8>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	4a21      	ldr	r2, [pc, #132]	; (80007f4 <MX_GPIO_Init+0xb8>)
 8000770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000774:	6153      	str	r3, [r2, #20]
 8000776:	4b1f      	ldr	r3, [pc, #124]	; (80007f4 <MX_GPIO_Init+0xb8>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <MX_GPIO_Init+0xb8>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	4a1b      	ldr	r2, [pc, #108]	; (80007f4 <MX_GPIO_Init+0xb8>)
 8000788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800078c:	6153      	str	r3, [r2, #20]
 800078e:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <MX_GPIO_Init+0xb8>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	210c      	movs	r1, #12
 800079e:	4816      	ldr	r0, [pc, #88]	; (80007f8 <MX_GPIO_Init+0xbc>)
 80007a0:	f000 fde2 	bl	8001368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80007aa:	4814      	ldr	r0, [pc, #80]	; (80007fc <MX_GPIO_Init+0xc0>)
 80007ac:	f000 fddc 	bl	8001368 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007b0:	230c      	movs	r3, #12
 80007b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	4619      	mov	r1, r3
 80007c6:	480c      	ldr	r0, [pc, #48]	; (80007f8 <MX_GPIO_Init+0xbc>)
 80007c8:	f000 fc44 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80007cc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80007d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	4619      	mov	r1, r3
 80007e4:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_GPIO_Init+0xc0>)
 80007e6:	f000 fc35 	bl	8001054 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ea:	bf00      	nop
 80007ec:	3720      	adds	r7, #32
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40021000 	.word	0x40021000
 80007f8:	48000800 	.word	0x48000800
 80007fc:	48000400 	.word	0x48000400

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000808:	e7fe      	b.n	8000808 <Error_Handler+0x8>
	...

0800080c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <HAL_MspInit+0x44>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	4a0e      	ldr	r2, [pc, #56]	; (8000850 <HAL_MspInit+0x44>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6193      	str	r3, [r2, #24]
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <HAL_MspInit+0x44>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <HAL_MspInit+0x44>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	4a08      	ldr	r2, [pc, #32]	; (8000850 <HAL_MspInit+0x44>)
 8000830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000834:	61d3      	str	r3, [r2, #28]
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_MspInit+0x44>)
 8000838:	69db      	ldr	r3, [r3, #28]
 800083a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	40021000 	.word	0x40021000

08000854 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a0a      	ldr	r2, [pc, #40]	; (800088c <HAL_CRC_MspInit+0x38>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d10b      	bne.n	800087e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000866:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <HAL_CRC_MspInit+0x3c>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	4a09      	ldr	r2, [pc, #36]	; (8000890 <HAL_CRC_MspInit+0x3c>)
 800086c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000870:	6153      	str	r3, [r2, #20]
 8000872:	4b07      	ldr	r3, [pc, #28]	; (8000890 <HAL_CRC_MspInit+0x3c>)
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800087e:	bf00      	nop
 8000880:	3714      	adds	r7, #20
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40023000 	.word	0x40023000
 8000890:	40021000 	.word	0x40021000

08000894 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08c      	sub	sp, #48	; 0x30
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a36      	ldr	r2, [pc, #216]	; (800098c <HAL_UART_MspInit+0xf8>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d130      	bne.n	8000918 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008b6:	4b36      	ldr	r3, [pc, #216]	; (8000990 <HAL_UART_MspInit+0xfc>)
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	4a35      	ldr	r2, [pc, #212]	; (8000990 <HAL_UART_MspInit+0xfc>)
 80008bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c0:	6193      	str	r3, [r2, #24]
 80008c2:	4b33      	ldr	r3, [pc, #204]	; (8000990 <HAL_UART_MspInit+0xfc>)
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ca:	61bb      	str	r3, [r7, #24]
 80008cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	4b30      	ldr	r3, [pc, #192]	; (8000990 <HAL_UART_MspInit+0xfc>)
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	4a2f      	ldr	r2, [pc, #188]	; (8000990 <HAL_UART_MspInit+0xfc>)
 80008d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008d8:	6153      	str	r3, [r2, #20]
 80008da:	4b2d      	ldr	r3, [pc, #180]	; (8000990 <HAL_UART_MspInit+0xfc>)
 80008dc:	695b      	ldr	r3, [r3, #20]
 80008de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80008e6:	2330      	movs	r3, #48	; 0x30
 80008e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f2:	2303      	movs	r3, #3
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008f6:	2307      	movs	r3, #7
 80008f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4824      	ldr	r0, [pc, #144]	; (8000994 <HAL_UART_MspInit+0x100>)
 8000902:	f000 fba7 	bl	8001054 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2100      	movs	r1, #0
 800090a:	2025      	movs	r0, #37	; 0x25
 800090c:	f000 fa01 	bl	8000d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000910:	2025      	movs	r0, #37	; 0x25
 8000912:	f000 fa1a 	bl	8000d4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000916:	e035      	b.n	8000984 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a1e      	ldr	r2, [pc, #120]	; (8000998 <HAL_UART_MspInit+0x104>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d130      	bne.n	8000984 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000922:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <HAL_UART_MspInit+0xfc>)
 8000924:	69db      	ldr	r3, [r3, #28]
 8000926:	4a1a      	ldr	r2, [pc, #104]	; (8000990 <HAL_UART_MspInit+0xfc>)
 8000928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800092c:	61d3      	str	r3, [r2, #28]
 800092e:	4b18      	ldr	r3, [pc, #96]	; (8000990 <HAL_UART_MspInit+0xfc>)
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <HAL_UART_MspInit+0xfc>)
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	4a14      	ldr	r2, [pc, #80]	; (8000990 <HAL_UART_MspInit+0xfc>)
 8000940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000944:	6153      	str	r3, [r2, #20]
 8000946:	4b12      	ldr	r3, [pc, #72]	; (8000990 <HAL_UART_MspInit+0xfc>)
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000952:	230c      	movs	r3, #12
 8000954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800095e:	2303      	movs	r3, #3
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000962:	2307      	movs	r3, #7
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000970:	f000 fb70 	bl	8001054 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000974:	2200      	movs	r2, #0
 8000976:	2100      	movs	r1, #0
 8000978:	2026      	movs	r0, #38	; 0x26
 800097a:	f000 f9ca 	bl	8000d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800097e:	2026      	movs	r0, #38	; 0x26
 8000980:	f000 f9e3 	bl	8000d4a <HAL_NVIC_EnableIRQ>
}
 8000984:	bf00      	nop
 8000986:	3730      	adds	r7, #48	; 0x30
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40013800 	.word	0x40013800
 8000990:	40021000 	.word	0x40021000
 8000994:	48000800 	.word	0x48000800
 8000998:	40004400 	.word	0x40004400

0800099c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a0:	e7fe      	b.n	80009a0 <NMI_Handler+0x4>

080009a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <HardFault_Handler+0x4>

080009a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <MemManage_Handler+0x4>

080009ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <BusFault_Handler+0x4>

080009b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <UsageFault_Handler+0x4>

080009ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e8:	f000 f898 	bl	8000b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009f4:	4802      	ldr	r0, [pc, #8]	; (8000a00 <USART1_IRQHandler+0x10>)
 80009f6:	f002 fa69 	bl	8002ecc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200000e0 	.word	0x200000e0

08000a04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a08:	4802      	ldr	r0, [pc, #8]	; (8000a14 <USART2_IRQHandler+0x10>)
 8000a0a:	f002 fa5f 	bl	8002ecc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000168 	.word	0x20000168

08000a18 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <SystemInit+0x20>)
 8000a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a22:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <SystemInit+0x20>)
 8000a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a74 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a40:	f7ff ffea 	bl	8000a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a44:	480c      	ldr	r0, [pc, #48]	; (8000a78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a46:	490d      	ldr	r1, [pc, #52]	; (8000a7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a48:	4a0d      	ldr	r2, [pc, #52]	; (8000a80 <LoopForever+0xe>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a4c:	e002      	b.n	8000a54 <LoopCopyDataInit>

08000a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a52:	3304      	adds	r3, #4

08000a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a58:	d3f9      	bcc.n	8000a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5a:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a5c:	4c0a      	ldr	r4, [pc, #40]	; (8000a88 <LoopForever+0x16>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a60:	e001      	b.n	8000a66 <LoopFillZerobss>

08000a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a64:	3204      	adds	r2, #4

08000a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a68:	d3fb      	bcc.n	8000a62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a6a:	f003 fc61 	bl	8004330 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a6e:	f7ff fcf1 	bl	8000454 <main>

08000a72 <LoopForever>:

LoopForever:
    b LoopForever
 8000a72:	e7fe      	b.n	8000a72 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a74:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a7c:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8000a80:	080043e8 	.word	0x080043e8
  ldr r2, =_sbss
 8000a84:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8000a88:	20000270 	.word	0x20000270

08000a8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a8c:	e7fe      	b.n	8000a8c <ADC1_2_IRQHandler>
	...

08000a90 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_Init+0x28>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <HAL_Init+0x28>)
 8000a9a:	f043 0310 	orr.w	r3, r3, #16
 8000a9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 f92b 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa6:	200f      	movs	r0, #15
 8000aa8:	f000 f808 	bl	8000abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aac:	f7ff feae 	bl	800080c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40022000 	.word	0x40022000

08000abc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_InitTick+0x54>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_InitTick+0x58>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	4619      	mov	r1, r3
 8000ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 f943 	bl	8000d66 <HAL_SYSTICK_Config>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e00e      	b.n	8000b08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2b0f      	cmp	r3, #15
 8000aee:	d80a      	bhi.n	8000b06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af0:	2200      	movs	r2, #0
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	f04f 30ff 	mov.w	r0, #4294967295
 8000af8:	f000 f90b 	bl	8000d12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000afc:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <HAL_InitTick+0x5c>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b02:	2300      	movs	r3, #0
 8000b04:	e000      	b.n	8000b08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000094 	.word	0x20000094
 8000b14:	2000009c 	.word	0x2000009c
 8000b18:	20000098 	.word	0x20000098

08000b1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_IncTick+0x20>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_IncTick+0x24>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <HAL_IncTick+0x24>)
 8000b2e:	6013      	str	r3, [r2, #0]
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	2000009c 	.word	0x2000009c
 8000b40:	2000026c 	.word	0x2000026c

08000b44 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <HAL_GetTick+0x14>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	2000026c 	.word	0x2000026c

08000b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8e:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	60d3      	str	r3, [r2, #12]
}
 8000b94:	bf00      	nop
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba8:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <__NVIC_GetPriorityGrouping+0x18>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	0a1b      	lsrs	r3, r3, #8
 8000bae:	f003 0307 	and.w	r3, r3, #7
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	db0b      	blt.n	8000bea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	f003 021f 	and.w	r2, r3, #31
 8000bd8:	4907      	ldr	r1, [pc, #28]	; (8000bf8 <__NVIC_EnableIRQ+0x38>)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	095b      	lsrs	r3, r3, #5
 8000be0:	2001      	movs	r0, #1
 8000be2:	fa00 f202 	lsl.w	r2, r0, r2
 8000be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000e100 	.word	0xe000e100

08000bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	6039      	str	r1, [r7, #0]
 8000c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	db0a      	blt.n	8000c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	490c      	ldr	r1, [pc, #48]	; (8000c48 <__NVIC_SetPriority+0x4c>)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	0112      	lsls	r2, r2, #4
 8000c1c:	b2d2      	uxtb	r2, r2
 8000c1e:	440b      	add	r3, r1
 8000c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c24:	e00a      	b.n	8000c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4908      	ldr	r1, [pc, #32]	; (8000c4c <__NVIC_SetPriority+0x50>)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	f003 030f 	and.w	r3, r3, #15
 8000c32:	3b04      	subs	r3, #4
 8000c34:	0112      	lsls	r2, r2, #4
 8000c36:	b2d2      	uxtb	r2, r2
 8000c38:	440b      	add	r3, r1
 8000c3a:	761a      	strb	r2, [r3, #24]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000e100 	.word	0xe000e100
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b089      	sub	sp, #36	; 0x24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	f1c3 0307 	rsb	r3, r3, #7
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	bf28      	it	cs
 8000c6e:	2304      	movcs	r3, #4
 8000c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3304      	adds	r3, #4
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d902      	bls.n	8000c80 <NVIC_EncodePriority+0x30>
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3b03      	subs	r3, #3
 8000c7e:	e000      	b.n	8000c82 <NVIC_EncodePriority+0x32>
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	f04f 32ff 	mov.w	r2, #4294967295
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43da      	mvns	r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	401a      	ands	r2, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c98:	f04f 31ff 	mov.w	r1, #4294967295
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	43d9      	mvns	r1, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	4313      	orrs	r3, r2
         );
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3724      	adds	r7, #36	; 0x24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
	...

08000cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc8:	d301      	bcc.n	8000cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00f      	b.n	8000cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <SysTick_Config+0x40>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f7ff ff8e 	bl	8000bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce8:	2207      	movs	r2, #7
 8000cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	e000e010 	.word	0xe000e010

08000cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff ff29 	bl	8000b5c <__NVIC_SetPriorityGrouping>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
 8000d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d24:	f7ff ff3e 	bl	8000ba4 <__NVIC_GetPriorityGrouping>
 8000d28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	68b9      	ldr	r1, [r7, #8]
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	f7ff ff8e 	bl	8000c50 <NVIC_EncodePriority>
 8000d34:	4602      	mov	r2, r0
 8000d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff5d 	bl	8000bfc <__NVIC_SetPriority>
}
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	4603      	mov	r3, r0
 8000d52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff31 	bl	8000bc0 <__NVIC_EnableIRQ>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff ffa2 	bl	8000cb8 <SysTick_Config>
 8000d74:	4603      	mov	r3, r0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d101      	bne.n	8000d92 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e054      	b.n	8000e3c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	7f5b      	ldrb	r3, [r3, #29]
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d105      	bne.n	8000da8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff fd56 	bl	8000854 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2202      	movs	r2, #2
 8000dac:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	791b      	ldrb	r3, [r3, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d10c      	bne.n	8000dd0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a22      	ldr	r2, [pc, #136]	; (8000e44 <HAL_CRC_Init+0xc4>)
 8000dbc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	689a      	ldr	r2, [r3, #8]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f022 0218 	bic.w	r2, r2, #24
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	e00c      	b.n	8000dea <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6899      	ldr	r1, [r3, #8]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f000 f834 	bl	8000e48 <HAL_CRCEx_Polynomial_Set>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e028      	b.n	8000e3c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	795b      	ldrb	r3, [r3, #5]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d105      	bne.n	8000dfe <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f04f 32ff 	mov.w	r2, #4294967295
 8000dfa:	611a      	str	r2, [r3, #16]
 8000dfc:	e004      	b.n	8000e08 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	6912      	ldr	r2, [r2, #16]
 8000e06:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	695a      	ldr	r2, [r3, #20]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	699a      	ldr	r2, [r3, #24]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	430a      	orrs	r2, r1
 8000e32:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2201      	movs	r2, #1
 8000e38:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000e3a:	2300      	movs	r3, #0
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	04c11db7 	.word	0x04c11db7

08000e48 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b087      	sub	sp, #28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e54:	2300      	movs	r3, #0
 8000e56:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000e58:	231f      	movs	r3, #31
 8000e5a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d102      	bne.n	8000e6c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	75fb      	strb	r3, [r7, #23]
 8000e6a:	e063      	b.n	8000f34 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000e6c:	bf00      	nop
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	1e5a      	subs	r2, r3, #1
 8000e72:	613a      	str	r2, [r7, #16]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d009      	beq.n	8000e8c <HAL_CRCEx_Polynomial_Set+0x44>
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	f003 031f 	and.w	r3, r3, #31
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	fa22 f303 	lsr.w	r3, r2, r3
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d0f0      	beq.n	8000e6e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b18      	cmp	r3, #24
 8000e90:	d846      	bhi.n	8000f20 <HAL_CRCEx_Polynomial_Set+0xd8>
 8000e92:	a201      	add	r2, pc, #4	; (adr r2, 8000e98 <HAL_CRCEx_Polynomial_Set+0x50>)
 8000e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e98:	08000f27 	.word	0x08000f27
 8000e9c:	08000f21 	.word	0x08000f21
 8000ea0:	08000f21 	.word	0x08000f21
 8000ea4:	08000f21 	.word	0x08000f21
 8000ea8:	08000f21 	.word	0x08000f21
 8000eac:	08000f21 	.word	0x08000f21
 8000eb0:	08000f21 	.word	0x08000f21
 8000eb4:	08000f21 	.word	0x08000f21
 8000eb8:	08000f15 	.word	0x08000f15
 8000ebc:	08000f21 	.word	0x08000f21
 8000ec0:	08000f21 	.word	0x08000f21
 8000ec4:	08000f21 	.word	0x08000f21
 8000ec8:	08000f21 	.word	0x08000f21
 8000ecc:	08000f21 	.word	0x08000f21
 8000ed0:	08000f21 	.word	0x08000f21
 8000ed4:	08000f21 	.word	0x08000f21
 8000ed8:	08000f09 	.word	0x08000f09
 8000edc:	08000f21 	.word	0x08000f21
 8000ee0:	08000f21 	.word	0x08000f21
 8000ee4:	08000f21 	.word	0x08000f21
 8000ee8:	08000f21 	.word	0x08000f21
 8000eec:	08000f21 	.word	0x08000f21
 8000ef0:	08000f21 	.word	0x08000f21
 8000ef4:	08000f21 	.word	0x08000f21
 8000ef8:	08000efd 	.word	0x08000efd
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	2b06      	cmp	r3, #6
 8000f00:	d913      	bls.n	8000f2a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000f06:	e010      	b.n	8000f2a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	2b07      	cmp	r3, #7
 8000f0c:	d90f      	bls.n	8000f2e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000f12:	e00c      	b.n	8000f2e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	2b0f      	cmp	r3, #15
 8000f18:	d90b      	bls.n	8000f32 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000f1e:	e008      	b.n	8000f32 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	75fb      	strb	r3, [r7, #23]
        break;
 8000f24:	e006      	b.n	8000f34 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000f26:	bf00      	nop
 8000f28:	e004      	b.n	8000f34 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000f2a:	bf00      	nop
 8000f2c:	e002      	b.n	8000f34 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000f2e:	bf00      	nop
 8000f30:	e000      	b.n	8000f34 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000f32:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8000f34:	7dfb      	ldrb	r3, [r7, #23]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d10d      	bne.n	8000f56 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	f023 0118 	bic.w	r1, r3, #24
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	430a      	orrs	r2, r1
 8000f54:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	371c      	adds	r7, #28
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d008      	beq.n	8000f88 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2204      	movs	r2, #4
 8000f7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e020      	b.n	8000fca <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f022 020e 	bic.w	r2, r2, #14
 8000f96:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f022 0201 	bic.w	r2, r2, #1
 8000fa6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b084      	sub	sp, #16
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d005      	beq.n	8000ff8 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2204      	movs	r2, #4
 8000ff0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	73fb      	strb	r3, [r7, #15]
 8000ff6:	e027      	b.n	8001048 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 020e 	bic.w	r2, r2, #14
 8001006:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f022 0201 	bic.w	r2, r2, #1
 8001016:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001020:	2101      	movs	r1, #1
 8001022:	fa01 f202 	lsl.w	r2, r1, r2
 8001026:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2201      	movs	r2, #1
 800102c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	4798      	blx	r3
    } 
  }
  return status;
 8001048:	7bfb      	ldrb	r3, [r7, #15]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001054:	b480      	push	{r7}
 8001056:	b087      	sub	sp, #28
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001062:	e160      	b.n	8001326 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	2101      	movs	r1, #1
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	fa01 f303 	lsl.w	r3, r1, r3
 8001070:	4013      	ands	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2b00      	cmp	r3, #0
 8001078:	f000 8152 	beq.w	8001320 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 0303 	and.w	r3, r3, #3
 8001084:	2b01      	cmp	r3, #1
 8001086:	d005      	beq.n	8001094 <HAL_GPIO_Init+0x40>
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 0303 	and.w	r3, r3, #3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d130      	bne.n	80010f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	2203      	movs	r2, #3
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	68da      	ldr	r2, [r3, #12]
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ca:	2201      	movs	r2, #1
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	091b      	lsrs	r3, r3, #4
 80010e0:	f003 0201 	and.w	r2, r3, #1
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	2b03      	cmp	r3, #3
 8001100:	d017      	beq.n	8001132 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	2203      	movs	r2, #3
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f003 0303 	and.w	r3, r3, #3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d123      	bne.n	8001186 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	08da      	lsrs	r2, r3, #3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3208      	adds	r2, #8
 8001146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800114a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	220f      	movs	r2, #15
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	691a      	ldr	r2, [r3, #16]
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	f003 0307 	and.w	r3, r3, #7
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	08da      	lsrs	r2, r3, #3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3208      	adds	r2, #8
 8001180:	6939      	ldr	r1, [r7, #16]
 8001182:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	2203      	movs	r2, #3
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 0203 	and.w	r2, r3, #3
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f000 80ac 	beq.w	8001320 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c8:	4b5e      	ldr	r3, [pc, #376]	; (8001344 <HAL_GPIO_Init+0x2f0>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	4a5d      	ldr	r2, [pc, #372]	; (8001344 <HAL_GPIO_Init+0x2f0>)
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	6193      	str	r3, [r2, #24]
 80011d4:	4b5b      	ldr	r3, [pc, #364]	; (8001344 <HAL_GPIO_Init+0x2f0>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011e0:	4a59      	ldr	r2, [pc, #356]	; (8001348 <HAL_GPIO_Init+0x2f4>)
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	089b      	lsrs	r3, r3, #2
 80011e6:	3302      	adds	r3, #2
 80011e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	220f      	movs	r2, #15
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800120a:	d025      	beq.n	8001258 <HAL_GPIO_Init+0x204>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a4f      	ldr	r2, [pc, #316]	; (800134c <HAL_GPIO_Init+0x2f8>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d01f      	beq.n	8001254 <HAL_GPIO_Init+0x200>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a4e      	ldr	r2, [pc, #312]	; (8001350 <HAL_GPIO_Init+0x2fc>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d019      	beq.n	8001250 <HAL_GPIO_Init+0x1fc>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a4d      	ldr	r2, [pc, #308]	; (8001354 <HAL_GPIO_Init+0x300>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d013      	beq.n	800124c <HAL_GPIO_Init+0x1f8>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a4c      	ldr	r2, [pc, #304]	; (8001358 <HAL_GPIO_Init+0x304>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d00d      	beq.n	8001248 <HAL_GPIO_Init+0x1f4>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a4b      	ldr	r2, [pc, #300]	; (800135c <HAL_GPIO_Init+0x308>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d007      	beq.n	8001244 <HAL_GPIO_Init+0x1f0>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a4a      	ldr	r2, [pc, #296]	; (8001360 <HAL_GPIO_Init+0x30c>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d101      	bne.n	8001240 <HAL_GPIO_Init+0x1ec>
 800123c:	2306      	movs	r3, #6
 800123e:	e00c      	b.n	800125a <HAL_GPIO_Init+0x206>
 8001240:	2307      	movs	r3, #7
 8001242:	e00a      	b.n	800125a <HAL_GPIO_Init+0x206>
 8001244:	2305      	movs	r3, #5
 8001246:	e008      	b.n	800125a <HAL_GPIO_Init+0x206>
 8001248:	2304      	movs	r3, #4
 800124a:	e006      	b.n	800125a <HAL_GPIO_Init+0x206>
 800124c:	2303      	movs	r3, #3
 800124e:	e004      	b.n	800125a <HAL_GPIO_Init+0x206>
 8001250:	2302      	movs	r3, #2
 8001252:	e002      	b.n	800125a <HAL_GPIO_Init+0x206>
 8001254:	2301      	movs	r3, #1
 8001256:	e000      	b.n	800125a <HAL_GPIO_Init+0x206>
 8001258:	2300      	movs	r3, #0
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	f002 0203 	and.w	r2, r2, #3
 8001260:	0092      	lsls	r2, r2, #2
 8001262:	4093      	lsls	r3, r2
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4313      	orrs	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800126a:	4937      	ldr	r1, [pc, #220]	; (8001348 <HAL_GPIO_Init+0x2f4>)
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	089b      	lsrs	r3, r3, #2
 8001270:	3302      	adds	r3, #2
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001278:	4b3a      	ldr	r3, [pc, #232]	; (8001364 <HAL_GPIO_Init+0x310>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	43db      	mvns	r3, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800129c:	4a31      	ldr	r2, [pc, #196]	; (8001364 <HAL_GPIO_Init+0x310>)
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012a2:	4b30      	ldr	r3, [pc, #192]	; (8001364 <HAL_GPIO_Init+0x310>)
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4013      	ands	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012c6:	4a27      	ldr	r2, [pc, #156]	; (8001364 <HAL_GPIO_Init+0x310>)
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012cc:	4b25      	ldr	r3, [pc, #148]	; (8001364 <HAL_GPIO_Init+0x310>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012f0:	4a1c      	ldr	r2, [pc, #112]	; (8001364 <HAL_GPIO_Init+0x310>)
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012f6:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <HAL_GPIO_Init+0x310>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	43db      	mvns	r3, r3
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4313      	orrs	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800131a:	4a12      	ldr	r2, [pc, #72]	; (8001364 <HAL_GPIO_Init+0x310>)
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	3301      	adds	r3, #1
 8001324:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	fa22 f303 	lsr.w	r3, r2, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	f47f ae97 	bne.w	8001064 <HAL_GPIO_Init+0x10>
  }
}
 8001336:	bf00      	nop
 8001338:	bf00      	nop
 800133a:	371c      	adds	r7, #28
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	40021000 	.word	0x40021000
 8001348:	40010000 	.word	0x40010000
 800134c:	48000400 	.word	0x48000400
 8001350:	48000800 	.word	0x48000800
 8001354:	48000c00 	.word	0x48000c00
 8001358:	48001000 	.word	0x48001000
 800135c:	48001400 	.word	0x48001400
 8001360:	48001800 	.word	0x48001800
 8001364:	40010400 	.word	0x40010400

08001368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	807b      	strh	r3, [r7, #2]
 8001374:	4613      	mov	r3, r2
 8001376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001378:	787b      	ldrb	r3, [r7, #1]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800137e:	887a      	ldrh	r2, [r7, #2]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001384:	e002      	b.n	800138c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001386:	887a      	ldrh	r2, [r7, #2]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013aa:	887a      	ldrh	r2, [r7, #2]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4013      	ands	r3, r2
 80013b0:	041a      	lsls	r2, r3, #16
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	43d9      	mvns	r1, r3
 80013b6:	887b      	ldrh	r3, [r7, #2]
 80013b8:	400b      	ands	r3, r1
 80013ba:	431a      	orrs	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	619a      	str	r2, [r3, #24]
}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013dc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d102      	bne.n	80013f2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	f001 b83a 	b.w	8002466 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 816f 	beq.w	80016e6 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001408:	4bb5      	ldr	r3, [pc, #724]	; (80016e0 <HAL_RCC_OscConfig+0x314>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 030c 	and.w	r3, r3, #12
 8001410:	2b04      	cmp	r3, #4
 8001412:	d00c      	beq.n	800142e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001414:	4bb2      	ldr	r3, [pc, #712]	; (80016e0 <HAL_RCC_OscConfig+0x314>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 030c 	and.w	r3, r3, #12
 800141c:	2b08      	cmp	r3, #8
 800141e:	d15c      	bne.n	80014da <HAL_RCC_OscConfig+0x10e>
 8001420:	4baf      	ldr	r3, [pc, #700]	; (80016e0 <HAL_RCC_OscConfig+0x314>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800142c:	d155      	bne.n	80014da <HAL_RCC_OscConfig+0x10e>
 800142e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001432:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001436:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800143a:	fa93 f3a3 	rbit	r3, r3
 800143e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001442:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001446:	fab3 f383 	clz	r3, r3
 800144a:	b2db      	uxtb	r3, r3
 800144c:	095b      	lsrs	r3, r3, #5
 800144e:	b2db      	uxtb	r3, r3
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b01      	cmp	r3, #1
 8001458:	d102      	bne.n	8001460 <HAL_RCC_OscConfig+0x94>
 800145a:	4ba1      	ldr	r3, [pc, #644]	; (80016e0 <HAL_RCC_OscConfig+0x314>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	e015      	b.n	800148c <HAL_RCC_OscConfig+0xc0>
 8001460:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001464:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001468:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800146c:	fa93 f3a3 	rbit	r3, r3
 8001470:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001474:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001478:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800147c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001480:	fa93 f3a3 	rbit	r3, r3
 8001484:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001488:	4b95      	ldr	r3, [pc, #596]	; (80016e0 <HAL_RCC_OscConfig+0x314>)
 800148a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001490:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001494:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001498:	fa92 f2a2 	rbit	r2, r2
 800149c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80014a0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80014a4:	fab2 f282 	clz	r2, r2
 80014a8:	b2d2      	uxtb	r2, r2
 80014aa:	f042 0220 	orr.w	r2, r2, #32
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	f002 021f 	and.w	r2, r2, #31
 80014b4:	2101      	movs	r1, #1
 80014b6:	fa01 f202 	lsl.w	r2, r1, r2
 80014ba:	4013      	ands	r3, r2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f000 8111 	beq.w	80016e4 <HAL_RCC_OscConfig+0x318>
 80014c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014c6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f040 8108 	bne.w	80016e4 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	f000 bfc6 	b.w	8002466 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014de:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ea:	d106      	bne.n	80014fa <HAL_RCC_OscConfig+0x12e>
 80014ec:	4b7c      	ldr	r3, [pc, #496]	; (80016e0 <HAL_RCC_OscConfig+0x314>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a7b      	ldr	r2, [pc, #492]	; (80016e0 <HAL_RCC_OscConfig+0x314>)
 80014f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f6:	6013      	str	r3, [r2, #0]
 80014f8:	e036      	b.n	8001568 <HAL_RCC_OscConfig+0x19c>
 80014fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014fe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10c      	bne.n	8001524 <HAL_RCC_OscConfig+0x158>
 800150a:	4b75      	ldr	r3, [pc, #468]	; (80016e0 <HAL_RCC_OscConfig+0x314>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a74      	ldr	r2, [pc, #464]	; (80016e0 <HAL_RCC_OscConfig+0x314>)
 8001510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	4b72      	ldr	r3, [pc, #456]	; (80016e0 <HAL_RCC_OscConfig+0x314>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a71      	ldr	r2, [pc, #452]	; (80016e0 <HAL_RCC_OscConfig+0x314>)
 800151c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	e021      	b.n	8001568 <HAL_RCC_OscConfig+0x19c>
 8001524:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001528:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001534:	d10c      	bne.n	8001550 <HAL_RCC_OscConfig+0x184>
 8001536:	4b6a      	ldr	r3, [pc, #424]	; (80016e0 <HAL_RCC_OscConfig+0x314>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a69      	ldr	r2, [pc, #420]	; (80016e0 <HAL_RCC_OscConfig+0x314>)
 800153c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	4b67      	ldr	r3, [pc, #412]	; (80016e0 <HAL_RCC_OscConfig+0x314>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a66      	ldr	r2, [pc, #408]	; (80016e0 <HAL_RCC_OscConfig+0x314>)
 8001548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	e00b      	b.n	8001568 <HAL_RCC_OscConfig+0x19c>
 8001550:	4b63      	ldr	r3, [pc, #396]	; (80016e0 <HAL_RCC_OscConfig+0x314>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a62      	ldr	r2, [pc, #392]	; (80016e0 <HAL_RCC_OscConfig+0x314>)
 8001556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	4b60      	ldr	r3, [pc, #384]	; (80016e0 <HAL_RCC_OscConfig+0x314>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a5f      	ldr	r2, [pc, #380]	; (80016e0 <HAL_RCC_OscConfig+0x314>)
 8001562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001566:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001568:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800156c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d059      	beq.n	800162c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001578:	f7ff fae4 	bl	8000b44 <HAL_GetTick>
 800157c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001580:	e00a      	b.n	8001598 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001582:	f7ff fadf 	bl	8000b44 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b64      	cmp	r3, #100	; 0x64
 8001590:	d902      	bls.n	8001598 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	f000 bf67 	b.w	8002466 <HAL_RCC_OscConfig+0x109a>
 8001598:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800159c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80015a4:	fa93 f3a3 	rbit	r3, r3
 80015a8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80015ac:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b0:	fab3 f383 	clz	r3, r3
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	095b      	lsrs	r3, r3, #5
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d102      	bne.n	80015ca <HAL_RCC_OscConfig+0x1fe>
 80015c4:	4b46      	ldr	r3, [pc, #280]	; (80016e0 <HAL_RCC_OscConfig+0x314>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	e015      	b.n	80015f6 <HAL_RCC_OscConfig+0x22a>
 80015ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015ce:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80015d6:	fa93 f3a3 	rbit	r3, r3
 80015da:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80015de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015e2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80015e6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80015ea:	fa93 f3a3 	rbit	r3, r3
 80015ee:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80015f2:	4b3b      	ldr	r3, [pc, #236]	; (80016e0 <HAL_RCC_OscConfig+0x314>)
 80015f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015fa:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80015fe:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001602:	fa92 f2a2 	rbit	r2, r2
 8001606:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800160a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800160e:	fab2 f282 	clz	r2, r2
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	f042 0220 	orr.w	r2, r2, #32
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	f002 021f 	and.w	r2, r2, #31
 800161e:	2101      	movs	r1, #1
 8001620:	fa01 f202 	lsl.w	r2, r1, r2
 8001624:	4013      	ands	r3, r2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0ab      	beq.n	8001582 <HAL_RCC_OscConfig+0x1b6>
 800162a:	e05c      	b.n	80016e6 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162c:	f7ff fa8a 	bl	8000b44 <HAL_GetTick>
 8001630:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001634:	e00a      	b.n	800164c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001636:	f7ff fa85 	bl	8000b44 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b64      	cmp	r3, #100	; 0x64
 8001644:	d902      	bls.n	800164c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	f000 bf0d 	b.w	8002466 <HAL_RCC_OscConfig+0x109a>
 800164c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001650:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001654:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001658:	fa93 f3a3 	rbit	r3, r3
 800165c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001660:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001664:	fab3 f383 	clz	r3, r3
 8001668:	b2db      	uxtb	r3, r3
 800166a:	095b      	lsrs	r3, r3, #5
 800166c:	b2db      	uxtb	r3, r3
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	b2db      	uxtb	r3, r3
 8001674:	2b01      	cmp	r3, #1
 8001676:	d102      	bne.n	800167e <HAL_RCC_OscConfig+0x2b2>
 8001678:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <HAL_RCC_OscConfig+0x314>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	e015      	b.n	80016aa <HAL_RCC_OscConfig+0x2de>
 800167e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001682:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001686:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800168a:	fa93 f3a3 	rbit	r3, r3
 800168e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001692:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001696:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800169a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800169e:	fa93 f3a3 	rbit	r3, r3
 80016a2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80016a6:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <HAL_RCC_OscConfig+0x314>)
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016ae:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80016b2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80016b6:	fa92 f2a2 	rbit	r2, r2
 80016ba:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80016be:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80016c2:	fab2 f282 	clz	r2, r2
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	f042 0220 	orr.w	r2, r2, #32
 80016cc:	b2d2      	uxtb	r2, r2
 80016ce:	f002 021f 	and.w	r2, r2, #31
 80016d2:	2101      	movs	r1, #1
 80016d4:	fa01 f202 	lsl.w	r2, r1, r2
 80016d8:	4013      	ands	r3, r2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1ab      	bne.n	8001636 <HAL_RCC_OscConfig+0x26a>
 80016de:	e002      	b.n	80016e6 <HAL_RCC_OscConfig+0x31a>
 80016e0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f000 817f 	beq.w	80019fa <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016fc:	4ba7      	ldr	r3, [pc, #668]	; (800199c <HAL_RCC_OscConfig+0x5d0>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 030c 	and.w	r3, r3, #12
 8001704:	2b00      	cmp	r3, #0
 8001706:	d00c      	beq.n	8001722 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001708:	4ba4      	ldr	r3, [pc, #656]	; (800199c <HAL_RCC_OscConfig+0x5d0>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 030c 	and.w	r3, r3, #12
 8001710:	2b08      	cmp	r3, #8
 8001712:	d173      	bne.n	80017fc <HAL_RCC_OscConfig+0x430>
 8001714:	4ba1      	ldr	r3, [pc, #644]	; (800199c <HAL_RCC_OscConfig+0x5d0>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800171c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001720:	d16c      	bne.n	80017fc <HAL_RCC_OscConfig+0x430>
 8001722:	2302      	movs	r3, #2
 8001724:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001728:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800172c:	fa93 f3a3 	rbit	r3, r3
 8001730:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001734:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001738:	fab3 f383 	clz	r3, r3
 800173c:	b2db      	uxtb	r3, r3
 800173e:	095b      	lsrs	r3, r3, #5
 8001740:	b2db      	uxtb	r3, r3
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b01      	cmp	r3, #1
 800174a:	d102      	bne.n	8001752 <HAL_RCC_OscConfig+0x386>
 800174c:	4b93      	ldr	r3, [pc, #588]	; (800199c <HAL_RCC_OscConfig+0x5d0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	e013      	b.n	800177a <HAL_RCC_OscConfig+0x3ae>
 8001752:	2302      	movs	r3, #2
 8001754:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001758:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800175c:	fa93 f3a3 	rbit	r3, r3
 8001760:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001764:	2302      	movs	r3, #2
 8001766:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800176a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800176e:	fa93 f3a3 	rbit	r3, r3
 8001772:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001776:	4b89      	ldr	r3, [pc, #548]	; (800199c <HAL_RCC_OscConfig+0x5d0>)
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	2202      	movs	r2, #2
 800177c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001780:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001784:	fa92 f2a2 	rbit	r2, r2
 8001788:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800178c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001790:	fab2 f282 	clz	r2, r2
 8001794:	b2d2      	uxtb	r2, r2
 8001796:	f042 0220 	orr.w	r2, r2, #32
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	f002 021f 	and.w	r2, r2, #31
 80017a0:	2101      	movs	r1, #1
 80017a2:	fa01 f202 	lsl.w	r2, r1, r2
 80017a6:	4013      	ands	r3, r2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00a      	beq.n	80017c2 <HAL_RCC_OscConfig+0x3f6>
 80017ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d002      	beq.n	80017c2 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	f000 be52 	b.w	8002466 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c2:	4b76      	ldr	r3, [pc, #472]	; (800199c <HAL_RCC_OscConfig+0x5d0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	21f8      	movs	r1, #248	; 0xf8
 80017d8:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017dc:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80017e0:	fa91 f1a1 	rbit	r1, r1
 80017e4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80017e8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80017ec:	fab1 f181 	clz	r1, r1
 80017f0:	b2c9      	uxtb	r1, r1
 80017f2:	408b      	lsls	r3, r1
 80017f4:	4969      	ldr	r1, [pc, #420]	; (800199c <HAL_RCC_OscConfig+0x5d0>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fa:	e0fe      	b.n	80019fa <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001800:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 8088 	beq.w	800191e <HAL_RCC_OscConfig+0x552>
 800180e:	2301      	movs	r3, #1
 8001810:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001814:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001818:	fa93 f3a3 	rbit	r3, r3
 800181c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001820:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001824:	fab3 f383 	clz	r3, r3
 8001828:	b2db      	uxtb	r3, r3
 800182a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800182e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	461a      	mov	r2, r3
 8001836:	2301      	movs	r3, #1
 8001838:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183a:	f7ff f983 	bl	8000b44 <HAL_GetTick>
 800183e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001842:	e00a      	b.n	800185a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001844:	f7ff f97e 	bl	8000b44 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d902      	bls.n	800185a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	f000 be06 	b.w	8002466 <HAL_RCC_OscConfig+0x109a>
 800185a:	2302      	movs	r3, #2
 800185c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001860:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001864:	fa93 f3a3 	rbit	r3, r3
 8001868:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800186c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001870:	fab3 f383 	clz	r3, r3
 8001874:	b2db      	uxtb	r3, r3
 8001876:	095b      	lsrs	r3, r3, #5
 8001878:	b2db      	uxtb	r3, r3
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b01      	cmp	r3, #1
 8001882:	d102      	bne.n	800188a <HAL_RCC_OscConfig+0x4be>
 8001884:	4b45      	ldr	r3, [pc, #276]	; (800199c <HAL_RCC_OscConfig+0x5d0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	e013      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e6>
 800188a:	2302      	movs	r3, #2
 800188c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001890:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001894:	fa93 f3a3 	rbit	r3, r3
 8001898:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800189c:	2302      	movs	r3, #2
 800189e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80018a2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80018a6:	fa93 f3a3 	rbit	r3, r3
 80018aa:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80018ae:	4b3b      	ldr	r3, [pc, #236]	; (800199c <HAL_RCC_OscConfig+0x5d0>)
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	2202      	movs	r2, #2
 80018b4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80018b8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80018bc:	fa92 f2a2 	rbit	r2, r2
 80018c0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80018c4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80018c8:	fab2 f282 	clz	r2, r2
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	f042 0220 	orr.w	r2, r2, #32
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	f002 021f 	and.w	r2, r2, #31
 80018d8:	2101      	movs	r1, #1
 80018da:	fa01 f202 	lsl.w	r2, r1, r2
 80018de:	4013      	ands	r3, r2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0af      	beq.n	8001844 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e4:	4b2d      	ldr	r3, [pc, #180]	; (800199c <HAL_RCC_OscConfig+0x5d0>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	21f8      	movs	r1, #248	; 0xf8
 80018fa:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fe:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001902:	fa91 f1a1 	rbit	r1, r1
 8001906:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800190a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800190e:	fab1 f181 	clz	r1, r1
 8001912:	b2c9      	uxtb	r1, r1
 8001914:	408b      	lsls	r3, r1
 8001916:	4921      	ldr	r1, [pc, #132]	; (800199c <HAL_RCC_OscConfig+0x5d0>)
 8001918:	4313      	orrs	r3, r2
 800191a:	600b      	str	r3, [r1, #0]
 800191c:	e06d      	b.n	80019fa <HAL_RCC_OscConfig+0x62e>
 800191e:	2301      	movs	r3, #1
 8001920:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001924:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001928:	fa93 f3a3 	rbit	r3, r3
 800192c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001930:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001934:	fab3 f383 	clz	r3, r3
 8001938:	b2db      	uxtb	r3, r3
 800193a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800193e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	461a      	mov	r2, r3
 8001946:	2300      	movs	r3, #0
 8001948:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194a:	f7ff f8fb 	bl	8000b44 <HAL_GetTick>
 800194e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001952:	e00a      	b.n	800196a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001954:	f7ff f8f6 	bl	8000b44 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d902      	bls.n	800196a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	f000 bd7e 	b.w	8002466 <HAL_RCC_OscConfig+0x109a>
 800196a:	2302      	movs	r3, #2
 800196c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001970:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001974:	fa93 f3a3 	rbit	r3, r3
 8001978:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800197c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001980:	fab3 f383 	clz	r3, r3
 8001984:	b2db      	uxtb	r3, r3
 8001986:	095b      	lsrs	r3, r3, #5
 8001988:	b2db      	uxtb	r3, r3
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b01      	cmp	r3, #1
 8001992:	d105      	bne.n	80019a0 <HAL_RCC_OscConfig+0x5d4>
 8001994:	4b01      	ldr	r3, [pc, #4]	; (800199c <HAL_RCC_OscConfig+0x5d0>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	e016      	b.n	80019c8 <HAL_RCC_OscConfig+0x5fc>
 800199a:	bf00      	nop
 800199c:	40021000 	.word	0x40021000
 80019a0:	2302      	movs	r3, #2
 80019a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80019aa:	fa93 f3a3 	rbit	r3, r3
 80019ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80019b2:	2302      	movs	r3, #2
 80019b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80019b8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80019bc:	fa93 f3a3 	rbit	r3, r3
 80019c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80019c4:	4bbf      	ldr	r3, [pc, #764]	; (8001cc4 <HAL_RCC_OscConfig+0x8f8>)
 80019c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c8:	2202      	movs	r2, #2
 80019ca:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80019ce:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80019d2:	fa92 f2a2 	rbit	r2, r2
 80019d6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80019da:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80019de:	fab2 f282 	clz	r2, r2
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	f042 0220 	orr.w	r2, r2, #32
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	f002 021f 	and.w	r2, r2, #31
 80019ee:	2101      	movs	r1, #1
 80019f0:	fa01 f202 	lsl.w	r2, r1, r2
 80019f4:	4013      	ands	r3, r2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1ac      	bne.n	8001954 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019fe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0308 	and.w	r3, r3, #8
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 8113 	beq.w	8001c36 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a14:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d07c      	beq.n	8001b1a <HAL_RCC_OscConfig+0x74e>
 8001a20:	2301      	movs	r3, #1
 8001a22:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a2a:	fa93 f3a3 	rbit	r3, r3
 8001a2e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001a32:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a36:	fab3 f383 	clz	r3, r3
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4ba2      	ldr	r3, [pc, #648]	; (8001cc8 <HAL_RCC_OscConfig+0x8fc>)
 8001a40:	4413      	add	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	461a      	mov	r2, r3
 8001a46:	2301      	movs	r3, #1
 8001a48:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4a:	f7ff f87b 	bl	8000b44 <HAL_GetTick>
 8001a4e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a52:	e00a      	b.n	8001a6a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a54:	f7ff f876 	bl	8000b44 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d902      	bls.n	8001a6a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	f000 bcfe 	b.w	8002466 <HAL_RCC_OscConfig+0x109a>
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001a74:	fa93 f2a3 	rbit	r2, r3
 8001a78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a7c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	fa93 f2a3 	rbit	r2, r3
 8001a9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aaa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001aae:	2202      	movs	r2, #2
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ab6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	fa93 f2a3 	rbit	r2, r3
 8001ac0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ac4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ac8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aca:	4b7e      	ldr	r3, [pc, #504]	; (8001cc4 <HAL_RCC_OscConfig+0x8f8>)
 8001acc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ace:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ad2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ad6:	2102      	movs	r1, #2
 8001ad8:	6019      	str	r1, [r3, #0]
 8001ada:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ade:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	fa93 f1a3 	rbit	r1, r3
 8001ae8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001af0:	6019      	str	r1, [r3, #0]
  return result;
 8001af2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	fab3 f383 	clz	r3, r3
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	f003 031f 	and.w	r3, r3, #31
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b12:	4013      	ands	r3, r2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d09d      	beq.n	8001a54 <HAL_RCC_OscConfig+0x688>
 8001b18:	e08d      	b.n	8001c36 <HAL_RCC_OscConfig+0x86a>
 8001b1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b1e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001b22:	2201      	movs	r2, #1
 8001b24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b2a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	fa93 f2a3 	rbit	r2, r3
 8001b34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b38:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b3c:	601a      	str	r2, [r3, #0]
  return result;
 8001b3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b42:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b46:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b48:	fab3 f383 	clz	r3, r3
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	461a      	mov	r2, r3
 8001b50:	4b5d      	ldr	r3, [pc, #372]	; (8001cc8 <HAL_RCC_OscConfig+0x8fc>)
 8001b52:	4413      	add	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	461a      	mov	r2, r3
 8001b58:	2300      	movs	r3, #0
 8001b5a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b5c:	f7fe fff2 	bl	8000b44 <HAL_GetTick>
 8001b60:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b64:	e00a      	b.n	8001b7c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b66:	f7fe ffed 	bl	8000b44 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d902      	bls.n	8001b7c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	f000 bc75 	b.w	8002466 <HAL_RCC_OscConfig+0x109a>
 8001b7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b80:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b84:	2202      	movs	r2, #2
 8001b86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b8c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	fa93 f2a3 	rbit	r2, r3
 8001b96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b9a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ba4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001ba8:	2202      	movs	r2, #2
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	fa93 f2a3 	rbit	r2, r3
 8001bba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001bcc:	2202      	movs	r2, #2
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bd4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	fa93 f2a3 	rbit	r2, r3
 8001bde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001be2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001be6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be8:	4b36      	ldr	r3, [pc, #216]	; (8001cc4 <HAL_RCC_OscConfig+0x8f8>)
 8001bea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bf0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001bf4:	2102      	movs	r1, #2
 8001bf6:	6019      	str	r1, [r3, #0]
 8001bf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bfc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	fa93 f1a3 	rbit	r1, r3
 8001c06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c0a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001c0e:	6019      	str	r1, [r3, #0]
  return result;
 8001c10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c14:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	fab3 f383 	clz	r3, r3
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	f003 031f 	and.w	r3, r3, #31
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c30:	4013      	ands	r3, r2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d197      	bne.n	8001b66 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c3a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 81a5 	beq.w	8001f96 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c52:	4b1c      	ldr	r3, [pc, #112]	; (8001cc4 <HAL_RCC_OscConfig+0x8f8>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d116      	bne.n	8001c8c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c5e:	4b19      	ldr	r3, [pc, #100]	; (8001cc4 <HAL_RCC_OscConfig+0x8f8>)
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	4a18      	ldr	r2, [pc, #96]	; (8001cc4 <HAL_RCC_OscConfig+0x8f8>)
 8001c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c68:	61d3      	str	r3, [r2, #28]
 8001c6a:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <HAL_RCC_OscConfig+0x8f8>)
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001c72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c84:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001c86:	2301      	movs	r3, #1
 8001c88:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <HAL_RCC_OscConfig+0x900>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d121      	bne.n	8001cdc <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c98:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <HAL_RCC_OscConfig+0x900>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a0b      	ldr	r2, [pc, #44]	; (8001ccc <HAL_RCC_OscConfig+0x900>)
 8001c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ca4:	f7fe ff4e 	bl	8000b44 <HAL_GetTick>
 8001ca8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cac:	e010      	b.n	8001cd0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cae:	f7fe ff49 	bl	8000b44 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	; 0x64
 8001cbc:	d908      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e3d1      	b.n	8002466 <HAL_RCC_OscConfig+0x109a>
 8001cc2:	bf00      	nop
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	10908120 	.word	0x10908120
 8001ccc:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd0:	4b8d      	ldr	r3, [pc, #564]	; (8001f08 <HAL_RCC_OscConfig+0xb3c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0e8      	beq.n	8001cae <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d106      	bne.n	8001cfa <HAL_RCC_OscConfig+0x92e>
 8001cec:	4b87      	ldr	r3, [pc, #540]	; (8001f0c <HAL_RCC_OscConfig+0xb40>)
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	4a86      	ldr	r2, [pc, #536]	; (8001f0c <HAL_RCC_OscConfig+0xb40>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	6213      	str	r3, [r2, #32]
 8001cf8:	e035      	b.n	8001d66 <HAL_RCC_OscConfig+0x99a>
 8001cfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cfe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10c      	bne.n	8001d24 <HAL_RCC_OscConfig+0x958>
 8001d0a:	4b80      	ldr	r3, [pc, #512]	; (8001f0c <HAL_RCC_OscConfig+0xb40>)
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	4a7f      	ldr	r2, [pc, #508]	; (8001f0c <HAL_RCC_OscConfig+0xb40>)
 8001d10:	f023 0301 	bic.w	r3, r3, #1
 8001d14:	6213      	str	r3, [r2, #32]
 8001d16:	4b7d      	ldr	r3, [pc, #500]	; (8001f0c <HAL_RCC_OscConfig+0xb40>)
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	4a7c      	ldr	r2, [pc, #496]	; (8001f0c <HAL_RCC_OscConfig+0xb40>)
 8001d1c:	f023 0304 	bic.w	r3, r3, #4
 8001d20:	6213      	str	r3, [r2, #32]
 8001d22:	e020      	b.n	8001d66 <HAL_RCC_OscConfig+0x99a>
 8001d24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d28:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	2b05      	cmp	r3, #5
 8001d32:	d10c      	bne.n	8001d4e <HAL_RCC_OscConfig+0x982>
 8001d34:	4b75      	ldr	r3, [pc, #468]	; (8001f0c <HAL_RCC_OscConfig+0xb40>)
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	4a74      	ldr	r2, [pc, #464]	; (8001f0c <HAL_RCC_OscConfig+0xb40>)
 8001d3a:	f043 0304 	orr.w	r3, r3, #4
 8001d3e:	6213      	str	r3, [r2, #32]
 8001d40:	4b72      	ldr	r3, [pc, #456]	; (8001f0c <HAL_RCC_OscConfig+0xb40>)
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	4a71      	ldr	r2, [pc, #452]	; (8001f0c <HAL_RCC_OscConfig+0xb40>)
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	6213      	str	r3, [r2, #32]
 8001d4c:	e00b      	b.n	8001d66 <HAL_RCC_OscConfig+0x99a>
 8001d4e:	4b6f      	ldr	r3, [pc, #444]	; (8001f0c <HAL_RCC_OscConfig+0xb40>)
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	4a6e      	ldr	r2, [pc, #440]	; (8001f0c <HAL_RCC_OscConfig+0xb40>)
 8001d54:	f023 0301 	bic.w	r3, r3, #1
 8001d58:	6213      	str	r3, [r2, #32]
 8001d5a:	4b6c      	ldr	r3, [pc, #432]	; (8001f0c <HAL_RCC_OscConfig+0xb40>)
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	4a6b      	ldr	r2, [pc, #428]	; (8001f0c <HAL_RCC_OscConfig+0xb40>)
 8001d60:	f023 0304 	bic.w	r3, r3, #4
 8001d64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d6a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 8081 	beq.w	8001e7a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d78:	f7fe fee4 	bl	8000b44 <HAL_GetTick>
 8001d7c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d80:	e00b      	b.n	8001d9a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d82:	f7fe fedf 	bl	8000b44 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e365      	b.n	8002466 <HAL_RCC_OscConfig+0x109a>
 8001d9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d9e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001da2:	2202      	movs	r2, #2
 8001da4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001daa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	fa93 f2a3 	rbit	r2, r3
 8001db4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001db8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dce:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	fa93 f2a3 	rbit	r2, r3
 8001dd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ddc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001de0:	601a      	str	r2, [r3, #0]
  return result;
 8001de2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001de6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001dea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dec:	fab3 f383 	clz	r3, r3
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	095b      	lsrs	r3, r3, #5
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	f043 0302 	orr.w	r3, r3, #2
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d102      	bne.n	8001e06 <HAL_RCC_OscConfig+0xa3a>
 8001e00:	4b42      	ldr	r3, [pc, #264]	; (8001f0c <HAL_RCC_OscConfig+0xb40>)
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	e013      	b.n	8001e2e <HAL_RCC_OscConfig+0xa62>
 8001e06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e0a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001e0e:	2202      	movs	r2, #2
 8001e10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e16:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	fa93 f2a3 	rbit	r2, r3
 8001e20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e24:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	4b38      	ldr	r3, [pc, #224]	; (8001f0c <HAL_RCC_OscConfig+0xb40>)
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e32:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001e36:	2102      	movs	r1, #2
 8001e38:	6011      	str	r1, [r2, #0]
 8001e3a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e3e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001e42:	6812      	ldr	r2, [r2, #0]
 8001e44:	fa92 f1a2 	rbit	r1, r2
 8001e48:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e4c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001e50:	6011      	str	r1, [r2, #0]
  return result;
 8001e52:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e56:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	fab2 f282 	clz	r2, r2
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	f002 021f 	and.w	r2, r2, #31
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e72:	4013      	ands	r3, r2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d084      	beq.n	8001d82 <HAL_RCC_OscConfig+0x9b6>
 8001e78:	e083      	b.n	8001f82 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7a:	f7fe fe63 	bl	8000b44 <HAL_GetTick>
 8001e7e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e82:	e00b      	b.n	8001e9c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e84:	f7fe fe5e 	bl	8000b44 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e2e4      	b.n	8002466 <HAL_RCC_OscConfig+0x109a>
 8001e9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eac:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	fa93 f2a3 	rbit	r2, r3
 8001eb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eba:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ec4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001ec8:	2202      	movs	r2, #2
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ed0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	fa93 f2a3 	rbit	r2, r3
 8001eda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ede:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001ee2:	601a      	str	r2, [r3, #0]
  return result;
 8001ee4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001eec:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eee:	fab3 f383 	clz	r3, r3
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	095b      	lsrs	r3, r3, #5
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	f043 0302 	orr.w	r3, r3, #2
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d106      	bne.n	8001f10 <HAL_RCC_OscConfig+0xb44>
 8001f02:	4b02      	ldr	r3, [pc, #8]	; (8001f0c <HAL_RCC_OscConfig+0xb40>)
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	e017      	b.n	8001f38 <HAL_RCC_OscConfig+0xb6c>
 8001f08:	40007000 	.word	0x40007000
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f14:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001f18:	2202      	movs	r2, #2
 8001f1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f20:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	fa93 f2a3 	rbit	r2, r3
 8001f2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f2e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	4bb3      	ldr	r3, [pc, #716]	; (8002204 <HAL_RCC_OscConfig+0xe38>)
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f3c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001f40:	2102      	movs	r1, #2
 8001f42:	6011      	str	r1, [r2, #0]
 8001f44:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f48:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001f4c:	6812      	ldr	r2, [r2, #0]
 8001f4e:	fa92 f1a2 	rbit	r1, r2
 8001f52:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f56:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001f5a:	6011      	str	r1, [r2, #0]
  return result;
 8001f5c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f60:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001f64:	6812      	ldr	r2, [r2, #0]
 8001f66:	fab2 f282 	clz	r2, r2
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	f002 021f 	and.w	r2, r2, #31
 8001f76:	2101      	movs	r1, #1
 8001f78:	fa01 f202 	lsl.w	r2, r1, r2
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d180      	bne.n	8001e84 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f82:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d105      	bne.n	8001f96 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f8a:	4b9e      	ldr	r3, [pc, #632]	; (8002204 <HAL_RCC_OscConfig+0xe38>)
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	4a9d      	ldr	r2, [pc, #628]	; (8002204 <HAL_RCC_OscConfig+0xe38>)
 8001f90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f94:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f9a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 825e 	beq.w	8002464 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fa8:	4b96      	ldr	r3, [pc, #600]	; (8002204 <HAL_RCC_OscConfig+0xe38>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 030c 	and.w	r3, r3, #12
 8001fb0:	2b08      	cmp	r3, #8
 8001fb2:	f000 821f 	beq.w	80023f4 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	f040 8170 	bne.w	80022a8 <HAL_RCC_OscConfig+0xedc>
 8001fc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fcc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001fd0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001fd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fda:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	fa93 f2a3 	rbit	r2, r3
 8001fe4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fe8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001fec:	601a      	str	r2, [r3, #0]
  return result;
 8001fee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ff2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001ff6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff8:	fab3 f383 	clz	r3, r3
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002002:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	461a      	mov	r2, r3
 800200a:	2300      	movs	r3, #0
 800200c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200e:	f7fe fd99 	bl	8000b44 <HAL_GetTick>
 8002012:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002016:	e009      	b.n	800202c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002018:	f7fe fd94 	bl	8000b44 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e21c      	b.n	8002466 <HAL_RCC_OscConfig+0x109a>
 800202c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002030:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002034:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002038:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800203e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	fa93 f2a3 	rbit	r2, r3
 8002048:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800204c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002050:	601a      	str	r2, [r3, #0]
  return result;
 8002052:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002056:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800205a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800205c:	fab3 f383 	clz	r3, r3
 8002060:	b2db      	uxtb	r3, r3
 8002062:	095b      	lsrs	r3, r3, #5
 8002064:	b2db      	uxtb	r3, r3
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b01      	cmp	r3, #1
 800206e:	d102      	bne.n	8002076 <HAL_RCC_OscConfig+0xcaa>
 8002070:	4b64      	ldr	r3, [pc, #400]	; (8002204 <HAL_RCC_OscConfig+0xe38>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	e027      	b.n	80020c6 <HAL_RCC_OscConfig+0xcfa>
 8002076:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800207a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800207e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002082:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002084:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002088:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	fa93 f2a3 	rbit	r2, r3
 8002092:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002096:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020a0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80020a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ae:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	fa93 f2a3 	rbit	r2, r3
 80020b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020bc:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	4b50      	ldr	r3, [pc, #320]	; (8002204 <HAL_RCC_OscConfig+0xe38>)
 80020c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020ca:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80020ce:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80020d2:	6011      	str	r1, [r2, #0]
 80020d4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020d8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80020dc:	6812      	ldr	r2, [r2, #0]
 80020de:	fa92 f1a2 	rbit	r1, r2
 80020e2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020e6:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80020ea:	6011      	str	r1, [r2, #0]
  return result;
 80020ec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020f0:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80020f4:	6812      	ldr	r2, [r2, #0]
 80020f6:	fab2 f282 	clz	r2, r2
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	f042 0220 	orr.w	r2, r2, #32
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	f002 021f 	and.w	r2, r2, #31
 8002106:	2101      	movs	r1, #1
 8002108:	fa01 f202 	lsl.w	r2, r1, r2
 800210c:	4013      	ands	r3, r2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d182      	bne.n	8002018 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002112:	4b3c      	ldr	r3, [pc, #240]	; (8002204 <HAL_RCC_OscConfig+0xe38>)
 8002114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002116:	f023 020f 	bic.w	r2, r3, #15
 800211a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800211e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002126:	4937      	ldr	r1, [pc, #220]	; (8002204 <HAL_RCC_OscConfig+0xe38>)
 8002128:	4313      	orrs	r3, r2
 800212a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800212c:	4b35      	ldr	r3, [pc, #212]	; (8002204 <HAL_RCC_OscConfig+0xe38>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002134:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002138:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6a19      	ldr	r1, [r3, #32]
 8002140:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002144:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	430b      	orrs	r3, r1
 800214e:	492d      	ldr	r1, [pc, #180]	; (8002204 <HAL_RCC_OscConfig+0xe38>)
 8002150:	4313      	orrs	r3, r2
 8002152:	604b      	str	r3, [r1, #4]
 8002154:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002158:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800215c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002160:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002162:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002166:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	fa93 f2a3 	rbit	r2, r3
 8002170:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002174:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002178:	601a      	str	r2, [r3, #0]
  return result;
 800217a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800217e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002182:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002184:	fab3 f383 	clz	r3, r3
 8002188:	b2db      	uxtb	r3, r3
 800218a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800218e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	461a      	mov	r2, r3
 8002196:	2301      	movs	r3, #1
 8002198:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219a:	f7fe fcd3 	bl	8000b44 <HAL_GetTick>
 800219e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021a2:	e009      	b.n	80021b8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a4:	f7fe fcce 	bl	8000b44 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e156      	b.n	8002466 <HAL_RCC_OscConfig+0x109a>
 80021b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021bc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80021c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ca:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	fa93 f2a3 	rbit	r2, r3
 80021d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021d8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80021dc:	601a      	str	r2, [r3, #0]
  return result;
 80021de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021e2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80021e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021e8:	fab3 f383 	clz	r3, r3
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	095b      	lsrs	r3, r3, #5
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d105      	bne.n	8002208 <HAL_RCC_OscConfig+0xe3c>
 80021fc:	4b01      	ldr	r3, [pc, #4]	; (8002204 <HAL_RCC_OscConfig+0xe38>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	e02a      	b.n	8002258 <HAL_RCC_OscConfig+0xe8c>
 8002202:	bf00      	nop
 8002204:	40021000 	.word	0x40021000
 8002208:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800220c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002210:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002214:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002216:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800221a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	fa93 f2a3 	rbit	r2, r3
 8002224:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002228:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002232:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002236:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002240:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	fa93 f2a3 	rbit	r2, r3
 800224a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800224e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	4b86      	ldr	r3, [pc, #536]	; (8002470 <HAL_RCC_OscConfig+0x10a4>)
 8002256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002258:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800225c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002260:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002264:	6011      	str	r1, [r2, #0]
 8002266:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800226a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800226e:	6812      	ldr	r2, [r2, #0]
 8002270:	fa92 f1a2 	rbit	r1, r2
 8002274:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002278:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800227c:	6011      	str	r1, [r2, #0]
  return result;
 800227e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002282:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	fab2 f282 	clz	r2, r2
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	f042 0220 	orr.w	r2, r2, #32
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	f002 021f 	and.w	r2, r2, #31
 8002298:	2101      	movs	r1, #1
 800229a:	fa01 f202 	lsl.w	r2, r1, r2
 800229e:	4013      	ands	r3, r2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f43f af7f 	beq.w	80021a4 <HAL_RCC_OscConfig+0xdd8>
 80022a6:	e0dd      	b.n	8002464 <HAL_RCC_OscConfig+0x1098>
 80022a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ac:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80022b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ba:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	fa93 f2a3 	rbit	r2, r3
 80022c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022c8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80022cc:	601a      	str	r2, [r3, #0]
  return result;
 80022ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022d2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80022d6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d8:	fab3 f383 	clz	r3, r3
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	461a      	mov	r2, r3
 80022ea:	2300      	movs	r3, #0
 80022ec:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ee:	f7fe fc29 	bl	8000b44 <HAL_GetTick>
 80022f2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f6:	e009      	b.n	800230c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f8:	f7fe fc24 	bl	8000b44 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e0ac      	b.n	8002466 <HAL_RCC_OscConfig+0x109a>
 800230c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002310:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002314:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002318:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800231e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	fa93 f2a3 	rbit	r2, r3
 8002328:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800232c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002330:	601a      	str	r2, [r3, #0]
  return result;
 8002332:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002336:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800233a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800233c:	fab3 f383 	clz	r3, r3
 8002340:	b2db      	uxtb	r3, r3
 8002342:	095b      	lsrs	r3, r3, #5
 8002344:	b2db      	uxtb	r3, r3
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b01      	cmp	r3, #1
 800234e:	d102      	bne.n	8002356 <HAL_RCC_OscConfig+0xf8a>
 8002350:	4b47      	ldr	r3, [pc, #284]	; (8002470 <HAL_RCC_OscConfig+0x10a4>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	e027      	b.n	80023a6 <HAL_RCC_OscConfig+0xfda>
 8002356:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800235a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800235e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002362:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002364:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002368:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	fa93 f2a3 	rbit	r2, r3
 8002372:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002376:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002380:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002384:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800238e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	fa93 f2a3 	rbit	r2, r3
 8002398:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800239c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	4b33      	ldr	r3, [pc, #204]	; (8002470 <HAL_RCC_OscConfig+0x10a4>)
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80023aa:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80023ae:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023b2:	6011      	str	r1, [r2, #0]
 80023b4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80023b8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80023bc:	6812      	ldr	r2, [r2, #0]
 80023be:	fa92 f1a2 	rbit	r1, r2
 80023c2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80023c6:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80023ca:	6011      	str	r1, [r2, #0]
  return result;
 80023cc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80023d0:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80023d4:	6812      	ldr	r2, [r2, #0]
 80023d6:	fab2 f282 	clz	r2, r2
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	f042 0220 	orr.w	r2, r2, #32
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	f002 021f 	and.w	r2, r2, #31
 80023e6:	2101      	movs	r1, #1
 80023e8:	fa01 f202 	lsl.w	r2, r1, r2
 80023ec:	4013      	ands	r3, r2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d182      	bne.n	80022f8 <HAL_RCC_OscConfig+0xf2c>
 80023f2:	e037      	b.n	8002464 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d101      	bne.n	8002408 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e02e      	b.n	8002466 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002408:	4b19      	ldr	r3, [pc, #100]	; (8002470 <HAL_RCC_OscConfig+0x10a4>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002410:	4b17      	ldr	r3, [pc, #92]	; (8002470 <HAL_RCC_OscConfig+0x10a4>)
 8002412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002414:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002418:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800241c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002420:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002424:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	69db      	ldr	r3, [r3, #28]
 800242c:	429a      	cmp	r2, r3
 800242e:	d117      	bne.n	8002460 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002430:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002434:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002438:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800243c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002444:	429a      	cmp	r2, r3
 8002446:	d10b      	bne.n	8002460 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002448:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800244c:	f003 020f 	and.w	r2, r3, #15
 8002450:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002454:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800245c:	429a      	cmp	r2, r3
 800245e:	d001      	beq.n	8002464 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e000      	b.n	8002466 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40021000 	.word	0x40021000

08002474 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b09e      	sub	sp, #120	; 0x78
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800247e:	2300      	movs	r3, #0
 8002480:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e162      	b.n	8002752 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800248c:	4b90      	ldr	r3, [pc, #576]	; (80026d0 <HAL_RCC_ClockConfig+0x25c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d910      	bls.n	80024bc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249a:	4b8d      	ldr	r3, [pc, #564]	; (80026d0 <HAL_RCC_ClockConfig+0x25c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f023 0207 	bic.w	r2, r3, #7
 80024a2:	498b      	ldr	r1, [pc, #556]	; (80026d0 <HAL_RCC_ClockConfig+0x25c>)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024aa:	4b89      	ldr	r3, [pc, #548]	; (80026d0 <HAL_RCC_ClockConfig+0x25c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d001      	beq.n	80024bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e14a      	b.n	8002752 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d008      	beq.n	80024da <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c8:	4b82      	ldr	r3, [pc, #520]	; (80026d4 <HAL_RCC_ClockConfig+0x260>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	497f      	ldr	r1, [pc, #508]	; (80026d4 <HAL_RCC_ClockConfig+0x260>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 80dc 	beq.w	80026a0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d13c      	bne.n	800256a <HAL_RCC_ClockConfig+0xf6>
 80024f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024f4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024f8:	fa93 f3a3 	rbit	r3, r3
 80024fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80024fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002500:	fab3 f383 	clz	r3, r3
 8002504:	b2db      	uxtb	r3, r3
 8002506:	095b      	lsrs	r3, r3, #5
 8002508:	b2db      	uxtb	r3, r3
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b01      	cmp	r3, #1
 8002512:	d102      	bne.n	800251a <HAL_RCC_ClockConfig+0xa6>
 8002514:	4b6f      	ldr	r3, [pc, #444]	; (80026d4 <HAL_RCC_ClockConfig+0x260>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	e00f      	b.n	800253a <HAL_RCC_ClockConfig+0xc6>
 800251a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800251e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002520:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002522:	fa93 f3a3 	rbit	r3, r3
 8002526:	667b      	str	r3, [r7, #100]	; 0x64
 8002528:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800252c:	663b      	str	r3, [r7, #96]	; 0x60
 800252e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002530:	fa93 f3a3 	rbit	r3, r3
 8002534:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002536:	4b67      	ldr	r3, [pc, #412]	; (80026d4 <HAL_RCC_ClockConfig+0x260>)
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800253e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002540:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002542:	fa92 f2a2 	rbit	r2, r2
 8002546:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002548:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800254a:	fab2 f282 	clz	r2, r2
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	f042 0220 	orr.w	r2, r2, #32
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	f002 021f 	and.w	r2, r2, #31
 800255a:	2101      	movs	r1, #1
 800255c:	fa01 f202 	lsl.w	r2, r1, r2
 8002560:	4013      	ands	r3, r2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d17b      	bne.n	800265e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e0f3      	b.n	8002752 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b02      	cmp	r3, #2
 8002570:	d13c      	bne.n	80025ec <HAL_RCC_ClockConfig+0x178>
 8002572:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002576:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800257a:	fa93 f3a3 	rbit	r3, r3
 800257e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002582:	fab3 f383 	clz	r3, r3
 8002586:	b2db      	uxtb	r3, r3
 8002588:	095b      	lsrs	r3, r3, #5
 800258a:	b2db      	uxtb	r3, r3
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b01      	cmp	r3, #1
 8002594:	d102      	bne.n	800259c <HAL_RCC_ClockConfig+0x128>
 8002596:	4b4f      	ldr	r3, [pc, #316]	; (80026d4 <HAL_RCC_ClockConfig+0x260>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	e00f      	b.n	80025bc <HAL_RCC_ClockConfig+0x148>
 800259c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025a0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025a4:	fa93 f3a3 	rbit	r3, r3
 80025a8:	647b      	str	r3, [r7, #68]	; 0x44
 80025aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025ae:	643b      	str	r3, [r7, #64]	; 0x40
 80025b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025b8:	4b46      	ldr	r3, [pc, #280]	; (80026d4 <HAL_RCC_ClockConfig+0x260>)
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025c0:	63ba      	str	r2, [r7, #56]	; 0x38
 80025c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025c4:	fa92 f2a2 	rbit	r2, r2
 80025c8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80025ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025cc:	fab2 f282 	clz	r2, r2
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	f042 0220 	orr.w	r2, r2, #32
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	f002 021f 	and.w	r2, r2, #31
 80025dc:	2101      	movs	r1, #1
 80025de:	fa01 f202 	lsl.w	r2, r1, r2
 80025e2:	4013      	ands	r3, r2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d13a      	bne.n	800265e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e0b2      	b.n	8002752 <HAL_RCC_ClockConfig+0x2de>
 80025ec:	2302      	movs	r3, #2
 80025ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f2:	fa93 f3a3 	rbit	r3, r3
 80025f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80025f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fa:	fab3 f383 	clz	r3, r3
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	095b      	lsrs	r3, r3, #5
 8002602:	b2db      	uxtb	r3, r3
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b01      	cmp	r3, #1
 800260c:	d102      	bne.n	8002614 <HAL_RCC_ClockConfig+0x1a0>
 800260e:	4b31      	ldr	r3, [pc, #196]	; (80026d4 <HAL_RCC_ClockConfig+0x260>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	e00d      	b.n	8002630 <HAL_RCC_ClockConfig+0x1bc>
 8002614:	2302      	movs	r3, #2
 8002616:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261a:	fa93 f3a3 	rbit	r3, r3
 800261e:	627b      	str	r3, [r7, #36]	; 0x24
 8002620:	2302      	movs	r3, #2
 8002622:	623b      	str	r3, [r7, #32]
 8002624:	6a3b      	ldr	r3, [r7, #32]
 8002626:	fa93 f3a3 	rbit	r3, r3
 800262a:	61fb      	str	r3, [r7, #28]
 800262c:	4b29      	ldr	r3, [pc, #164]	; (80026d4 <HAL_RCC_ClockConfig+0x260>)
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	2202      	movs	r2, #2
 8002632:	61ba      	str	r2, [r7, #24]
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	fa92 f2a2 	rbit	r2, r2
 800263a:	617a      	str	r2, [r7, #20]
  return result;
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	fab2 f282 	clz	r2, r2
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	f042 0220 	orr.w	r2, r2, #32
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	f002 021f 	and.w	r2, r2, #31
 800264e:	2101      	movs	r1, #1
 8002650:	fa01 f202 	lsl.w	r2, r1, r2
 8002654:	4013      	ands	r3, r2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e079      	b.n	8002752 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800265e:	4b1d      	ldr	r3, [pc, #116]	; (80026d4 <HAL_RCC_ClockConfig+0x260>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f023 0203 	bic.w	r2, r3, #3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	491a      	ldr	r1, [pc, #104]	; (80026d4 <HAL_RCC_ClockConfig+0x260>)
 800266c:	4313      	orrs	r3, r2
 800266e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002670:	f7fe fa68 	bl	8000b44 <HAL_GetTick>
 8002674:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002676:	e00a      	b.n	800268e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002678:	f7fe fa64 	bl	8000b44 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	f241 3288 	movw	r2, #5000	; 0x1388
 8002686:	4293      	cmp	r3, r2
 8002688:	d901      	bls.n	800268e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e061      	b.n	8002752 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268e:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <HAL_RCC_ClockConfig+0x260>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f003 020c 	and.w	r2, r3, #12
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	429a      	cmp	r2, r3
 800269e:	d1eb      	bne.n	8002678 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026a0:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <HAL_RCC_ClockConfig+0x25c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d214      	bcs.n	80026d8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ae:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <HAL_RCC_ClockConfig+0x25c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f023 0207 	bic.w	r2, r3, #7
 80026b6:	4906      	ldr	r1, [pc, #24]	; (80026d0 <HAL_RCC_ClockConfig+0x25c>)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026be:	4b04      	ldr	r3, [pc, #16]	; (80026d0 <HAL_RCC_ClockConfig+0x25c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d005      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e040      	b.n	8002752 <HAL_RCC_ClockConfig+0x2de>
 80026d0:	40022000 	.word	0x40022000
 80026d4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d008      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026e4:	4b1d      	ldr	r3, [pc, #116]	; (800275c <HAL_RCC_ClockConfig+0x2e8>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	491a      	ldr	r1, [pc, #104]	; (800275c <HAL_RCC_ClockConfig+0x2e8>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d009      	beq.n	8002716 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002702:	4b16      	ldr	r3, [pc, #88]	; (800275c <HAL_RCC_ClockConfig+0x2e8>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4912      	ldr	r1, [pc, #72]	; (800275c <HAL_RCC_ClockConfig+0x2e8>)
 8002712:	4313      	orrs	r3, r2
 8002714:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002716:	f000 f829 	bl	800276c <HAL_RCC_GetSysClockFreq>
 800271a:	4601      	mov	r1, r0
 800271c:	4b0f      	ldr	r3, [pc, #60]	; (800275c <HAL_RCC_ClockConfig+0x2e8>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002724:	22f0      	movs	r2, #240	; 0xf0
 8002726:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	fa92 f2a2 	rbit	r2, r2
 800272e:	60fa      	str	r2, [r7, #12]
  return result;
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	fab2 f282 	clz	r2, r2
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	40d3      	lsrs	r3, r2
 800273a:	4a09      	ldr	r2, [pc, #36]	; (8002760 <HAL_RCC_ClockConfig+0x2ec>)
 800273c:	5cd3      	ldrb	r3, [r2, r3]
 800273e:	fa21 f303 	lsr.w	r3, r1, r3
 8002742:	4a08      	ldr	r2, [pc, #32]	; (8002764 <HAL_RCC_ClockConfig+0x2f0>)
 8002744:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002746:	4b08      	ldr	r3, [pc, #32]	; (8002768 <HAL_RCC_ClockConfig+0x2f4>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f7fe f9b6 	bl	8000abc <HAL_InitTick>
  
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3778      	adds	r7, #120	; 0x78
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40021000 	.word	0x40021000
 8002760:	080043a8 	.word	0x080043a8
 8002764:	20000094 	.word	0x20000094
 8002768:	20000098 	.word	0x20000098

0800276c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800276c:	b480      	push	{r7}
 800276e:	b08b      	sub	sp, #44	; 0x2c
 8002770:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	61fb      	str	r3, [r7, #28]
 8002776:	2300      	movs	r3, #0
 8002778:	61bb      	str	r3, [r7, #24]
 800277a:	2300      	movs	r3, #0
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
 800277e:	2300      	movs	r3, #0
 8002780:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002782:	2300      	movs	r3, #0
 8002784:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002786:	4b2a      	ldr	r3, [pc, #168]	; (8002830 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f003 030c 	and.w	r3, r3, #12
 8002792:	2b04      	cmp	r3, #4
 8002794:	d002      	beq.n	800279c <HAL_RCC_GetSysClockFreq+0x30>
 8002796:	2b08      	cmp	r3, #8
 8002798:	d003      	beq.n	80027a2 <HAL_RCC_GetSysClockFreq+0x36>
 800279a:	e03f      	b.n	800281c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800279c:	4b25      	ldr	r3, [pc, #148]	; (8002834 <HAL_RCC_GetSysClockFreq+0xc8>)
 800279e:	623b      	str	r3, [r7, #32]
      break;
 80027a0:	e03f      	b.n	8002822 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80027a8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80027ac:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	fa92 f2a2 	rbit	r2, r2
 80027b4:	607a      	str	r2, [r7, #4]
  return result;
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	fab2 f282 	clz	r2, r2
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	40d3      	lsrs	r3, r2
 80027c0:	4a1d      	ldr	r2, [pc, #116]	; (8002838 <HAL_RCC_GetSysClockFreq+0xcc>)
 80027c2:	5cd3      	ldrb	r3, [r2, r3]
 80027c4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80027c6:	4b1a      	ldr	r3, [pc, #104]	; (8002830 <HAL_RCC_GetSysClockFreq+0xc4>)
 80027c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	220f      	movs	r2, #15
 80027d0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	fa92 f2a2 	rbit	r2, r2
 80027d8:	60fa      	str	r2, [r7, #12]
  return result;
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	fab2 f282 	clz	r2, r2
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	40d3      	lsrs	r3, r2
 80027e4:	4a15      	ldr	r2, [pc, #84]	; (800283c <HAL_RCC_GetSysClockFreq+0xd0>)
 80027e6:	5cd3      	ldrb	r3, [r2, r3]
 80027e8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d008      	beq.n	8002806 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027f4:	4a0f      	ldr	r2, [pc, #60]	; (8002834 <HAL_RCC_GetSysClockFreq+0xc8>)
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	fb02 f303 	mul.w	r3, r2, r3
 8002802:	627b      	str	r3, [r7, #36]	; 0x24
 8002804:	e007      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002806:	4a0b      	ldr	r2, [pc, #44]	; (8002834 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	fbb2 f2f3 	udiv	r2, r2, r3
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	fb02 f303 	mul.w	r3, r2, r3
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	623b      	str	r3, [r7, #32]
      break;
 800281a:	e002      	b.n	8002822 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800281c:	4b05      	ldr	r3, [pc, #20]	; (8002834 <HAL_RCC_GetSysClockFreq+0xc8>)
 800281e:	623b      	str	r3, [r7, #32]
      break;
 8002820:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002822:	6a3b      	ldr	r3, [r7, #32]
}
 8002824:	4618      	mov	r0, r3
 8002826:	372c      	adds	r7, #44	; 0x2c
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	40021000 	.word	0x40021000
 8002834:	007a1200 	.word	0x007a1200
 8002838:	080043c0 	.word	0x080043c0
 800283c:	080043d0 	.word	0x080043d0

08002840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002844:	4b03      	ldr	r3, [pc, #12]	; (8002854 <HAL_RCC_GetHCLKFreq+0x14>)
 8002846:	681b      	ldr	r3, [r3, #0]
}
 8002848:	4618      	mov	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	20000094 	.word	0x20000094

08002858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800285e:	f7ff ffef 	bl	8002840 <HAL_RCC_GetHCLKFreq>
 8002862:	4601      	mov	r1, r0
 8002864:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800286c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002870:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	fa92 f2a2 	rbit	r2, r2
 8002878:	603a      	str	r2, [r7, #0]
  return result;
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	fab2 f282 	clz	r2, r2
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	40d3      	lsrs	r3, r2
 8002884:	4a04      	ldr	r2, [pc, #16]	; (8002898 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002886:	5cd3      	ldrb	r3, [r2, r3]
 8002888:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800288c:	4618      	mov	r0, r3
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40021000 	.word	0x40021000
 8002898:	080043b8 	.word	0x080043b8

0800289c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80028a2:	f7ff ffcd 	bl	8002840 <HAL_RCC_GetHCLKFreq>
 80028a6:	4601      	mov	r1, r0
 80028a8:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80028b0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80028b4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	fa92 f2a2 	rbit	r2, r2
 80028bc:	603a      	str	r2, [r7, #0]
  return result;
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	fab2 f282 	clz	r2, r2
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	40d3      	lsrs	r3, r2
 80028c8:	4a04      	ldr	r2, [pc, #16]	; (80028dc <HAL_RCC_GetPCLK2Freq+0x40>)
 80028ca:	5cd3      	ldrb	r3, [r2, r3]
 80028cc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80028d0:	4618      	mov	r0, r3
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40021000 	.word	0x40021000
 80028dc:	080043b8 	.word	0x080043b8

080028e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b092      	sub	sp, #72	; 0x48
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80028f0:	2300      	movs	r3, #0
 80028f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 80d4 	beq.w	8002aac <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002904:	4b4e      	ldr	r3, [pc, #312]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10e      	bne.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002910:	4b4b      	ldr	r3, [pc, #300]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	4a4a      	ldr	r2, [pc, #296]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800291a:	61d3      	str	r3, [r2, #28]
 800291c:	4b48      	ldr	r3, [pc, #288]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002928:	2301      	movs	r3, #1
 800292a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800292e:	4b45      	ldr	r3, [pc, #276]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002936:	2b00      	cmp	r3, #0
 8002938:	d118      	bne.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800293a:	4b42      	ldr	r3, [pc, #264]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a41      	ldr	r2, [pc, #260]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002944:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002946:	f7fe f8fd 	bl	8000b44 <HAL_GetTick>
 800294a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294c:	e008      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800294e:	f7fe f8f9 	bl	8000b44 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b64      	cmp	r3, #100	; 0x64
 800295a:	d901      	bls.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e1d6      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002960:	4b38      	ldr	r3, [pc, #224]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0f0      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800296c:	4b34      	ldr	r3, [pc, #208]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002974:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 8084 	beq.w	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002986:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002988:	429a      	cmp	r2, r3
 800298a:	d07c      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800298c:	4b2c      	ldr	r3, [pc, #176]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002994:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002996:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800299a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299e:	fa93 f3a3 	rbit	r3, r3
 80029a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80029a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029a6:	fab3 f383 	clz	r3, r3
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	461a      	mov	r2, r3
 80029ae:	4b26      	ldr	r3, [pc, #152]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029b0:	4413      	add	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	461a      	mov	r2, r3
 80029b6:	2301      	movs	r3, #1
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c2:	fa93 f3a3 	rbit	r3, r3
 80029c6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80029c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029ca:	fab3 f383 	clz	r3, r3
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	461a      	mov	r2, r3
 80029d2:	4b1d      	ldr	r3, [pc, #116]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029d4:	4413      	add	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	461a      	mov	r2, r3
 80029da:	2300      	movs	r3, #0
 80029dc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029de:	4a18      	ldr	r2, [pc, #96]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029e2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d04b      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ee:	f7fe f8a9 	bl	8000b44 <HAL_GetTick>
 80029f2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f4:	e00a      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f6:	f7fe f8a5 	bl	8000b44 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e180      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a12:	fa93 f3a3 	rbit	r3, r3
 8002a16:	627b      	str	r3, [r7, #36]	; 0x24
 8002a18:	2302      	movs	r3, #2
 8002a1a:	623b      	str	r3, [r7, #32]
 8002a1c:	6a3b      	ldr	r3, [r7, #32]
 8002a1e:	fa93 f3a3 	rbit	r3, r3
 8002a22:	61fb      	str	r3, [r7, #28]
  return result;
 8002a24:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a26:	fab3 f383 	clz	r3, r3
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	095b      	lsrs	r3, r3, #5
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	f043 0302 	orr.w	r3, r3, #2
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d108      	bne.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002a3a:	4b01      	ldr	r3, [pc, #4]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	e00d      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002a40:	40021000 	.word	0x40021000
 8002a44:	40007000 	.word	0x40007000
 8002a48:	10908100 	.word	0x10908100
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	fa93 f3a3 	rbit	r3, r3
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	4b9a      	ldr	r3, [pc, #616]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	613a      	str	r2, [r7, #16]
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	fa92 f2a2 	rbit	r2, r2
 8002a66:	60fa      	str	r2, [r7, #12]
  return result;
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	fab2 f282 	clz	r2, r2
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	f002 021f 	and.w	r2, r2, #31
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a80:	4013      	ands	r3, r2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0b7      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002a86:	4b8f      	ldr	r3, [pc, #572]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	498c      	ldr	r1, [pc, #560]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a98:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d105      	bne.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aa0:	4b88      	ldr	r3, [pc, #544]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	4a87      	ldr	r2, [pc, #540]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aaa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d008      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ab8:	4b82      	ldr	r3, [pc, #520]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abc:	f023 0203 	bic.w	r2, r3, #3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	497f      	ldr	r1, [pc, #508]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d008      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ad6:	4b7b      	ldr	r3, [pc, #492]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	4978      	ldr	r1, [pc, #480]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d008      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002af4:	4b73      	ldr	r3, [pc, #460]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	4970      	ldr	r1, [pc, #448]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0320 	and.w	r3, r3, #32
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d008      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b12:	4b6c      	ldr	r3, [pc, #432]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	f023 0210 	bic.w	r2, r3, #16
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	4969      	ldr	r1, [pc, #420]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d008      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002b30:	4b64      	ldr	r3, [pc, #400]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3c:	4961      	ldr	r1, [pc, #388]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d008      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b4e:	4b5d      	ldr	r3, [pc, #372]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	f023 0220 	bic.w	r2, r3, #32
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	495a      	ldr	r1, [pc, #360]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d008      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b6c:	4b55      	ldr	r3, [pc, #340]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b70:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	4952      	ldr	r1, [pc, #328]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d008      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b8a:	4b4e      	ldr	r3, [pc, #312]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	494b      	ldr	r1, [pc, #300]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0310 	and.w	r3, r3, #16
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d008      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ba8:	4b46      	ldr	r3, [pc, #280]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	4943      	ldr	r1, [pc, #268]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d008      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002bc6:	4b3f      	ldr	r3, [pc, #252]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	493c      	ldr	r1, [pc, #240]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d008      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002be4:	4b37      	ldr	r3, [pc, #220]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf0:	4934      	ldr	r1, [pc, #208]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d008      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002c02:	4b30      	ldr	r3, [pc, #192]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c06:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0e:	492d      	ldr	r1, [pc, #180]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d008      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002c20:	4b28      	ldr	r3, [pc, #160]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2c:	4925      	ldr	r1, [pc, #148]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d008      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002c3e:	4b21      	ldr	r3, [pc, #132]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	491e      	ldr	r1, [pc, #120]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d008      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002c5c:	4b19      	ldr	r3, [pc, #100]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c68:	4916      	ldr	r1, [pc, #88]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d008      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002c7a:	4b12      	ldr	r3, [pc, #72]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c86:	490f      	ldr	r1, [pc, #60]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002c98:	4b0a      	ldr	r3, [pc, #40]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca4:	4907      	ldr	r1, [pc, #28]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00c      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002cb6:	4b03      	ldr	r3, [pc, #12]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	e002      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cca:	4913      	ldr	r1, [pc, #76]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d008      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002cdc:	4b0e      	ldr	r3, [pc, #56]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce8:	490b      	ldr	r1, [pc, #44]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d008      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002cfa:	4b07      	ldr	r3, [pc, #28]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d06:	4904      	ldr	r1, [pc, #16]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3748      	adds	r7, #72	; 0x48
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40021000 	.word	0x40021000

08002d1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e040      	b.n	8002db0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d106      	bne.n	8002d44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7fd fda8 	bl	8000894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2224      	movs	r2, #36	; 0x24
 8002d48:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0201 	bic.w	r2, r2, #1
 8002d58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 fbba 	bl	80034d4 <UART_SetConfig>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e022      	b.n	8002db0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d002      	beq.n	8002d78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 fd82 	bl	800387c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0201 	orr.w	r2, r2, #1
 8002da6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 fe09 	bl	80039c0 <UART_CheckIdleState>
 8002dae:	4603      	mov	r3, r0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08a      	sub	sp, #40	; 0x28
 8002dbc:	af02      	add	r7, sp, #8
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	603b      	str	r3, [r7, #0]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dcc:	2b20      	cmp	r3, #32
 8002dce:	d178      	bne.n	8002ec2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <HAL_UART_Transmit+0x24>
 8002dd6:	88fb      	ldrh	r3, [r7, #6]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e071      	b.n	8002ec4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2221      	movs	r2, #33	; 0x21
 8002dec:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dee:	f7fd fea9 	bl	8000b44 <HAL_GetTick>
 8002df2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	88fa      	ldrh	r2, [r7, #6]
 8002df8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	88fa      	ldrh	r2, [r7, #6]
 8002e00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e0c:	d108      	bne.n	8002e20 <HAL_UART_Transmit+0x68>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d104      	bne.n	8002e20 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002e16:	2300      	movs	r3, #0
 8002e18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	61bb      	str	r3, [r7, #24]
 8002e1e:	e003      	b.n	8002e28 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e28:	e030      	b.n	8002e8c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	2200      	movs	r2, #0
 8002e32:	2180      	movs	r1, #128	; 0x80
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 fe6b 	bl	8003b10 <UART_WaitOnFlagUntilTimeout>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d004      	beq.n	8002e4a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2220      	movs	r2, #32
 8002e44:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e03c      	b.n	8002ec4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10b      	bne.n	8002e68 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	881a      	ldrh	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e5c:	b292      	uxth	r2, r2
 8002e5e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	3302      	adds	r3, #2
 8002e64:	61bb      	str	r3, [r7, #24]
 8002e66:	e008      	b.n	8002e7a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	781a      	ldrb	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	b292      	uxth	r2, r2
 8002e72:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	3301      	adds	r3, #1
 8002e78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1c8      	bne.n	8002e2a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	2140      	movs	r1, #64	; 0x40
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 fe34 	bl	8003b10 <UART_WaitOnFlagUntilTimeout>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d004      	beq.n	8002eb8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2220      	movs	r2, #32
 8002eb2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e005      	b.n	8002ec4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	e000      	b.n	8002ec4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002ec2:	2302      	movs	r3, #2
  }
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3720      	adds	r7, #32
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b0ba      	sub	sp, #232	; 0xe8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002ef2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002ef6:	f640 030f 	movw	r3, #2063	; 0x80f
 8002efa:	4013      	ands	r3, r2
 8002efc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002f00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d115      	bne.n	8002f34 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f0c:	f003 0320 	and.w	r3, r3, #32
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00f      	beq.n	8002f34 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f18:	f003 0320 	and.w	r3, r3, #32
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d009      	beq.n	8002f34 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 82ab 	beq.w	8003480 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	4798      	blx	r3
      }
      return;
 8002f32:	e2a5      	b.n	8003480 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002f34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 8117 	beq.w	800316c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002f3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002f4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002f4e:	4b85      	ldr	r3, [pc, #532]	; (8003164 <HAL_UART_IRQHandler+0x298>)
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 810a 	beq.w	800316c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d011      	beq.n	8002f88 <HAL_UART_IRQHandler+0xbc>
 8002f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00b      	beq.n	8002f88 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2201      	movs	r2, #1
 8002f76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f7e:	f043 0201 	orr.w	r2, r3, #1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d011      	beq.n	8002fb8 <HAL_UART_IRQHandler+0xec>
 8002f94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00b      	beq.n	8002fb8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fae:	f043 0204 	orr.w	r2, r3, #4
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d011      	beq.n	8002fe8 <HAL_UART_IRQHandler+0x11c>
 8002fc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00b      	beq.n	8002fe8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2204      	movs	r2, #4
 8002fd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fde:	f043 0202 	orr.w	r2, r3, #2
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d017      	beq.n	8003024 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ff8:	f003 0320 	and.w	r3, r3, #32
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d105      	bne.n	800300c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003004:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00b      	beq.n	8003024 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2208      	movs	r2, #8
 8003012:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800301a:	f043 0208 	orr.w	r2, r3, #8
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800302c:	2b00      	cmp	r3, #0
 800302e:	d012      	beq.n	8003056 <HAL_UART_IRQHandler+0x18a>
 8003030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003034:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00c      	beq.n	8003056 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003044:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800304c:	f043 0220 	orr.w	r2, r3, #32
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 8211 	beq.w	8003484 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003066:	f003 0320 	and.w	r3, r3, #32
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00d      	beq.n	800308a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800306e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003072:	f003 0320 	and.w	r3, r3, #32
 8003076:	2b00      	cmp	r3, #0
 8003078:	d007      	beq.n	800308a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003090:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309e:	2b40      	cmp	r3, #64	; 0x40
 80030a0:	d005      	beq.n	80030ae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80030a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d04f      	beq.n	800314e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 fe5c 	bl	8003d6c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030be:	2b40      	cmp	r3, #64	; 0x40
 80030c0:	d141      	bne.n	8003146 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	3308      	adds	r3, #8
 80030c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030d0:	e853 3f00 	ldrex	r3, [r3]
 80030d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80030d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	3308      	adds	r3, #8
 80030ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80030ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80030f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80030fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80030fe:	e841 2300 	strex	r3, r2, [r1]
 8003102:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003106:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1d9      	bne.n	80030c2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003112:	2b00      	cmp	r3, #0
 8003114:	d013      	beq.n	800313e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800311a:	4a13      	ldr	r2, [pc, #76]	; (8003168 <HAL_UART_IRQHandler+0x29c>)
 800311c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003122:	4618      	mov	r0, r3
 8003124:	f7fd ff57 	bl	8000fd6 <HAL_DMA_Abort_IT>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d017      	beq.n	800315e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003138:	4610      	mov	r0, r2
 800313a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800313c:	e00f      	b.n	800315e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f9be 	bl	80034c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003144:	e00b      	b.n	800315e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f9ba 	bl	80034c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800314c:	e007      	b.n	800315e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f9b6 	bl	80034c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800315c:	e192      	b.n	8003484 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800315e:	bf00      	nop
    return;
 8003160:	e190      	b.n	8003484 <HAL_UART_IRQHandler+0x5b8>
 8003162:	bf00      	nop
 8003164:	04000120 	.word	0x04000120
 8003168:	08003e35 	.word	0x08003e35

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003170:	2b01      	cmp	r3, #1
 8003172:	f040 814b 	bne.w	800340c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800317a:	f003 0310 	and.w	r3, r3, #16
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 8144 	beq.w	800340c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003188:	f003 0310 	and.w	r3, r3, #16
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 813d 	beq.w	800340c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2210      	movs	r2, #16
 8003198:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a4:	2b40      	cmp	r3, #64	; 0x40
 80031a6:	f040 80b5 	bne.w	8003314 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031b6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 8164 	beq.w	8003488 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80031c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031ca:	429a      	cmp	r2, r3
 80031cc:	f080 815c 	bcs.w	8003488 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	f000 8086 	beq.w	80032f2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031f2:	e853 3f00 	ldrex	r3, [r3]
 80031f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80031fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003202:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003210:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003214:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003218:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800321c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003220:	e841 2300 	strex	r3, r2, [r1]
 8003224:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003228:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1da      	bne.n	80031e6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	3308      	adds	r3, #8
 8003236:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003238:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800323a:	e853 3f00 	ldrex	r3, [r3]
 800323e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003240:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003242:	f023 0301 	bic.w	r3, r3, #1
 8003246:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	3308      	adds	r3, #8
 8003250:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003254:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003258:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800325c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003260:	e841 2300 	strex	r3, r2, [r1]
 8003264:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003266:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1e1      	bne.n	8003230 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	3308      	adds	r3, #8
 8003272:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003274:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003276:	e853 3f00 	ldrex	r3, [r3]
 800327a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800327c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800327e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003282:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	3308      	adds	r3, #8
 800328c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003290:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003292:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003294:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003296:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003298:	e841 2300 	strex	r3, r2, [r1]
 800329c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800329e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1e3      	bne.n	800326c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ba:	e853 3f00 	ldrex	r3, [r3]
 80032be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80032c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032c2:	f023 0310 	bic.w	r3, r3, #16
 80032c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	461a      	mov	r2, r3
 80032d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80032d6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80032da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032dc:	e841 2300 	strex	r3, r2, [r1]
 80032e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80032e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1e4      	bne.n	80032b2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fd fe39 	bl	8000f64 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2202      	movs	r2, #2
 80032f6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003304:	b29b      	uxth	r3, r3
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	b29b      	uxth	r3, r3
 800330a:	4619      	mov	r1, r3
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7fc ff69 	bl	80001e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003312:	e0b9      	b.n	8003488 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003320:	b29b      	uxth	r3, r3
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800332e:	b29b      	uxth	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 80ab 	beq.w	800348c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003336:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 80a6 	beq.w	800348c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003348:	e853 3f00 	ldrex	r3, [r3]
 800334c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800334e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003350:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003354:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	461a      	mov	r2, r3
 800335e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003362:	647b      	str	r3, [r7, #68]	; 0x44
 8003364:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003366:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003368:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800336a:	e841 2300 	strex	r3, r2, [r1]
 800336e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1e4      	bne.n	8003340 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	3308      	adds	r3, #8
 800337c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	e853 3f00 	ldrex	r3, [r3]
 8003384:	623b      	str	r3, [r7, #32]
   return(result);
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	f023 0301 	bic.w	r3, r3, #1
 800338c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	3308      	adds	r3, #8
 8003396:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800339a:	633a      	str	r2, [r7, #48]	; 0x30
 800339c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033a2:	e841 2300 	strex	r3, r2, [r1]
 80033a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1e3      	bne.n	8003376 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2220      	movs	r2, #32
 80033b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	e853 3f00 	ldrex	r3, [r3]
 80033ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f023 0310 	bic.w	r3, r3, #16
 80033d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	461a      	mov	r2, r3
 80033e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033e4:	61fb      	str	r3, [r7, #28]
 80033e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e8:	69b9      	ldr	r1, [r7, #24]
 80033ea:	69fa      	ldr	r2, [r7, #28]
 80033ec:	e841 2300 	strex	r3, r2, [r1]
 80033f0:	617b      	str	r3, [r7, #20]
   return(result);
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1e4      	bne.n	80033c2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003402:	4619      	mov	r1, r3
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f7fc feed 	bl	80001e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800340a:	e03f      	b.n	800348c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800340c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003410:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00e      	beq.n	8003436 <HAL_UART_IRQHandler+0x56a>
 8003418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800341c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d008      	beq.n	8003436 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800342c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 fee8 	bl	8004204 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003434:	e02d      	b.n	8003492 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800343a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00e      	beq.n	8003460 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344a:	2b00      	cmp	r3, #0
 800344c:	d008      	beq.n	8003460 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003452:	2b00      	cmp	r3, #0
 8003454:	d01c      	beq.n	8003490 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	4798      	blx	r3
    }
    return;
 800345e:	e017      	b.n	8003490 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003468:	2b00      	cmp	r3, #0
 800346a:	d012      	beq.n	8003492 <HAL_UART_IRQHandler+0x5c6>
 800346c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00c      	beq.n	8003492 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 fcf1 	bl	8003e60 <UART_EndTransmit_IT>
    return;
 800347e:	e008      	b.n	8003492 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003480:	bf00      	nop
 8003482:	e006      	b.n	8003492 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003484:	bf00      	nop
 8003486:	e004      	b.n	8003492 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003488:	bf00      	nop
 800348a:	e002      	b.n	8003492 <HAL_UART_IRQHandler+0x5c6>
      return;
 800348c:	bf00      	nop
 800348e:	e000      	b.n	8003492 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003490:	bf00      	nop
  }

}
 8003492:	37e8      	adds	r7, #232	; 0xe8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034dc:	2300      	movs	r3, #0
 80034de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	4b92      	ldr	r3, [pc, #584]	; (8003748 <UART_SetConfig+0x274>)
 8003500:	4013      	ands	r3, r2
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6812      	ldr	r2, [r2, #0]
 8003506:	6979      	ldr	r1, [r7, #20]
 8003508:	430b      	orrs	r3, r1
 800350a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	4313      	orrs	r3, r2
 8003530:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	430a      	orrs	r2, r1
 8003544:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a80      	ldr	r2, [pc, #512]	; (800374c <UART_SetConfig+0x278>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d120      	bne.n	8003592 <UART_SetConfig+0xbe>
 8003550:	4b7f      	ldr	r3, [pc, #508]	; (8003750 <UART_SetConfig+0x27c>)
 8003552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003554:	f003 0303 	and.w	r3, r3, #3
 8003558:	2b03      	cmp	r3, #3
 800355a:	d817      	bhi.n	800358c <UART_SetConfig+0xb8>
 800355c:	a201      	add	r2, pc, #4	; (adr r2, 8003564 <UART_SetConfig+0x90>)
 800355e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003562:	bf00      	nop
 8003564:	08003575 	.word	0x08003575
 8003568:	08003581 	.word	0x08003581
 800356c:	08003587 	.word	0x08003587
 8003570:	0800357b 	.word	0x0800357b
 8003574:	2301      	movs	r3, #1
 8003576:	77fb      	strb	r3, [r7, #31]
 8003578:	e0b5      	b.n	80036e6 <UART_SetConfig+0x212>
 800357a:	2302      	movs	r3, #2
 800357c:	77fb      	strb	r3, [r7, #31]
 800357e:	e0b2      	b.n	80036e6 <UART_SetConfig+0x212>
 8003580:	2304      	movs	r3, #4
 8003582:	77fb      	strb	r3, [r7, #31]
 8003584:	e0af      	b.n	80036e6 <UART_SetConfig+0x212>
 8003586:	2308      	movs	r3, #8
 8003588:	77fb      	strb	r3, [r7, #31]
 800358a:	e0ac      	b.n	80036e6 <UART_SetConfig+0x212>
 800358c:	2310      	movs	r3, #16
 800358e:	77fb      	strb	r3, [r7, #31]
 8003590:	e0a9      	b.n	80036e6 <UART_SetConfig+0x212>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a6f      	ldr	r2, [pc, #444]	; (8003754 <UART_SetConfig+0x280>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d124      	bne.n	80035e6 <UART_SetConfig+0x112>
 800359c:	4b6c      	ldr	r3, [pc, #432]	; (8003750 <UART_SetConfig+0x27c>)
 800359e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80035a8:	d011      	beq.n	80035ce <UART_SetConfig+0xfa>
 80035aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80035ae:	d817      	bhi.n	80035e0 <UART_SetConfig+0x10c>
 80035b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035b4:	d011      	beq.n	80035da <UART_SetConfig+0x106>
 80035b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035ba:	d811      	bhi.n	80035e0 <UART_SetConfig+0x10c>
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <UART_SetConfig+0xf4>
 80035c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c4:	d006      	beq.n	80035d4 <UART_SetConfig+0x100>
 80035c6:	e00b      	b.n	80035e0 <UART_SetConfig+0x10c>
 80035c8:	2300      	movs	r3, #0
 80035ca:	77fb      	strb	r3, [r7, #31]
 80035cc:	e08b      	b.n	80036e6 <UART_SetConfig+0x212>
 80035ce:	2302      	movs	r3, #2
 80035d0:	77fb      	strb	r3, [r7, #31]
 80035d2:	e088      	b.n	80036e6 <UART_SetConfig+0x212>
 80035d4:	2304      	movs	r3, #4
 80035d6:	77fb      	strb	r3, [r7, #31]
 80035d8:	e085      	b.n	80036e6 <UART_SetConfig+0x212>
 80035da:	2308      	movs	r3, #8
 80035dc:	77fb      	strb	r3, [r7, #31]
 80035de:	e082      	b.n	80036e6 <UART_SetConfig+0x212>
 80035e0:	2310      	movs	r3, #16
 80035e2:	77fb      	strb	r3, [r7, #31]
 80035e4:	e07f      	b.n	80036e6 <UART_SetConfig+0x212>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a5b      	ldr	r2, [pc, #364]	; (8003758 <UART_SetConfig+0x284>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d124      	bne.n	800363a <UART_SetConfig+0x166>
 80035f0:	4b57      	ldr	r3, [pc, #348]	; (8003750 <UART_SetConfig+0x27c>)
 80035f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80035f8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80035fc:	d011      	beq.n	8003622 <UART_SetConfig+0x14e>
 80035fe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003602:	d817      	bhi.n	8003634 <UART_SetConfig+0x160>
 8003604:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003608:	d011      	beq.n	800362e <UART_SetConfig+0x15a>
 800360a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800360e:	d811      	bhi.n	8003634 <UART_SetConfig+0x160>
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <UART_SetConfig+0x148>
 8003614:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003618:	d006      	beq.n	8003628 <UART_SetConfig+0x154>
 800361a:	e00b      	b.n	8003634 <UART_SetConfig+0x160>
 800361c:	2300      	movs	r3, #0
 800361e:	77fb      	strb	r3, [r7, #31]
 8003620:	e061      	b.n	80036e6 <UART_SetConfig+0x212>
 8003622:	2302      	movs	r3, #2
 8003624:	77fb      	strb	r3, [r7, #31]
 8003626:	e05e      	b.n	80036e6 <UART_SetConfig+0x212>
 8003628:	2304      	movs	r3, #4
 800362a:	77fb      	strb	r3, [r7, #31]
 800362c:	e05b      	b.n	80036e6 <UART_SetConfig+0x212>
 800362e:	2308      	movs	r3, #8
 8003630:	77fb      	strb	r3, [r7, #31]
 8003632:	e058      	b.n	80036e6 <UART_SetConfig+0x212>
 8003634:	2310      	movs	r3, #16
 8003636:	77fb      	strb	r3, [r7, #31]
 8003638:	e055      	b.n	80036e6 <UART_SetConfig+0x212>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a47      	ldr	r2, [pc, #284]	; (800375c <UART_SetConfig+0x288>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d124      	bne.n	800368e <UART_SetConfig+0x1ba>
 8003644:	4b42      	ldr	r3, [pc, #264]	; (8003750 <UART_SetConfig+0x27c>)
 8003646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003648:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800364c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003650:	d011      	beq.n	8003676 <UART_SetConfig+0x1a2>
 8003652:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003656:	d817      	bhi.n	8003688 <UART_SetConfig+0x1b4>
 8003658:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800365c:	d011      	beq.n	8003682 <UART_SetConfig+0x1ae>
 800365e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003662:	d811      	bhi.n	8003688 <UART_SetConfig+0x1b4>
 8003664:	2b00      	cmp	r3, #0
 8003666:	d003      	beq.n	8003670 <UART_SetConfig+0x19c>
 8003668:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800366c:	d006      	beq.n	800367c <UART_SetConfig+0x1a8>
 800366e:	e00b      	b.n	8003688 <UART_SetConfig+0x1b4>
 8003670:	2300      	movs	r3, #0
 8003672:	77fb      	strb	r3, [r7, #31]
 8003674:	e037      	b.n	80036e6 <UART_SetConfig+0x212>
 8003676:	2302      	movs	r3, #2
 8003678:	77fb      	strb	r3, [r7, #31]
 800367a:	e034      	b.n	80036e6 <UART_SetConfig+0x212>
 800367c:	2304      	movs	r3, #4
 800367e:	77fb      	strb	r3, [r7, #31]
 8003680:	e031      	b.n	80036e6 <UART_SetConfig+0x212>
 8003682:	2308      	movs	r3, #8
 8003684:	77fb      	strb	r3, [r7, #31]
 8003686:	e02e      	b.n	80036e6 <UART_SetConfig+0x212>
 8003688:	2310      	movs	r3, #16
 800368a:	77fb      	strb	r3, [r7, #31]
 800368c:	e02b      	b.n	80036e6 <UART_SetConfig+0x212>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a33      	ldr	r2, [pc, #204]	; (8003760 <UART_SetConfig+0x28c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d124      	bne.n	80036e2 <UART_SetConfig+0x20e>
 8003698:	4b2d      	ldr	r3, [pc, #180]	; (8003750 <UART_SetConfig+0x27c>)
 800369a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80036a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036a4:	d011      	beq.n	80036ca <UART_SetConfig+0x1f6>
 80036a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036aa:	d817      	bhi.n	80036dc <UART_SetConfig+0x208>
 80036ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036b0:	d011      	beq.n	80036d6 <UART_SetConfig+0x202>
 80036b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036b6:	d811      	bhi.n	80036dc <UART_SetConfig+0x208>
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <UART_SetConfig+0x1f0>
 80036bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036c0:	d006      	beq.n	80036d0 <UART_SetConfig+0x1fc>
 80036c2:	e00b      	b.n	80036dc <UART_SetConfig+0x208>
 80036c4:	2300      	movs	r3, #0
 80036c6:	77fb      	strb	r3, [r7, #31]
 80036c8:	e00d      	b.n	80036e6 <UART_SetConfig+0x212>
 80036ca:	2302      	movs	r3, #2
 80036cc:	77fb      	strb	r3, [r7, #31]
 80036ce:	e00a      	b.n	80036e6 <UART_SetConfig+0x212>
 80036d0:	2304      	movs	r3, #4
 80036d2:	77fb      	strb	r3, [r7, #31]
 80036d4:	e007      	b.n	80036e6 <UART_SetConfig+0x212>
 80036d6:	2308      	movs	r3, #8
 80036d8:	77fb      	strb	r3, [r7, #31]
 80036da:	e004      	b.n	80036e6 <UART_SetConfig+0x212>
 80036dc:	2310      	movs	r3, #16
 80036de:	77fb      	strb	r3, [r7, #31]
 80036e0:	e001      	b.n	80036e6 <UART_SetConfig+0x212>
 80036e2:	2310      	movs	r3, #16
 80036e4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036ee:	d16b      	bne.n	80037c8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80036f0:	7ffb      	ldrb	r3, [r7, #31]
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d838      	bhi.n	8003768 <UART_SetConfig+0x294>
 80036f6:	a201      	add	r2, pc, #4	; (adr r2, 80036fc <UART_SetConfig+0x228>)
 80036f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fc:	08003721 	.word	0x08003721
 8003700:	08003729 	.word	0x08003729
 8003704:	08003731 	.word	0x08003731
 8003708:	08003769 	.word	0x08003769
 800370c:	08003737 	.word	0x08003737
 8003710:	08003769 	.word	0x08003769
 8003714:	08003769 	.word	0x08003769
 8003718:	08003769 	.word	0x08003769
 800371c:	0800373f 	.word	0x0800373f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003720:	f7ff f89a 	bl	8002858 <HAL_RCC_GetPCLK1Freq>
 8003724:	61b8      	str	r0, [r7, #24]
        break;
 8003726:	e024      	b.n	8003772 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003728:	f7ff f8b8 	bl	800289c <HAL_RCC_GetPCLK2Freq>
 800372c:	61b8      	str	r0, [r7, #24]
        break;
 800372e:	e020      	b.n	8003772 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003730:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <UART_SetConfig+0x290>)
 8003732:	61bb      	str	r3, [r7, #24]
        break;
 8003734:	e01d      	b.n	8003772 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003736:	f7ff f819 	bl	800276c <HAL_RCC_GetSysClockFreq>
 800373a:	61b8      	str	r0, [r7, #24]
        break;
 800373c:	e019      	b.n	8003772 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800373e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003742:	61bb      	str	r3, [r7, #24]
        break;
 8003744:	e015      	b.n	8003772 <UART_SetConfig+0x29e>
 8003746:	bf00      	nop
 8003748:	efff69f3 	.word	0xefff69f3
 800374c:	40013800 	.word	0x40013800
 8003750:	40021000 	.word	0x40021000
 8003754:	40004400 	.word	0x40004400
 8003758:	40004800 	.word	0x40004800
 800375c:	40004c00 	.word	0x40004c00
 8003760:	40005000 	.word	0x40005000
 8003764:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	77bb      	strb	r3, [r7, #30]
        break;
 8003770:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d073      	beq.n	8003860 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	005a      	lsls	r2, r3, #1
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	085b      	lsrs	r3, r3, #1
 8003782:	441a      	add	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	fbb2 f3f3 	udiv	r3, r2, r3
 800378c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	2b0f      	cmp	r3, #15
 8003792:	d916      	bls.n	80037c2 <UART_SetConfig+0x2ee>
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800379a:	d212      	bcs.n	80037c2 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	b29b      	uxth	r3, r3
 80037a0:	f023 030f 	bic.w	r3, r3, #15
 80037a4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	085b      	lsrs	r3, r3, #1
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	f003 0307 	and.w	r3, r3, #7
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	89fb      	ldrh	r3, [r7, #14]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	89fa      	ldrh	r2, [r7, #14]
 80037be:	60da      	str	r2, [r3, #12]
 80037c0:	e04e      	b.n	8003860 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	77bb      	strb	r3, [r7, #30]
 80037c6:	e04b      	b.n	8003860 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037c8:	7ffb      	ldrb	r3, [r7, #31]
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d827      	bhi.n	800381e <UART_SetConfig+0x34a>
 80037ce:	a201      	add	r2, pc, #4	; (adr r2, 80037d4 <UART_SetConfig+0x300>)
 80037d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d4:	080037f9 	.word	0x080037f9
 80037d8:	08003801 	.word	0x08003801
 80037dc:	08003809 	.word	0x08003809
 80037e0:	0800381f 	.word	0x0800381f
 80037e4:	0800380f 	.word	0x0800380f
 80037e8:	0800381f 	.word	0x0800381f
 80037ec:	0800381f 	.word	0x0800381f
 80037f0:	0800381f 	.word	0x0800381f
 80037f4:	08003817 	.word	0x08003817
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037f8:	f7ff f82e 	bl	8002858 <HAL_RCC_GetPCLK1Freq>
 80037fc:	61b8      	str	r0, [r7, #24]
        break;
 80037fe:	e013      	b.n	8003828 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003800:	f7ff f84c 	bl	800289c <HAL_RCC_GetPCLK2Freq>
 8003804:	61b8      	str	r0, [r7, #24]
        break;
 8003806:	e00f      	b.n	8003828 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003808:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <UART_SetConfig+0x3a4>)
 800380a:	61bb      	str	r3, [r7, #24]
        break;
 800380c:	e00c      	b.n	8003828 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800380e:	f7fe ffad 	bl	800276c <HAL_RCC_GetSysClockFreq>
 8003812:	61b8      	str	r0, [r7, #24]
        break;
 8003814:	e008      	b.n	8003828 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800381a:	61bb      	str	r3, [r7, #24]
        break;
 800381c:	e004      	b.n	8003828 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800381e:	2300      	movs	r3, #0
 8003820:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	77bb      	strb	r3, [r7, #30]
        break;
 8003826:	bf00      	nop
    }

    if (pclk != 0U)
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d018      	beq.n	8003860 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	085a      	lsrs	r2, r3, #1
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	441a      	add	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003840:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	2b0f      	cmp	r3, #15
 8003846:	d909      	bls.n	800385c <UART_SetConfig+0x388>
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800384e:	d205      	bcs.n	800385c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	b29a      	uxth	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	60da      	str	r2, [r3, #12]
 800385a:	e001      	b.n	8003860 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800386c:	7fbb      	ldrb	r3, [r7, #30]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3720      	adds	r7, #32
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	007a1200 	.word	0x007a1200

0800387c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00a      	beq.n	80038a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00a      	beq.n	80038ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00a      	beq.n	800390c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	f003 0310 	and.w	r3, r3, #16
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00a      	beq.n	800392e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003932:	f003 0320 	and.w	r3, r3, #32
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00a      	beq.n	8003950 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003958:	2b00      	cmp	r3, #0
 800395a:	d01a      	beq.n	8003992 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800397a:	d10a      	bne.n	8003992 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	605a      	str	r2, [r3, #4]
  }
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b098      	sub	sp, #96	; 0x60
 80039c4:	af02      	add	r7, sp, #8
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039d0:	f7fd f8b8 	bl	8000b44 <HAL_GetTick>
 80039d4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0308 	and.w	r3, r3, #8
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	d12e      	bne.n	8003a42 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ec:	2200      	movs	r2, #0
 80039ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f88c 	bl	8003b10 <UART_WaitOnFlagUntilTimeout>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d021      	beq.n	8003a42 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a06:	e853 3f00 	ldrex	r3, [r3]
 8003a0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a12:	653b      	str	r3, [r7, #80]	; 0x50
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a1c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a1e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a24:	e841 2300 	strex	r3, r2, [r1]
 8003a28:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1e6      	bne.n	80039fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2220      	movs	r2, #32
 8003a34:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e062      	b.n	8003b08 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b04      	cmp	r3, #4
 8003a4e:	d149      	bne.n	8003ae4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f856 	bl	8003b10 <UART_WaitOnFlagUntilTimeout>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d03c      	beq.n	8003ae4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	e853 3f00 	ldrex	r3, [r3]
 8003a76:	623b      	str	r3, [r7, #32]
   return(result);
 8003a78:	6a3b      	ldr	r3, [r7, #32]
 8003a7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	461a      	mov	r2, r3
 8003a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a88:	633b      	str	r3, [r7, #48]	; 0x30
 8003a8a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a90:	e841 2300 	strex	r3, r2, [r1]
 8003a94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1e6      	bne.n	8003a6a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	3308      	adds	r3, #8
 8003aa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	e853 3f00 	ldrex	r3, [r3]
 8003aaa:	60fb      	str	r3, [r7, #12]
   return(result);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 0301 	bic.w	r3, r3, #1
 8003ab2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	3308      	adds	r3, #8
 8003aba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003abc:	61fa      	str	r2, [r7, #28]
 8003abe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac0:	69b9      	ldr	r1, [r7, #24]
 8003ac2:	69fa      	ldr	r2, [r7, #28]
 8003ac4:	e841 2300 	strex	r3, r2, [r1]
 8003ac8:	617b      	str	r3, [r7, #20]
   return(result);
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1e5      	bne.n	8003a9c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e011      	b.n	8003b08 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2220      	movs	r2, #32
 8003aee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3758      	adds	r7, #88	; 0x58
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	603b      	str	r3, [r7, #0]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b20:	e049      	b.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b28:	d045      	beq.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b2a:	f7fd f80b 	bl	8000b44 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d302      	bcc.n	8003b40 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e048      	b.n	8003bd6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0304 	and.w	r3, r3, #4
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d031      	beq.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	69db      	ldr	r3, [r3, #28]
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d110      	bne.n	8003b82 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2208      	movs	r2, #8
 8003b66:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f000 f8ff 	bl	8003d6c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2208      	movs	r2, #8
 8003b72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e029      	b.n	8003bd6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b90:	d111      	bne.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 f8e5 	bl	8003d6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e00f      	b.n	8003bd6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	69da      	ldr	r2, [r3, #28]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	bf0c      	ite	eq
 8003bc6:	2301      	moveq	r3, #1
 8003bc8:	2300      	movne	r3, #0
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	461a      	mov	r2, r3
 8003bce:	79fb      	ldrb	r3, [r7, #7]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d0a6      	beq.n	8003b22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
	...

08003be0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b097      	sub	sp, #92	; 0x5c
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	4613      	mov	r3, r2
 8003bec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	88fa      	ldrh	r2, [r7, #6]
 8003bf8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	88fa      	ldrh	r2, [r7, #6]
 8003c00:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c12:	d10e      	bne.n	8003c32 <UART_Start_Receive_IT+0x52>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d105      	bne.n	8003c28 <UART_Start_Receive_IT+0x48>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003c22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c26:	e02d      	b.n	8003c84 <UART_Start_Receive_IT+0xa4>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	22ff      	movs	r2, #255	; 0xff
 8003c2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c30:	e028      	b.n	8003c84 <UART_Start_Receive_IT+0xa4>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10d      	bne.n	8003c56 <UART_Start_Receive_IT+0x76>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d104      	bne.n	8003c4c <UART_Start_Receive_IT+0x6c>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	22ff      	movs	r2, #255	; 0xff
 8003c46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c4a:	e01b      	b.n	8003c84 <UART_Start_Receive_IT+0xa4>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	227f      	movs	r2, #127	; 0x7f
 8003c50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c54:	e016      	b.n	8003c84 <UART_Start_Receive_IT+0xa4>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c5e:	d10d      	bne.n	8003c7c <UART_Start_Receive_IT+0x9c>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d104      	bne.n	8003c72 <UART_Start_Receive_IT+0x92>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	227f      	movs	r2, #127	; 0x7f
 8003c6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c70:	e008      	b.n	8003c84 <UART_Start_Receive_IT+0xa4>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	223f      	movs	r2, #63	; 0x3f
 8003c76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c7a:	e003      	b.n	8003c84 <UART_Start_Receive_IT+0xa4>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2222      	movs	r2, #34	; 0x22
 8003c90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3308      	adds	r3, #8
 8003c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c9e:	e853 3f00 	ldrex	r3, [r3]
 8003ca2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca6:	f043 0301 	orr.w	r3, r3, #1
 8003caa:	657b      	str	r3, [r7, #84]	; 0x54
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	3308      	adds	r3, #8
 8003cb2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003cb4:	64ba      	str	r2, [r7, #72]	; 0x48
 8003cb6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003cba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cbc:	e841 2300 	strex	r3, r2, [r1]
 8003cc0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003cc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1e5      	bne.n	8003c94 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd0:	d107      	bne.n	8003ce2 <UART_Start_Receive_IT+0x102>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d103      	bne.n	8003ce2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	4a21      	ldr	r2, [pc, #132]	; (8003d64 <UART_Start_Receive_IT+0x184>)
 8003cde:	669a      	str	r2, [r3, #104]	; 0x68
 8003ce0:	e002      	b.n	8003ce8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	4a20      	ldr	r2, [pc, #128]	; (8003d68 <UART_Start_Receive_IT+0x188>)
 8003ce6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d019      	beq.n	8003d24 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf8:	e853 3f00 	ldrex	r3, [r3]
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003d04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d0e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d10:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d16:	e841 2300 	strex	r3, r2, [r1]
 8003d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1e6      	bne.n	8003cf0 <UART_Start_Receive_IT+0x110>
 8003d22:	e018      	b.n	8003d56 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	e853 3f00 	ldrex	r3, [r3]
 8003d30:	613b      	str	r3, [r7, #16]
   return(result);
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	f043 0320 	orr.w	r3, r3, #32
 8003d38:	653b      	str	r3, [r7, #80]	; 0x50
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d42:	623b      	str	r3, [r7, #32]
 8003d44:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d46:	69f9      	ldr	r1, [r7, #28]
 8003d48:	6a3a      	ldr	r2, [r7, #32]
 8003d4a:	e841 2300 	strex	r3, r2, [r1]
 8003d4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1e6      	bne.n	8003d24 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	375c      	adds	r7, #92	; 0x5c
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	0800405d 	.word	0x0800405d
 8003d68:	08003eb5 	.word	0x08003eb5

08003d6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b095      	sub	sp, #84	; 0x54
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d7c:	e853 3f00 	ldrex	r3, [r3]
 8003d80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d92:	643b      	str	r3, [r7, #64]	; 0x40
 8003d94:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d9a:	e841 2300 	strex	r3, r2, [r1]
 8003d9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1e6      	bne.n	8003d74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	3308      	adds	r3, #8
 8003dac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	e853 3f00 	ldrex	r3, [r3]
 8003db4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	f023 0301 	bic.w	r3, r3, #1
 8003dbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	3308      	adds	r3, #8
 8003dc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dc8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dce:	e841 2300 	strex	r3, r2, [r1]
 8003dd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1e5      	bne.n	8003da6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d118      	bne.n	8003e14 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	e853 3f00 	ldrex	r3, [r3]
 8003dee:	60bb      	str	r3, [r7, #8]
   return(result);
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f023 0310 	bic.w	r3, r3, #16
 8003df6:	647b      	str	r3, [r7, #68]	; 0x44
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e00:	61bb      	str	r3, [r7, #24]
 8003e02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e04:	6979      	ldr	r1, [r7, #20]
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	e841 2300 	strex	r3, r2, [r1]
 8003e0c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1e6      	bne.n	8003de2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003e28:	bf00      	nop
 8003e2a:	3754      	adds	r7, #84	; 0x54
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f7ff fb34 	bl	80034c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e58:	bf00      	nop
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b088      	sub	sp, #32
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	e853 3f00 	ldrex	r3, [r3]
 8003e74:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e7c:	61fb      	str	r3, [r7, #28]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	461a      	mov	r2, r3
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	61bb      	str	r3, [r7, #24]
 8003e88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8a:	6979      	ldr	r1, [r7, #20]
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	e841 2300 	strex	r3, r2, [r1]
 8003e92:	613b      	str	r3, [r7, #16]
   return(result);
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1e6      	bne.n	8003e68 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7ff faf6 	bl	8003498 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003eac:	bf00      	nop
 8003eae:	3720      	adds	r7, #32
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b09c      	sub	sp, #112	; 0x70
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003ec2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ecc:	2b22      	cmp	r3, #34	; 0x22
 8003ece:	f040 80b9 	bne.w	8004044 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003ed8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003edc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003ee0:	b2d9      	uxtb	r1, r3
 8003ee2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eec:	400a      	ands	r2, r1
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f040 809c 	bne.w	8004054 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f24:	e853 3f00 	ldrex	r3, [r3]
 8003f28:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f30:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	461a      	mov	r2, r3
 8003f38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f3c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f42:	e841 2300 	strex	r3, r2, [r1]
 8003f46:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1e6      	bne.n	8003f1c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	3308      	adds	r3, #8
 8003f54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f58:	e853 3f00 	ldrex	r3, [r3]
 8003f5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f60:	f023 0301 	bic.w	r3, r3, #1
 8003f64:	667b      	str	r3, [r7, #100]	; 0x64
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3308      	adds	r3, #8
 8003f6c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003f6e:	647a      	str	r2, [r7, #68]	; 0x44
 8003f70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f76:	e841 2300 	strex	r3, r2, [r1]
 8003f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1e5      	bne.n	8003f4e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d018      	beq.n	8003fd6 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	e853 3f00 	ldrex	r3, [r3]
 8003fb0:	623b      	str	r3, [r7, #32]
   return(result);
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fb8:	663b      	str	r3, [r7, #96]	; 0x60
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fc2:	633b      	str	r3, [r7, #48]	; 0x30
 8003fc4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fca:	e841 2300 	strex	r3, r2, [r1]
 8003fce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1e6      	bne.n	8003fa4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d12e      	bne.n	800403c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f023 0310 	bic.w	r3, r3, #16
 8003ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004002:	61fb      	str	r3, [r7, #28]
 8004004:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	69b9      	ldr	r1, [r7, #24]
 8004008:	69fa      	ldr	r2, [r7, #28]
 800400a:	e841 2300 	strex	r3, r2, [r1]
 800400e:	617b      	str	r3, [r7, #20]
   return(result);
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1e6      	bne.n	8003fe4 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	f003 0310 	and.w	r3, r3, #16
 8004020:	2b10      	cmp	r3, #16
 8004022:	d103      	bne.n	800402c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2210      	movs	r2, #16
 800402a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004032:	4619      	mov	r1, r3
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f7fc f8d5 	bl	80001e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800403a:	e00b      	b.n	8004054 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f7ff fa35 	bl	80034ac <HAL_UART_RxCpltCallback>
}
 8004042:	e007      	b.n	8004054 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699a      	ldr	r2, [r3, #24]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0208 	orr.w	r2, r2, #8
 8004052:	619a      	str	r2, [r3, #24]
}
 8004054:	bf00      	nop
 8004056:	3770      	adds	r7, #112	; 0x70
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b09c      	sub	sp, #112	; 0x70
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800406a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004074:	2b22      	cmp	r3, #34	; 0x22
 8004076:	f040 80b9 	bne.w	80041ec <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004080:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004088:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800408a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800408e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004092:	4013      	ands	r3, r2
 8004094:	b29a      	uxth	r2, r3
 8004096:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004098:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409e:	1c9a      	adds	r2, r3, #2
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040bc:	b29b      	uxth	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f040 809c 	bne.w	80041fc <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040cc:	e853 3f00 	ldrex	r3, [r3]
 80040d0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80040d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040d8:	667b      	str	r3, [r7, #100]	; 0x64
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040e2:	657b      	str	r3, [r7, #84]	; 0x54
 80040e4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80040e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040ea:	e841 2300 	strex	r3, r2, [r1]
 80040ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80040f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1e6      	bne.n	80040c4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3308      	adds	r3, #8
 80040fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004100:	e853 3f00 	ldrex	r3, [r3]
 8004104:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004108:	f023 0301 	bic.w	r3, r3, #1
 800410c:	663b      	str	r3, [r7, #96]	; 0x60
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	3308      	adds	r3, #8
 8004114:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004116:	643a      	str	r2, [r7, #64]	; 0x40
 8004118:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800411c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800411e:	e841 2300 	strex	r3, r2, [r1]
 8004122:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1e5      	bne.n	80040f6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2220      	movs	r2, #32
 800412e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d018      	beq.n	800417e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	e853 3f00 	ldrex	r3, [r3]
 8004158:	61fb      	str	r3, [r7, #28]
   return(result);
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004160:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	461a      	mov	r2, r3
 8004168:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800416a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800416c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004172:	e841 2300 	strex	r3, r2, [r1]
 8004176:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1e6      	bne.n	800414c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004182:	2b01      	cmp	r3, #1
 8004184:	d12e      	bne.n	80041e4 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	e853 3f00 	ldrex	r3, [r3]
 8004198:	60bb      	str	r3, [r7, #8]
   return(result);
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	f023 0310 	bic.w	r3, r3, #16
 80041a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	461a      	mov	r2, r3
 80041a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041aa:	61bb      	str	r3, [r7, #24]
 80041ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ae:	6979      	ldr	r1, [r7, #20]
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	e841 2300 	strex	r3, r2, [r1]
 80041b6:	613b      	str	r3, [r7, #16]
   return(result);
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1e6      	bne.n	800418c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	69db      	ldr	r3, [r3, #28]
 80041c4:	f003 0310 	and.w	r3, r3, #16
 80041c8:	2b10      	cmp	r3, #16
 80041ca:	d103      	bne.n	80041d4 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2210      	movs	r2, #16
 80041d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80041da:	4619      	mov	r1, r3
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f7fc f801 	bl	80001e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80041e2:	e00b      	b.n	80041fc <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7ff f961 	bl	80034ac <HAL_UART_RxCpltCallback>
}
 80041ea:	e007      	b.n	80041fc <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699a      	ldr	r2, [r3, #24]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0208 	orr.w	r2, r2, #8
 80041fa:	619a      	str	r2, [r3, #24]
}
 80041fc:	bf00      	nop
 80041fe:	3770      	adds	r7, #112	; 0x70
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b08c      	sub	sp, #48	; 0x30
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	4613      	mov	r3, r2
 8004224:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800422c:	2b20      	cmp	r3, #32
 800422e:	d142      	bne.n	80042b6 <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d002      	beq.n	800423c <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 8004236:	88fb      	ldrh	r3, [r7, #6]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e03b      	b.n	80042b8 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2201      	movs	r2, #1
 8004244:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800424c:	88fb      	ldrh	r3, [r7, #6]
 800424e:	461a      	mov	r2, r3
 8004250:	68b9      	ldr	r1, [r7, #8]
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f7ff fcc4 	bl	8003be0 <UART_Start_Receive_IT>
 8004258:	4603      	mov	r3, r0
 800425a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800425e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004262:	2b00      	cmp	r3, #0
 8004264:	d124      	bne.n	80042b0 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800426a:	2b01      	cmp	r3, #1
 800426c:	d11d      	bne.n	80042aa <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2210      	movs	r2, #16
 8004274:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	e853 3f00 	ldrex	r3, [r3]
 8004282:	617b      	str	r3, [r7, #20]
   return(result);
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	f043 0310 	orr.w	r3, r3, #16
 800428a:	62bb      	str	r3, [r7, #40]	; 0x28
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	461a      	mov	r2, r3
 8004292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004294:	627b      	str	r3, [r7, #36]	; 0x24
 8004296:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004298:	6a39      	ldr	r1, [r7, #32]
 800429a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800429c:	e841 2300 	strex	r3, r2, [r1]
 80042a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1e6      	bne.n	8004276 <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 80042a8:	e002      	b.n	80042b0 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80042b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80042b4:	e000      	b.n	80042b8 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80042b6:	2302      	movs	r3, #2
  }
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3730      	adds	r7, #48	; 0x30
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <memset>:
 80042c0:	4402      	add	r2, r0
 80042c2:	4603      	mov	r3, r0
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d100      	bne.n	80042ca <memset+0xa>
 80042c8:	4770      	bx	lr
 80042ca:	f803 1b01 	strb.w	r1, [r3], #1
 80042ce:	e7f9      	b.n	80042c4 <memset+0x4>

080042d0 <strcat>:
 80042d0:	b510      	push	{r4, lr}
 80042d2:	4602      	mov	r2, r0
 80042d4:	7814      	ldrb	r4, [r2, #0]
 80042d6:	4613      	mov	r3, r2
 80042d8:	3201      	adds	r2, #1
 80042da:	2c00      	cmp	r4, #0
 80042dc:	d1fa      	bne.n	80042d4 <strcat+0x4>
 80042de:	3b01      	subs	r3, #1
 80042e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80042e4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80042e8:	2a00      	cmp	r2, #0
 80042ea:	d1f9      	bne.n	80042e0 <strcat+0x10>
 80042ec:	bd10      	pop	{r4, pc}

080042ee <strchr>:
 80042ee:	b2c9      	uxtb	r1, r1
 80042f0:	4603      	mov	r3, r0
 80042f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042f6:	b11a      	cbz	r2, 8004300 <strchr+0x12>
 80042f8:	428a      	cmp	r2, r1
 80042fa:	d1f9      	bne.n	80042f0 <strchr+0x2>
 80042fc:	4618      	mov	r0, r3
 80042fe:	4770      	bx	lr
 8004300:	2900      	cmp	r1, #0
 8004302:	bf18      	it	ne
 8004304:	2300      	movne	r3, #0
 8004306:	e7f9      	b.n	80042fc <strchr+0xe>

08004308 <strncpy>:
 8004308:	b510      	push	{r4, lr}
 800430a:	3901      	subs	r1, #1
 800430c:	4603      	mov	r3, r0
 800430e:	b132      	cbz	r2, 800431e <strncpy+0x16>
 8004310:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004314:	f803 4b01 	strb.w	r4, [r3], #1
 8004318:	3a01      	subs	r2, #1
 800431a:	2c00      	cmp	r4, #0
 800431c:	d1f7      	bne.n	800430e <strncpy+0x6>
 800431e:	441a      	add	r2, r3
 8004320:	2100      	movs	r1, #0
 8004322:	4293      	cmp	r3, r2
 8004324:	d100      	bne.n	8004328 <strncpy+0x20>
 8004326:	bd10      	pop	{r4, pc}
 8004328:	f803 1b01 	strb.w	r1, [r3], #1
 800432c:	e7f9      	b.n	8004322 <strncpy+0x1a>
	...

08004330 <__libc_init_array>:
 8004330:	b570      	push	{r4, r5, r6, lr}
 8004332:	4d0d      	ldr	r5, [pc, #52]	; (8004368 <__libc_init_array+0x38>)
 8004334:	4c0d      	ldr	r4, [pc, #52]	; (800436c <__libc_init_array+0x3c>)
 8004336:	1b64      	subs	r4, r4, r5
 8004338:	10a4      	asrs	r4, r4, #2
 800433a:	2600      	movs	r6, #0
 800433c:	42a6      	cmp	r6, r4
 800433e:	d109      	bne.n	8004354 <__libc_init_array+0x24>
 8004340:	4d0b      	ldr	r5, [pc, #44]	; (8004370 <__libc_init_array+0x40>)
 8004342:	4c0c      	ldr	r4, [pc, #48]	; (8004374 <__libc_init_array+0x44>)
 8004344:	f000 f820 	bl	8004388 <_init>
 8004348:	1b64      	subs	r4, r4, r5
 800434a:	10a4      	asrs	r4, r4, #2
 800434c:	2600      	movs	r6, #0
 800434e:	42a6      	cmp	r6, r4
 8004350:	d105      	bne.n	800435e <__libc_init_array+0x2e>
 8004352:	bd70      	pop	{r4, r5, r6, pc}
 8004354:	f855 3b04 	ldr.w	r3, [r5], #4
 8004358:	4798      	blx	r3
 800435a:	3601      	adds	r6, #1
 800435c:	e7ee      	b.n	800433c <__libc_init_array+0xc>
 800435e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004362:	4798      	blx	r3
 8004364:	3601      	adds	r6, #1
 8004366:	e7f2      	b.n	800434e <__libc_init_array+0x1e>
 8004368:	080043e0 	.word	0x080043e0
 800436c:	080043e0 	.word	0x080043e0
 8004370:	080043e0 	.word	0x080043e0
 8004374:	080043e4 	.word	0x080043e4

08004378 <strcpy>:
 8004378:	4603      	mov	r3, r0
 800437a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800437e:	f803 2b01 	strb.w	r2, [r3], #1
 8004382:	2a00      	cmp	r2, #0
 8004384:	d1f9      	bne.n	800437a <strcpy+0x2>
 8004386:	4770      	bx	lr

08004388 <_init>:
 8004388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800438a:	bf00      	nop
 800438c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800438e:	bc08      	pop	{r3}
 8004390:	469e      	mov	lr, r3
 8004392:	4770      	bx	lr

08004394 <_fini>:
 8004394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004396:	bf00      	nop
 8004398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800439a:	bc08      	pop	{r3}
 800439c:	469e      	mov	lr, r3
 800439e:	4770      	bx	lr
