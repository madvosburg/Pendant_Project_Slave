
Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fd8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800416c  0800416c  0001416c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041a4  080041a4  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  080041a4  080041a4  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041a4  080041a4  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041a4  080041a4  000141a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041a8  080041a8  000141a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  080041ac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a8  2**0
                  CONTENTS
 10 .bss          00000160  200000a8  200000a8  000200a8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000208  20000208  000200a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000aec9  00000000  00000000  0002011b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001cc4  00000000  00000000  0002afe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000007d8  00000000  00000000  0002cca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005fd  00000000  00000000  0002d480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fe33  00000000  00000000  0002da7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000bb8c  00000000  00000000  0004d8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c04c8  00000000  00000000  0005943c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001e88  00000000  00000000  00119904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0011b78c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000a8 	.word	0x200000a8
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004154 	.word	0x08004154

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200000ac 	.word	0x200000ac
 80001d0:	08004154 	.word	0x08004154

080001d4 <HAL_UARTEx_RxEventCallback>:
uint8_t errors = 0;

int refresh = 20;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	460b      	mov	r3, r1
 80001de:	807b      	strh	r3, [r7, #2]
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t*)RxData, sizeof(RxData));
 80001e0:	2218      	movs	r2, #24
 80001e2:	4905      	ldr	r1, [pc, #20]	; (80001f8 <HAL_UARTEx_RxEventCallback+0x24>)
 80001e4:	4805      	ldr	r0, [pc, #20]	; (80001fc <HAL_UARTEx_RxEventCallback+0x28>)
 80001e6:	f003 ff01 	bl	8003fec <HAL_UARTEx_ReceiveToIdle_IT>
	flag = true;
 80001ea:	4b05      	ldr	r3, [pc, #20]	; (8000200 <HAL_UARTEx_RxEventCallback+0x2c>)
 80001ec:	2201      	movs	r2, #1
 80001ee:	701a      	strb	r2, [r3, #0]
}
 80001f0:	bf00      	nop
 80001f2:	3708      	adds	r7, #8
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	200000c4 	.word	0x200000c4
 8000200:	20000200 	.word	0x20000200

08000204 <crc_xor>:

/**
 * XOR logic used to divide data by key
 */
uint64_t crc_xor(uint64_t div_data){
 8000204:	b4b0      	push	{r4, r5, r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	e9c7 0100 	strd	r0, r1, [r7]
	uint64_t ans = div_data;
 800020e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000212:	e9c7 0102 	strd	r0, r1, [r7, #8]
	if(ans & 0b1000){
 8000216:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800021a:	f000 0208 	and.w	r2, r0, #8
 800021e:	2300      	movs	r3, #0
 8000220:	4313      	orrs	r3, r2
 8000222:	d00a      	beq.n	800023a <crc_xor+0x36>
		ans = ans ^ crc_key;			//if leftmost bit is 1, perform xor with key
 8000224:	4b09      	ldr	r3, [pc, #36]	; (800024c <crc_xor+0x48>)
 8000226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800022a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800022e:	ea80 0402 	eor.w	r4, r0, r2
 8000232:	ea81 0503 	eor.w	r5, r1, r3
 8000236:	e9c7 4502 	strd	r4, r5, [r7, #8]
	}else{
		ans = ans ^ 0b0000;				//if leftmost bit is 0, perform xor with all zeros
	}
	return ans;
 800023a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800023e:	4610      	mov	r0, r2
 8000240:	4619      	mov	r1, r3
 8000242:	3714      	adds	r7, #20
 8000244:	46bd      	mov	sp, r7
 8000246:	bcb0      	pop	{r4, r5, r7}
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	20000090 	.word	0x20000090

08000250 <crc_division>:
/**
 * divides data by key to get remainder
 *
 * takes 4 bits at a time and XORs them until 4 bit remainder is left
 */
uint64_t crc_division(uint64_t data, int curs_pos, int shift_pos, uint64_t answer){
 8000250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000254:	b08f      	sub	sp, #60	; 0x3c
 8000256:	af00      	add	r7, sp, #0
 8000258:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800025c:	617a      	str	r2, [r7, #20]
 800025e:	613b      	str	r3, [r7, #16]
	int cursor = curs_pos;
 8000260:	697b      	ldr	r3, [r7, #20]
 8000262:	637b      	str	r3, [r7, #52]	; 0x34
	int bit_shift = shift_pos;
 8000264:	693b      	ldr	r3, [r7, #16]
 8000266:	633b      	str	r3, [r7, #48]	; 0x30
	uint64_t remain = answer;
 8000268:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800026c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	uint64_t dividend = 0;
 8000270:	f04f 0200 	mov.w	r2, #0
 8000274:	f04f 0300 	mov.w	r3, #0
 8000278:	e9c7 2308 	strd	r2, r3, [r7, #32]

	while(bit_shift > 0){
 800027c:	e057      	b.n	800032e <crc_division+0xde>
		bit_shift--;
 800027e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000280:	3b01      	subs	r3, #1
 8000282:	633b      	str	r3, [r7, #48]	; 0x30
		dividend = data & (0x0800000000000000 >> cursor);
 8000284:	f04f 0200 	mov.w	r2, #0
 8000288:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800028c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800028e:	f1c0 0120 	rsb	r1, r0, #32
 8000292:	f1b0 0420 	subs.w	r4, r0, #32
 8000296:	fa22 fa00 	lsr.w	sl, r2, r0
 800029a:	fa03 f101 	lsl.w	r1, r3, r1
 800029e:	ea4a 0a01 	orr.w	sl, sl, r1
 80002a2:	d403      	bmi.n	80002ac <crc_division+0x5c>
 80002a4:	fa43 f404 	asr.w	r4, r3, r4
 80002a8:	ea4a 0a04 	orr.w	sl, sl, r4
 80002ac:	fa43 fb00 	asr.w	fp, r3, r0
 80002b0:	4650      	mov	r0, sl
 80002b2:	4659      	mov	r1, fp
 80002b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80002b8:	ea02 0500 	and.w	r5, r2, r0
 80002bc:	ea03 0601 	and.w	r6, r3, r1
 80002c0:	e9c7 5608 	strd	r5, r6, [r7, #32]
		dividend = dividend >> bit_shift;
 80002c4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80002c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80002ca:	f1c0 0420 	rsb	r4, r0, #32
 80002ce:	f1a0 0120 	sub.w	r1, r0, #32
 80002d2:	fa22 f800 	lsr.w	r8, r2, r0
 80002d6:	fa03 f404 	lsl.w	r4, r3, r4
 80002da:	ea48 0804 	orr.w	r8, r8, r4
 80002de:	fa23 f101 	lsr.w	r1, r3, r1
 80002e2:	ea48 0801 	orr.w	r8, r8, r1
 80002e6:	fa23 f900 	lsr.w	r9, r3, r0
 80002ea:	e9c7 8908 	strd	r8, r9, [r7, #32]
		remain = remain << 1;
 80002ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80002f2:	1891      	adds	r1, r2, r2
 80002f4:	60b9      	str	r1, [r7, #8]
 80002f6:	415b      	adcs	r3, r3
 80002f8:	60fb      	str	r3, [r7, #12]
 80002fa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80002fe:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		remain += dividend;
 8000302:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000306:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800030a:	1884      	adds	r4, r0, r2
 800030c:	603c      	str	r4, [r7, #0]
 800030e:	eb41 0303 	adc.w	r3, r1, r3
 8000312:	607b      	str	r3, [r7, #4]
 8000314:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000318:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		remain = crc_xor(remain);
 800031c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000320:	f7ff ff70 	bl	8000204 <crc_xor>
 8000324:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
		cursor++;
 8000328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800032a:	3301      	adds	r3, #1
 800032c:	637b      	str	r3, [r7, #52]	; 0x34
	while(bit_shift > 0){
 800032e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000330:	2b00      	cmp	r3, #0
 8000332:	dca4      	bgt.n	800027e <crc_division+0x2e>
	}
	return remain;
 8000334:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 8000338:	4610      	mov	r0, r2
 800033a:	4619      	mov	r1, r3
 800033c:	373c      	adds	r7, #60	; 0x3c
 800033e:	46bd      	mov	sp, r7
 8000340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000344 <crc_decode>:

/**
 * decodes crc value and if the remainder is not zero, track an error in the data sent
 */
void crc_decode(){
 8000344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000346:	b08d      	sub	sp, #52	; 0x34
 8000348:	af02      	add	r7, sp, #8
	flag = false;
 800034a:	4c23      	ldr	r4, [pc, #140]	; (80003d8 <crc_decode+0x94>)
 800034c:	2500      	movs	r5, #0
 800034e:	7025      	strb	r5, [r4, #0]
	int shift = 60;
 8000350:	243c      	movs	r4, #60	; 0x3c
 8000352:	627c      	str	r4, [r7, #36]	; 0x24
	int position = 0;
 8000354:	2400      	movs	r4, #0
 8000356:	623c      	str	r4, [r7, #32]
	uint64_t appended_data = RxData[1];
 8000358:	4c20      	ldr	r4, [pc, #128]	; (80003dc <crc_decode+0x98>)
 800035a:	e9d4 4502 	ldrd	r4, r5, [r4, #8]
 800035e:	e9c7 4506 	strd	r4, r5, [r7, #24]
	uint64_t dividend = appended_data & 0xF000000000000000;
 8000362:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8000366:	2000      	movs	r0, #0
 8000368:	f005 4170 	and.w	r1, r5, #4026531840	; 0xf0000000
 800036c:	e9c7 0104 	strd	r0, r1, [r7, #16]
	dividend = dividend >> shift;
 8000370:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000374:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8000376:	f1c4 0620 	rsb	r6, r4, #32
 800037a:	f1a4 0520 	sub.w	r5, r4, #32
 800037e:	fa20 f204 	lsr.w	r2, r0, r4
 8000382:	fa01 f606 	lsl.w	r6, r1, r6
 8000386:	4332      	orrs	r2, r6
 8000388:	fa21 f505 	lsr.w	r5, r1, r5
 800038c:	432a      	orrs	r2, r5
 800038e:	fa21 f304 	lsr.w	r3, r1, r4
 8000392:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint64_t ans = crc_xor(dividend);
 8000396:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800039a:	f7ff ff33 	bl	8000204 <crc_xor>
 800039e:	e9c7 0102 	strd	r0, r1, [r7, #8]

	uint64_t remain = crc_division(appended_data, position, shift, ans);
 80003a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80003a6:	e9cd 2300 	strd	r2, r3, [sp]
 80003aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003ac:	6a3a      	ldr	r2, [r7, #32]
 80003ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80003b2:	f7ff ff4d 	bl	8000250 <crc_division>
 80003b6:	e9c7 0100 	strd	r0, r1, [r7]
	if(remain != 0){
 80003ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80003be:	4313      	orrs	r3, r2
 80003c0:	d005      	beq.n	80003ce <crc_decode+0x8a>
		errors++;
 80003c2:	4b07      	ldr	r3, [pc, #28]	; (80003e0 <crc_decode+0x9c>)
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	3301      	adds	r3, #1
 80003c8:	b2da      	uxtb	r2, r3
 80003ca:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <crc_decode+0x9c>)
 80003cc:	701a      	strb	r2, [r3, #0]
	}
}
 80003ce:	bf00      	nop
 80003d0:	372c      	adds	r7, #44	; 0x2c
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003d6:	bf00      	nop
 80003d8:	20000200 	.word	0x20000200
 80003dc:	200001e8 	.word	0x200001e8
 80003e0:	20000201 	.word	0x20000201

080003e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e8:	f000 fb30 	bl	8000a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ec:	f000 f8b0 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f0:	f000 f982 	bl	80006f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003f4:	f000 f930 	bl	8000658 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80003f8:	f000 f8fe 	bl	80005f8 <MX_USART1_UART_Init>
  MX_WWDG_Init();
 80003fc:	f000 f95c 	bl	80006b8 <MX_WWDG_Init>
  /* USER CODE BEGIN 2 */

  HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t*)RxData, sizeof(RxData));
 8000400:	2218      	movs	r2, #24
 8000402:	4944      	ldr	r1, [pc, #272]	; (8000514 <main+0x130>)
 8000404:	4844      	ldr	r0, [pc, #272]	; (8000518 <main+0x134>)
 8000406:	f003 fdf1 	bl	8003fec <HAL_UARTEx_ReceiveToIdle_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(flag){
 800040a:	4b44      	ldr	r3, [pc, #272]	; (800051c <main+0x138>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b00      	cmp	r3, #0
 8000410:	d074      	beq.n	80004fc <main+0x118>
		  refresh = 0;
 8000412:	4b43      	ldr	r3, [pc, #268]	; (8000520 <main+0x13c>)
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
		  HAL_WWDG_Refresh(&hwwdg);		//receiving timeout
 8000418:	4842      	ldr	r0, [pc, #264]	; (8000524 <main+0x140>)
 800041a:	f003 fe5f 	bl	80040dc <HAL_WWDG_Refresh>
		  crc_decode();
 800041e:	f7ff ff91 	bl	8000344 <crc_decode>

	   	  if(RxData[0] == 1){								//red
 8000422:	4b3c      	ldr	r3, [pc, #240]	; (8000514 <main+0x130>)
 8000424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000428:	1e51      	subs	r1, r2, #1
 800042a:	430b      	orrs	r3, r1
 800042c:	d111      	bne.n	8000452 <main+0x6e>
	   		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2);
 800042e:	2104      	movs	r1, #4
 8000430:	483d      	ldr	r0, [pc, #244]	; (8000528 <main+0x144>)
 8000432:	f000 fe9b 	bl	800116c <HAL_GPIO_TogglePin>
	   		  RxData[0] = 0;
 8000436:	4937      	ldr	r1, [pc, #220]	; (8000514 <main+0x130>)
 8000438:	f04f 0200 	mov.w	r2, #0
 800043c:	f04f 0300 	mov.w	r3, #0
 8000440:	e9c1 2300 	strd	r2, r3, [r1]
	   		  HAL_UART_Transmit(&huart2, led_a, 20, 10);
 8000444:	230a      	movs	r3, #10
 8000446:	2214      	movs	r2, #20
 8000448:	4938      	ldr	r1, [pc, #224]	; (800052c <main+0x148>)
 800044a:	4839      	ldr	r0, [pc, #228]	; (8000530 <main+0x14c>)
 800044c:	f002 fb9e 	bl	8002b8c <HAL_UART_Transmit>
 8000450:	e054      	b.n	80004fc <main+0x118>
	   	  }else if(RxData[0] == 2){							//green
 8000452:	4b30      	ldr	r3, [pc, #192]	; (8000514 <main+0x130>)
 8000454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000458:	1e91      	subs	r1, r2, #2
 800045a:	430b      	orrs	r3, r1
 800045c:	d111      	bne.n	8000482 <main+0x9e>
	   		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 800045e:	2108      	movs	r1, #8
 8000460:	4831      	ldr	r0, [pc, #196]	; (8000528 <main+0x144>)
 8000462:	f000 fe83 	bl	800116c <HAL_GPIO_TogglePin>
	   		  RxData[0] = 0;
 8000466:	492b      	ldr	r1, [pc, #172]	; (8000514 <main+0x130>)
 8000468:	f04f 0200 	mov.w	r2, #0
 800046c:	f04f 0300 	mov.w	r3, #0
 8000470:	e9c1 2300 	strd	r2, r3, [r1]
	   		  HAL_UART_Transmit(&huart2, led_d, 20, 10);
 8000474:	230a      	movs	r3, #10
 8000476:	2214      	movs	r2, #20
 8000478:	492e      	ldr	r1, [pc, #184]	; (8000534 <main+0x150>)
 800047a:	482d      	ldr	r0, [pc, #180]	; (8000530 <main+0x14c>)
 800047c:	f002 fb86 	bl	8002b8c <HAL_UART_Transmit>
 8000480:	e03c      	b.n	80004fc <main+0x118>
	   	  }else if(RxData[0] == 3){							//yellow
 8000482:	4b24      	ldr	r3, [pc, #144]	; (8000514 <main+0x130>)
 8000484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000488:	1ed1      	subs	r1, r2, #3
 800048a:	430b      	orrs	r3, r1
 800048c:	d112      	bne.n	80004b4 <main+0xd0>
	   		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800048e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000492:	4829      	ldr	r0, [pc, #164]	; (8000538 <main+0x154>)
 8000494:	f000 fe6a 	bl	800116c <HAL_GPIO_TogglePin>
	   		  RxData[0] = 0;
 8000498:	491e      	ldr	r1, [pc, #120]	; (8000514 <main+0x130>)
 800049a:	f04f 0200 	mov.w	r2, #0
 800049e:	f04f 0300 	mov.w	r3, #0
 80004a2:	e9c1 2300 	strd	r2, r3, [r1]
	   		  HAL_UART_Transmit(&huart2, led_c, 20, 10);
 80004a6:	230a      	movs	r3, #10
 80004a8:	2214      	movs	r2, #20
 80004aa:	4924      	ldr	r1, [pc, #144]	; (800053c <main+0x158>)
 80004ac:	4820      	ldr	r0, [pc, #128]	; (8000530 <main+0x14c>)
 80004ae:	f002 fb6d 	bl	8002b8c <HAL_UART_Transmit>
 80004b2:	e023      	b.n	80004fc <main+0x118>
	   	  }else if(RxData[0] == 4){							//blue
 80004b4:	4b17      	ldr	r3, [pc, #92]	; (8000514 <main+0x130>)
 80004b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004ba:	1f11      	subs	r1, r2, #4
 80004bc:	430b      	orrs	r3, r1
 80004be:	d112      	bne.n	80004e6 <main+0x102>
	   		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 80004c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004c4:	481c      	ldr	r0, [pc, #112]	; (8000538 <main+0x154>)
 80004c6:	f000 fe51 	bl	800116c <HAL_GPIO_TogglePin>
	   		  RxData[0] = 0;
 80004ca:	4912      	ldr	r1, [pc, #72]	; (8000514 <main+0x130>)
 80004cc:	f04f 0200 	mov.w	r2, #0
 80004d0:	f04f 0300 	mov.w	r3, #0
 80004d4:	e9c1 2300 	strd	r2, r3, [r1]
	   		  HAL_UART_Transmit(&huart2, led_b, 20, 10);
 80004d8:	230a      	movs	r3, #10
 80004da:	2214      	movs	r2, #20
 80004dc:	4918      	ldr	r1, [pc, #96]	; (8000540 <main+0x15c>)
 80004de:	4814      	ldr	r0, [pc, #80]	; (8000530 <main+0x14c>)
 80004e0:	f002 fb54 	bl	8002b8c <HAL_UART_Transmit>
 80004e4:	e00a      	b.n	80004fc <main+0x118>
	   	  }else if(RxData[0] == 0){
 80004e6:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <main+0x130>)
 80004e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004ec:	4313      	orrs	r3, r2
 80004ee:	d105      	bne.n	80004fc <main+0x118>
	   		  HAL_UART_Transmit(&huart2, buf, 20, 10);
 80004f0:	230a      	movs	r3, #10
 80004f2:	2214      	movs	r2, #20
 80004f4:	4913      	ldr	r1, [pc, #76]	; (8000544 <main+0x160>)
 80004f6:	480e      	ldr	r0, [pc, #56]	; (8000530 <main+0x14c>)
 80004f8:	f002 fb48 	bl	8002b8c <HAL_UART_Transmit>
	   	  }
	  }
	  if(errors > 10){
 80004fc:	4b12      	ldr	r3, [pc, #72]	; (8000548 <main+0x164>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b0a      	cmp	r3, #10
 8000502:	d982      	bls.n	800040a <main+0x26>
		  HAL_UART_Transmit(&huart2, err_max, 40, 10);
 8000504:	230a      	movs	r3, #10
 8000506:	2228      	movs	r2, #40	; 0x28
 8000508:	4910      	ldr	r1, [pc, #64]	; (800054c <main+0x168>)
 800050a:	4809      	ldr	r0, [pc, #36]	; (8000530 <main+0x14c>)
 800050c:	f002 fb3e 	bl	8002b8c <HAL_UART_Transmit>
	  if(flag){
 8000510:	e77b      	b.n	800040a <main+0x26>
 8000512:	bf00      	nop
 8000514:	200001e8 	.word	0x200001e8
 8000518:	200000c4 	.word	0x200000c4
 800051c:	20000200 	.word	0x20000200
 8000520:	20000098 	.word	0x20000098
 8000524:	200001d4 	.word	0x200001d4
 8000528:	48000800 	.word	0x48000800
 800052c:	20000014 	.word	0x20000014
 8000530:	2000014c 	.word	0x2000014c
 8000534:	20000050 	.word	0x20000050
 8000538:	48000400 	.word	0x48000400
 800053c:	2000003c 	.word	0x2000003c
 8000540:	20000028 	.word	0x20000028
 8000544:	20000000 	.word	0x20000000
 8000548:	20000201 	.word	0x20000201
 800054c:	20000064 	.word	0x20000064

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b0a6      	sub	sp, #152	; 0x98
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800055a:	2228      	movs	r2, #40	; 0x28
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f003 fdcc 	bl	80040fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2258      	movs	r2, #88	; 0x58
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f003 fdbe 	bl	80040fc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000580:	2302      	movs	r3, #2
 8000582:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000584:	2301      	movs	r3, #1
 8000586:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000588:	2310      	movs	r3, #16
 800058a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800058e:	2300      	movs	r3, #0
 8000590:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000598:	4618      	mov	r0, r3
 800059a:	f000 fe01 	bl	80011a0 <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005a4:	f000 f90a 	bl	80007bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ac:	2300      	movs	r3, #0
 80005ae:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f001 fe40 	bl	8002248 <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005ce:	f000 f8f5 	bl	80007bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80005d2:	2303      	movs	r3, #3
 80005d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	4618      	mov	r0, r3
 80005e2:	f002 f867 	bl	80026b4 <HAL_RCCEx_PeriphCLKConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80005ec:	f000 f8e6 	bl	80007bc <Error_Handler>
  }
}
 80005f0:	bf00      	nop
 80005f2:	3798      	adds	r7, #152	; 0x98
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005fc:	4b14      	ldr	r3, [pc, #80]	; (8000650 <MX_USART1_UART_Init+0x58>)
 80005fe:	4a15      	ldr	r2, [pc, #84]	; (8000654 <MX_USART1_UART_Init+0x5c>)
 8000600:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000602:	4b13      	ldr	r3, [pc, #76]	; (8000650 <MX_USART1_UART_Init+0x58>)
 8000604:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000608:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_USART1_UART_Init+0x58>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_USART1_UART_Init+0x58>)
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_USART1_UART_Init+0x58>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_USART1_UART_Init+0x58>)
 800061e:	220c      	movs	r2, #12
 8000620:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <MX_USART1_UART_Init+0x58>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_USART1_UART_Init+0x58>)
 800062a:	2200      	movs	r2, #0
 800062c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <MX_USART1_UART_Init+0x58>)
 8000630:	2200      	movs	r2, #0
 8000632:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_USART1_UART_Init+0x58>)
 8000636:	2200      	movs	r2, #0
 8000638:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_USART1_UART_Init+0x58>)
 800063c:	f002 fa58 	bl	8002af0 <HAL_UART_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000646:	f000 f8b9 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	200000c4 	.word	0x200000c4
 8000654:	40013800 	.word	0x40013800

08000658 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <MX_USART2_UART_Init+0x58>)
 800065e:	4a15      	ldr	r2, [pc, #84]	; (80006b4 <MX_USART2_UART_Init+0x5c>)
 8000660:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <MX_USART2_UART_Init+0x58>)
 8000664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000668:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_USART2_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000670:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_USART2_UART_Init+0x58>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_USART2_UART_Init+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_USART2_UART_Init+0x58>)
 800067e:	220c      	movs	r2, #12
 8000680:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_USART2_UART_Init+0x58>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_USART2_UART_Init+0x58>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_USART2_UART_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_USART2_UART_Init+0x58>)
 8000696:	2200      	movs	r2, #0
 8000698:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_USART2_UART_Init+0x58>)
 800069c:	f002 fa28 	bl	8002af0 <HAL_UART_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006a6:	f000 f889 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	2000014c 	.word	0x2000014c
 80006b4:	40004400 	.word	0x40004400

080006b8 <MX_WWDG_Init>:
  * @brief WWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN WWDG_Init 1 */
	//counter = ((max_time * clk) / (4096 * prescalar)) + 64			= ((.015 * 8M) / (4096 * 4)) + 64 = 72
	//window = counter - ((min_time * clk) / (4096 * prescalar))		= 72 - ((0.005 * 8M) / (4096 * prescalar)) = 70
  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_WWDG_Init+0x38>)
 80006be:	4a0d      	ldr	r2, [pc, #52]	; (80006f4 <MX_WWDG_Init+0x3c>)
 80006c0:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_4;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <MX_WWDG_Init+0x38>)
 80006c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006c8:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 70;
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_WWDG_Init+0x38>)
 80006cc:	2246      	movs	r2, #70	; 0x46
 80006ce:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 72;
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <MX_WWDG_Init+0x38>)
 80006d2:	2248      	movs	r2, #72	; 0x48
 80006d4:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_WWDG_Init+0x38>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 80006dc:	4804      	ldr	r0, [pc, #16]	; (80006f0 <MX_WWDG_Init+0x38>)
 80006de:	f003 fcd9 	bl	8004094 <HAL_WWDG_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_WWDG_Init+0x34>
  {
    Error_Handler();
 80006e8:	f000 f868 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	200001d4 	.word	0x200001d4
 80006f4:	40002c00 	.word	0x40002c00

080006f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b088      	sub	sp, #32
 80006fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <MX_GPIO_Init+0xb8>)
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	4a27      	ldr	r2, [pc, #156]	; (80007b0 <MX_GPIO_Init+0xb8>)
 8000714:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000718:	6153      	str	r3, [r2, #20]
 800071a:	4b25      	ldr	r3, [pc, #148]	; (80007b0 <MX_GPIO_Init+0xb8>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <MX_GPIO_Init+0xb8>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	4a21      	ldr	r2, [pc, #132]	; (80007b0 <MX_GPIO_Init+0xb8>)
 800072c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000730:	6153      	str	r3, [r2, #20]
 8000732:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <MX_GPIO_Init+0xb8>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <MX_GPIO_Init+0xb8>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	4a1b      	ldr	r2, [pc, #108]	; (80007b0 <MX_GPIO_Init+0xb8>)
 8000744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000748:	6153      	str	r3, [r2, #20]
 800074a:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <MX_GPIO_Init+0xb8>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	210c      	movs	r1, #12
 800075a:	4816      	ldr	r0, [pc, #88]	; (80007b4 <MX_GPIO_Init+0xbc>)
 800075c:	f000 fcee 	bl	800113c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000766:	4814      	ldr	r0, [pc, #80]	; (80007b8 <MX_GPIO_Init+0xc0>)
 8000768:	f000 fce8 	bl	800113c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800076c:	230c      	movs	r3, #12
 800076e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000770:	2301      	movs	r3, #1
 8000772:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	2300      	movs	r3, #0
 800077a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	4619      	mov	r1, r3
 8000782:	480c      	ldr	r0, [pc, #48]	; (80007b4 <MX_GPIO_Init+0xbc>)
 8000784:	f000 fb50 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000788:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800078c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078e:	2301      	movs	r3, #1
 8000790:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	4619      	mov	r1, r3
 80007a0:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_GPIO_Init+0xc0>)
 80007a2:	f000 fb41 	bl	8000e28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007a6:	bf00      	nop
 80007a8:	3720      	adds	r7, #32
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40021000 	.word	0x40021000
 80007b4:	48000800 	.word	0x48000800
 80007b8:	48000400 	.word	0x48000400

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <Error_Handler+0x8>
	...

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <HAL_MspInit+0x44>)
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	4a0e      	ldr	r2, [pc, #56]	; (800080c <HAL_MspInit+0x44>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6193      	str	r3, [r2, #24]
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <HAL_MspInit+0x44>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <HAL_MspInit+0x44>)
 80007e8:	69db      	ldr	r3, [r3, #28]
 80007ea:	4a08      	ldr	r2, [pc, #32]	; (800080c <HAL_MspInit+0x44>)
 80007ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f0:	61d3      	str	r3, [r2, #28]
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <HAL_MspInit+0x44>)
 80007f4:	69db      	ldr	r3, [r3, #28]
 80007f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	40021000 	.word	0x40021000

08000810 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08c      	sub	sp, #48	; 0x30
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a36      	ldr	r2, [pc, #216]	; (8000908 <HAL_UART_MspInit+0xf8>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d130      	bne.n	8000894 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000832:	4b36      	ldr	r3, [pc, #216]	; (800090c <HAL_UART_MspInit+0xfc>)
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	4a35      	ldr	r2, [pc, #212]	; (800090c <HAL_UART_MspInit+0xfc>)
 8000838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083c:	6193      	str	r3, [r2, #24]
 800083e:	4b33      	ldr	r3, [pc, #204]	; (800090c <HAL_UART_MspInit+0xfc>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000846:	61bb      	str	r3, [r7, #24]
 8000848:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800084a:	4b30      	ldr	r3, [pc, #192]	; (800090c <HAL_UART_MspInit+0xfc>)
 800084c:	695b      	ldr	r3, [r3, #20]
 800084e:	4a2f      	ldr	r2, [pc, #188]	; (800090c <HAL_UART_MspInit+0xfc>)
 8000850:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000854:	6153      	str	r3, [r2, #20]
 8000856:	4b2d      	ldr	r3, [pc, #180]	; (800090c <HAL_UART_MspInit+0xfc>)
 8000858:	695b      	ldr	r3, [r3, #20]
 800085a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000862:	2330      	movs	r3, #48	; 0x30
 8000864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800086e:	2303      	movs	r3, #3
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000872:	2307      	movs	r3, #7
 8000874:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4824      	ldr	r0, [pc, #144]	; (8000910 <HAL_UART_MspInit+0x100>)
 800087e:	f000 fad3 	bl	8000e28 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2100      	movs	r1, #0
 8000886:	2025      	movs	r0, #37	; 0x25
 8000888:	f000 fa21 	bl	8000cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800088c:	2025      	movs	r0, #37	; 0x25
 800088e:	f000 fa3a 	bl	8000d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000892:	e035      	b.n	8000900 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a1e      	ldr	r2, [pc, #120]	; (8000914 <HAL_UART_MspInit+0x104>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d130      	bne.n	8000900 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800089e:	4b1b      	ldr	r3, [pc, #108]	; (800090c <HAL_UART_MspInit+0xfc>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	4a1a      	ldr	r2, [pc, #104]	; (800090c <HAL_UART_MspInit+0xfc>)
 80008a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a8:	61d3      	str	r3, [r2, #28]
 80008aa:	4b18      	ldr	r3, [pc, #96]	; (800090c <HAL_UART_MspInit+0xfc>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	4b15      	ldr	r3, [pc, #84]	; (800090c <HAL_UART_MspInit+0xfc>)
 80008b8:	695b      	ldr	r3, [r3, #20]
 80008ba:	4a14      	ldr	r2, [pc, #80]	; (800090c <HAL_UART_MspInit+0xfc>)
 80008bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c0:	6153      	str	r3, [r2, #20]
 80008c2:	4b12      	ldr	r3, [pc, #72]	; (800090c <HAL_UART_MspInit+0xfc>)
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008ce:	230c      	movs	r3, #12
 80008d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008da:	2303      	movs	r3, #3
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008de:	2307      	movs	r3, #7
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ec:	f000 fa9c 	bl	8000e28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2100      	movs	r1, #0
 80008f4:	2026      	movs	r0, #38	; 0x26
 80008f6:	f000 f9ea 	bl	8000cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008fa:	2026      	movs	r0, #38	; 0x26
 80008fc:	f000 fa03 	bl	8000d06 <HAL_NVIC_EnableIRQ>
}
 8000900:	bf00      	nop
 8000902:	3730      	adds	r7, #48	; 0x30
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40013800 	.word	0x40013800
 800090c:	40021000 	.word	0x40021000
 8000910:	48000800 	.word	0x48000800
 8000914:	40004400 	.word	0x40004400

08000918 <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a0a      	ldr	r2, [pc, #40]	; (8000950 <HAL_WWDG_MspInit+0x38>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d10b      	bne.n	8000942 <HAL_WWDG_MspInit+0x2a>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 800092a:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <HAL_WWDG_MspInit+0x3c>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	4a09      	ldr	r2, [pc, #36]	; (8000954 <HAL_WWDG_MspInit+0x3c>)
 8000930:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000934:	61d3      	str	r3, [r2, #28]
 8000936:	4b07      	ldr	r3, [pc, #28]	; (8000954 <HAL_WWDG_MspInit+0x3c>)
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 8000942:	bf00      	nop
 8000944:	3714      	adds	r7, #20
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	40002c00 	.word	0x40002c00
 8000954:	40021000 	.word	0x40021000

08000958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800095c:	e7fe      	b.n	800095c <NMI_Handler+0x4>

0800095e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <HardFault_Handler+0x4>

08000964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <MemManage_Handler+0x4>

0800096a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096e:	e7fe      	b.n	800096e <BusFault_Handler+0x4>

08000970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <UsageFault_Handler+0x4>

08000976 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr

08000992 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a4:	f000 f898 	bl	8000ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}

080009ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009b0:	4802      	ldr	r0, [pc, #8]	; (80009bc <USART1_IRQHandler+0x10>)
 80009b2:	f002 f975 	bl	8002ca0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200000c4 	.word	0x200000c4

080009c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009c4:	4802      	ldr	r0, [pc, #8]	; (80009d0 <USART2_IRQHandler+0x10>)
 80009c6:	f002 f96b 	bl	8002ca0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	2000014c 	.word	0x2000014c

080009d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <SystemInit+0x20>)
 80009da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009de:	4a05      	ldr	r2, [pc, #20]	; (80009f4 <SystemInit+0x20>)
 80009e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a30 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80009fc:	f7ff ffea 	bl	80009d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a00:	480c      	ldr	r0, [pc, #48]	; (8000a34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a02:	490d      	ldr	r1, [pc, #52]	; (8000a38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a04:	4a0d      	ldr	r2, [pc, #52]	; (8000a3c <LoopForever+0xe>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a08:	e002      	b.n	8000a10 <LoopCopyDataInit>

08000a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0e:	3304      	adds	r3, #4

08000a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a14:	d3f9      	bcc.n	8000a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a16:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a18:	4c0a      	ldr	r4, [pc, #40]	; (8000a44 <LoopForever+0x16>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a1c:	e001      	b.n	8000a22 <LoopFillZerobss>

08000a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a20:	3204      	adds	r2, #4

08000a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a24:	d3fb      	bcc.n	8000a1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a26:	f003 fb71 	bl	800410c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a2a:	f7ff fcdb 	bl	80003e4 <main>

08000a2e <LoopForever>:

LoopForever:
    b LoopForever
 8000a2e:	e7fe      	b.n	8000a2e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a30:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a38:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8000a3c:	080041ac 	.word	0x080041ac
  ldr r2, =_sbss
 8000a40:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8000a44:	20000208 	.word	0x20000208

08000a48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a48:	e7fe      	b.n	8000a48 <ADC1_2_IRQHandler>
	...

08000a4c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <HAL_Init+0x28>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a07      	ldr	r2, [pc, #28]	; (8000a74 <HAL_Init+0x28>)
 8000a56:	f043 0310 	orr.w	r3, r3, #16
 8000a5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a5c:	2003      	movs	r0, #3
 8000a5e:	f000 f92b 	bl	8000cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a62:	200f      	movs	r0, #15
 8000a64:	f000 f808 	bl	8000a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a68:	f7ff feae 	bl	80007c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40022000 	.word	0x40022000

08000a78 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <HAL_InitTick+0x54>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_InitTick+0x58>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 f943 	bl	8000d22 <HAL_SYSTICK_Config>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e00e      	b.n	8000ac4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2b0f      	cmp	r3, #15
 8000aaa:	d80a      	bhi.n	8000ac2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aac:	2200      	movs	r2, #0
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	f000 f90b 	bl	8000cce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab8:	4a06      	ldr	r2, [pc, #24]	; (8000ad4 <HAL_InitTick+0x5c>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e000      	b.n	8000ac4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	2000009c 	.word	0x2000009c
 8000ad0:	200000a4 	.word	0x200000a4
 8000ad4:	200000a0 	.word	0x200000a0

08000ad8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_IncTick+0x20>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_IncTick+0x24>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	4a04      	ldr	r2, [pc, #16]	; (8000afc <HAL_IncTick+0x24>)
 8000aea:	6013      	str	r3, [r2, #0]
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	200000a4 	.word	0x200000a4
 8000afc:	20000204 	.word	0x20000204

08000b00 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b04:	4b03      	ldr	r3, [pc, #12]	; (8000b14 <HAL_GetTick+0x14>)
 8000b06:	681b      	ldr	r3, [r3, #0]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	20000204 	.word	0x20000204

08000b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <__NVIC_SetPriorityGrouping+0x44>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b34:	4013      	ands	r3, r2
 8000b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4a:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	60d3      	str	r3, [r2, #12]
}
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <__NVIC_GetPriorityGrouping+0x18>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	0a1b      	lsrs	r3, r3, #8
 8000b6a:	f003 0307 	and.w	r3, r3, #7
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	db0b      	blt.n	8000ba6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	f003 021f 	and.w	r2, r3, #31
 8000b94:	4907      	ldr	r1, [pc, #28]	; (8000bb4 <__NVIC_EnableIRQ+0x38>)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	095b      	lsrs	r3, r3, #5
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000e100 	.word	0xe000e100

08000bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	db0a      	blt.n	8000be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	490c      	ldr	r1, [pc, #48]	; (8000c04 <__NVIC_SetPriority+0x4c>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	0112      	lsls	r2, r2, #4
 8000bd8:	b2d2      	uxtb	r2, r2
 8000bda:	440b      	add	r3, r1
 8000bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be0:	e00a      	b.n	8000bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4908      	ldr	r1, [pc, #32]	; (8000c08 <__NVIC_SetPriority+0x50>)
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	f003 030f 	and.w	r3, r3, #15
 8000bee:	3b04      	subs	r3, #4
 8000bf0:	0112      	lsls	r2, r2, #4
 8000bf2:	b2d2      	uxtb	r2, r2
 8000bf4:	440b      	add	r3, r1
 8000bf6:	761a      	strb	r2, [r3, #24]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000e100 	.word	0xe000e100
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b089      	sub	sp, #36	; 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	f1c3 0307 	rsb	r3, r3, #7
 8000c26:	2b04      	cmp	r3, #4
 8000c28:	bf28      	it	cs
 8000c2a:	2304      	movcs	r3, #4
 8000c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3304      	adds	r3, #4
 8000c32:	2b06      	cmp	r3, #6
 8000c34:	d902      	bls.n	8000c3c <NVIC_EncodePriority+0x30>
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3b03      	subs	r3, #3
 8000c3a:	e000      	b.n	8000c3e <NVIC_EncodePriority+0x32>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	f04f 32ff 	mov.w	r2, #4294967295
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43da      	mvns	r2, r3
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	401a      	ands	r2, r3
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c54:	f04f 31ff 	mov.w	r1, #4294967295
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5e:	43d9      	mvns	r1, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c64:	4313      	orrs	r3, r2
         );
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3724      	adds	r7, #36	; 0x24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
	...

08000c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c84:	d301      	bcc.n	8000c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c86:	2301      	movs	r3, #1
 8000c88:	e00f      	b.n	8000caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <SysTick_Config+0x40>)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c92:	210f      	movs	r1, #15
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295
 8000c98:	f7ff ff8e 	bl	8000bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <SysTick_Config+0x40>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca2:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <SysTick_Config+0x40>)
 8000ca4:	2207      	movs	r2, #7
 8000ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	e000e010 	.word	0xe000e010

08000cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff ff29 	bl	8000b18 <__NVIC_SetPriorityGrouping>
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b086      	sub	sp, #24
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	60b9      	str	r1, [r7, #8]
 8000cd8:	607a      	str	r2, [r7, #4]
 8000cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce0:	f7ff ff3e 	bl	8000b60 <__NVIC_GetPriorityGrouping>
 8000ce4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	68b9      	ldr	r1, [r7, #8]
 8000cea:	6978      	ldr	r0, [r7, #20]
 8000cec:	f7ff ff8e 	bl	8000c0c <NVIC_EncodePriority>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff5d 	bl	8000bb8 <__NVIC_SetPriority>
}
 8000cfe:	bf00      	nop
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ff31 	bl	8000b7c <__NVIC_EnableIRQ>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f7ff ffa2 	bl	8000c74 <SysTick_Config>
 8000d30:	4603      	mov	r3, r0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d008      	beq.n	8000d5e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2204      	movs	r2, #4
 8000d50:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2200      	movs	r2, #0
 8000d56:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e020      	b.n	8000da0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f022 020e 	bic.w	r2, r2, #14
 8000d6c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f022 0201 	bic.w	r2, r2, #1
 8000d7c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d86:	2101      	movs	r1, #1
 8000d88:	fa01 f202 	lsl.w	r2, r1, r2
 8000d8c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2201      	movs	r2, #1
 8000d92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d005      	beq.n	8000dce <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2204      	movs	r2, #4
 8000dc6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	73fb      	strb	r3, [r7, #15]
 8000dcc:	e027      	b.n	8000e1e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f022 020e 	bic.w	r2, r2, #14
 8000ddc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f022 0201 	bic.w	r2, r2, #1
 8000dec:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000df6:	2101      	movs	r1, #1
 8000df8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dfc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2201      	movs	r2, #1
 8000e02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d003      	beq.n	8000e1e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	4798      	blx	r3
    } 
  }
  return status;
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b087      	sub	sp, #28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e36:	e160      	b.n	80010fa <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	fa01 f303 	lsl.w	r3, r1, r3
 8000e44:	4013      	ands	r3, r2
 8000e46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f000 8152 	beq.w	80010f4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 0303 	and.w	r3, r3, #3
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d005      	beq.n	8000e68 <HAL_GPIO_Init+0x40>
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 0303 	and.w	r3, r3, #3
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d130      	bne.n	8000eca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	2203      	movs	r2, #3
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	68da      	ldr	r2, [r3, #12]
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	091b      	lsrs	r3, r3, #4
 8000eb4:	f003 0201 	and.w	r2, r3, #1
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	d017      	beq.n	8000f06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	689a      	ldr	r2, [r3, #8]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d123      	bne.n	8000f5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	08da      	lsrs	r2, r3, #3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	3208      	adds	r2, #8
 8000f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	220f      	movs	r2, #15
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	4013      	ands	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	691a      	ldr	r2, [r3, #16]
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	f003 0307 	and.w	r3, r3, #7
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	08da      	lsrs	r2, r3, #3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3208      	adds	r2, #8
 8000f54:	6939      	ldr	r1, [r7, #16]
 8000f56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	2203      	movs	r2, #3
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 0203 	and.w	r2, r3, #3
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f000 80ac 	beq.w	80010f4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9c:	4b5e      	ldr	r3, [pc, #376]	; (8001118 <HAL_GPIO_Init+0x2f0>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	4a5d      	ldr	r2, [pc, #372]	; (8001118 <HAL_GPIO_Init+0x2f0>)
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	6193      	str	r3, [r2, #24]
 8000fa8:	4b5b      	ldr	r3, [pc, #364]	; (8001118 <HAL_GPIO_Init+0x2f0>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fb4:	4a59      	ldr	r2, [pc, #356]	; (800111c <HAL_GPIO_Init+0x2f4>)
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	089b      	lsrs	r3, r3, #2
 8000fba:	3302      	adds	r3, #2
 8000fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	f003 0303 	and.w	r3, r3, #3
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	220f      	movs	r2, #15
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fde:	d025      	beq.n	800102c <HAL_GPIO_Init+0x204>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a4f      	ldr	r2, [pc, #316]	; (8001120 <HAL_GPIO_Init+0x2f8>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d01f      	beq.n	8001028 <HAL_GPIO_Init+0x200>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a4e      	ldr	r2, [pc, #312]	; (8001124 <HAL_GPIO_Init+0x2fc>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d019      	beq.n	8001024 <HAL_GPIO_Init+0x1fc>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a4d      	ldr	r2, [pc, #308]	; (8001128 <HAL_GPIO_Init+0x300>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d013      	beq.n	8001020 <HAL_GPIO_Init+0x1f8>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a4c      	ldr	r2, [pc, #304]	; (800112c <HAL_GPIO_Init+0x304>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d00d      	beq.n	800101c <HAL_GPIO_Init+0x1f4>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a4b      	ldr	r2, [pc, #300]	; (8001130 <HAL_GPIO_Init+0x308>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d007      	beq.n	8001018 <HAL_GPIO_Init+0x1f0>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a4a      	ldr	r2, [pc, #296]	; (8001134 <HAL_GPIO_Init+0x30c>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d101      	bne.n	8001014 <HAL_GPIO_Init+0x1ec>
 8001010:	2306      	movs	r3, #6
 8001012:	e00c      	b.n	800102e <HAL_GPIO_Init+0x206>
 8001014:	2307      	movs	r3, #7
 8001016:	e00a      	b.n	800102e <HAL_GPIO_Init+0x206>
 8001018:	2305      	movs	r3, #5
 800101a:	e008      	b.n	800102e <HAL_GPIO_Init+0x206>
 800101c:	2304      	movs	r3, #4
 800101e:	e006      	b.n	800102e <HAL_GPIO_Init+0x206>
 8001020:	2303      	movs	r3, #3
 8001022:	e004      	b.n	800102e <HAL_GPIO_Init+0x206>
 8001024:	2302      	movs	r3, #2
 8001026:	e002      	b.n	800102e <HAL_GPIO_Init+0x206>
 8001028:	2301      	movs	r3, #1
 800102a:	e000      	b.n	800102e <HAL_GPIO_Init+0x206>
 800102c:	2300      	movs	r3, #0
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	f002 0203 	and.w	r2, r2, #3
 8001034:	0092      	lsls	r2, r2, #2
 8001036:	4093      	lsls	r3, r2
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800103e:	4937      	ldr	r1, [pc, #220]	; (800111c <HAL_GPIO_Init+0x2f4>)
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	089b      	lsrs	r3, r3, #2
 8001044:	3302      	adds	r3, #2
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800104c:	4b3a      	ldr	r3, [pc, #232]	; (8001138 <HAL_GPIO_Init+0x310>)
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	43db      	mvns	r3, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001070:	4a31      	ldr	r2, [pc, #196]	; (8001138 <HAL_GPIO_Init+0x310>)
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001076:	4b30      	ldr	r3, [pc, #192]	; (8001138 <HAL_GPIO_Init+0x310>)
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	43db      	mvns	r3, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4313      	orrs	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800109a:	4a27      	ldr	r2, [pc, #156]	; (8001138 <HAL_GPIO_Init+0x310>)
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010a0:	4b25      	ldr	r3, [pc, #148]	; (8001138 <HAL_GPIO_Init+0x310>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010c4:	4a1c      	ldr	r2, [pc, #112]	; (8001138 <HAL_GPIO_Init+0x310>)
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ca:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <HAL_GPIO_Init+0x310>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	43db      	mvns	r3, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010ee:	4a12      	ldr	r2, [pc, #72]	; (8001138 <HAL_GPIO_Init+0x310>)
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	3301      	adds	r3, #1
 80010f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	fa22 f303 	lsr.w	r3, r2, r3
 8001104:	2b00      	cmp	r3, #0
 8001106:	f47f ae97 	bne.w	8000e38 <HAL_GPIO_Init+0x10>
  }
}
 800110a:	bf00      	nop
 800110c:	bf00      	nop
 800110e:	371c      	adds	r7, #28
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	40021000 	.word	0x40021000
 800111c:	40010000 	.word	0x40010000
 8001120:	48000400 	.word	0x48000400
 8001124:	48000800 	.word	0x48000800
 8001128:	48000c00 	.word	0x48000c00
 800112c:	48001000 	.word	0x48001000
 8001130:	48001400 	.word	0x48001400
 8001134:	48001800 	.word	0x48001800
 8001138:	40010400 	.word	0x40010400

0800113c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	807b      	strh	r3, [r7, #2]
 8001148:	4613      	mov	r3, r2
 800114a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800114c:	787b      	ldrb	r3, [r7, #1]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001152:	887a      	ldrh	r2, [r7, #2]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001158:	e002      	b.n	8001160 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800115a:	887a      	ldrh	r2, [r7, #2]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800117e:	887a      	ldrh	r2, [r7, #2]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4013      	ands	r3, r2
 8001184:	041a      	lsls	r2, r3, #16
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	43d9      	mvns	r1, r3
 800118a:	887b      	ldrh	r3, [r7, #2]
 800118c:	400b      	ands	r3, r1
 800118e:	431a      	orrs	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	619a      	str	r2, [r3, #24]
}
 8001194:	bf00      	nop
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011b0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d102      	bne.n	80011c6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	f001 b83a 	b.w	800223a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f000 816f 	beq.w	80014ba <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011dc:	4bb5      	ldr	r3, [pc, #724]	; (80014b4 <HAL_RCC_OscConfig+0x314>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 030c 	and.w	r3, r3, #12
 80011e4:	2b04      	cmp	r3, #4
 80011e6:	d00c      	beq.n	8001202 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011e8:	4bb2      	ldr	r3, [pc, #712]	; (80014b4 <HAL_RCC_OscConfig+0x314>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 030c 	and.w	r3, r3, #12
 80011f0:	2b08      	cmp	r3, #8
 80011f2:	d15c      	bne.n	80012ae <HAL_RCC_OscConfig+0x10e>
 80011f4:	4baf      	ldr	r3, [pc, #700]	; (80014b4 <HAL_RCC_OscConfig+0x314>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80011fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001200:	d155      	bne.n	80012ae <HAL_RCC_OscConfig+0x10e>
 8001202:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001206:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800120e:	fa93 f3a3 	rbit	r3, r3
 8001212:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001216:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800121a:	fab3 f383 	clz	r3, r3
 800121e:	b2db      	uxtb	r3, r3
 8001220:	095b      	lsrs	r3, r3, #5
 8001222:	b2db      	uxtb	r3, r3
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b01      	cmp	r3, #1
 800122c:	d102      	bne.n	8001234 <HAL_RCC_OscConfig+0x94>
 800122e:	4ba1      	ldr	r3, [pc, #644]	; (80014b4 <HAL_RCC_OscConfig+0x314>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	e015      	b.n	8001260 <HAL_RCC_OscConfig+0xc0>
 8001234:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001238:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001240:	fa93 f3a3 	rbit	r3, r3
 8001244:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001248:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800124c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001250:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001254:	fa93 f3a3 	rbit	r3, r3
 8001258:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800125c:	4b95      	ldr	r3, [pc, #596]	; (80014b4 <HAL_RCC_OscConfig+0x314>)
 800125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001260:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001264:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001268:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800126c:	fa92 f2a2 	rbit	r2, r2
 8001270:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001274:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001278:	fab2 f282 	clz	r2, r2
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	f042 0220 	orr.w	r2, r2, #32
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	f002 021f 	and.w	r2, r2, #31
 8001288:	2101      	movs	r1, #1
 800128a:	fa01 f202 	lsl.w	r2, r1, r2
 800128e:	4013      	ands	r3, r2
 8001290:	2b00      	cmp	r3, #0
 8001292:	f000 8111 	beq.w	80014b8 <HAL_RCC_OscConfig+0x318>
 8001296:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800129a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f040 8108 	bne.w	80014b8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	f000 bfc6 	b.w	800223a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012be:	d106      	bne.n	80012ce <HAL_RCC_OscConfig+0x12e>
 80012c0:	4b7c      	ldr	r3, [pc, #496]	; (80014b4 <HAL_RCC_OscConfig+0x314>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a7b      	ldr	r2, [pc, #492]	; (80014b4 <HAL_RCC_OscConfig+0x314>)
 80012c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	e036      	b.n	800133c <HAL_RCC_OscConfig+0x19c>
 80012ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d10c      	bne.n	80012f8 <HAL_RCC_OscConfig+0x158>
 80012de:	4b75      	ldr	r3, [pc, #468]	; (80014b4 <HAL_RCC_OscConfig+0x314>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a74      	ldr	r2, [pc, #464]	; (80014b4 <HAL_RCC_OscConfig+0x314>)
 80012e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	4b72      	ldr	r3, [pc, #456]	; (80014b4 <HAL_RCC_OscConfig+0x314>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a71      	ldr	r2, [pc, #452]	; (80014b4 <HAL_RCC_OscConfig+0x314>)
 80012f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	e021      	b.n	800133c <HAL_RCC_OscConfig+0x19c>
 80012f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001308:	d10c      	bne.n	8001324 <HAL_RCC_OscConfig+0x184>
 800130a:	4b6a      	ldr	r3, [pc, #424]	; (80014b4 <HAL_RCC_OscConfig+0x314>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a69      	ldr	r2, [pc, #420]	; (80014b4 <HAL_RCC_OscConfig+0x314>)
 8001310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	4b67      	ldr	r3, [pc, #412]	; (80014b4 <HAL_RCC_OscConfig+0x314>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a66      	ldr	r2, [pc, #408]	; (80014b4 <HAL_RCC_OscConfig+0x314>)
 800131c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	e00b      	b.n	800133c <HAL_RCC_OscConfig+0x19c>
 8001324:	4b63      	ldr	r3, [pc, #396]	; (80014b4 <HAL_RCC_OscConfig+0x314>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a62      	ldr	r2, [pc, #392]	; (80014b4 <HAL_RCC_OscConfig+0x314>)
 800132a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	4b60      	ldr	r3, [pc, #384]	; (80014b4 <HAL_RCC_OscConfig+0x314>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a5f      	ldr	r2, [pc, #380]	; (80014b4 <HAL_RCC_OscConfig+0x314>)
 8001336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800133a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800133c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001340:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d059      	beq.n	8001400 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134c:	f7ff fbd8 	bl	8000b00 <HAL_GetTick>
 8001350:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001354:	e00a      	b.n	800136c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001356:	f7ff fbd3 	bl	8000b00 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b64      	cmp	r3, #100	; 0x64
 8001364:	d902      	bls.n	800136c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	f000 bf67 	b.w	800223a <HAL_RCC_OscConfig+0x109a>
 800136c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001370:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001374:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001378:	fa93 f3a3 	rbit	r3, r3
 800137c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001380:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001384:	fab3 f383 	clz	r3, r3
 8001388:	b2db      	uxtb	r3, r3
 800138a:	095b      	lsrs	r3, r3, #5
 800138c:	b2db      	uxtb	r3, r3
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	b2db      	uxtb	r3, r3
 8001394:	2b01      	cmp	r3, #1
 8001396:	d102      	bne.n	800139e <HAL_RCC_OscConfig+0x1fe>
 8001398:	4b46      	ldr	r3, [pc, #280]	; (80014b4 <HAL_RCC_OscConfig+0x314>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	e015      	b.n	80013ca <HAL_RCC_OscConfig+0x22a>
 800139e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013a2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80013aa:	fa93 f3a3 	rbit	r3, r3
 80013ae:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80013b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013b6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80013ba:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80013be:	fa93 f3a3 	rbit	r3, r3
 80013c2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80013c6:	4b3b      	ldr	r3, [pc, #236]	; (80014b4 <HAL_RCC_OscConfig+0x314>)
 80013c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013ce:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80013d2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80013d6:	fa92 f2a2 	rbit	r2, r2
 80013da:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80013de:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80013e2:	fab2 f282 	clz	r2, r2
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	f042 0220 	orr.w	r2, r2, #32
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	f002 021f 	and.w	r2, r2, #31
 80013f2:	2101      	movs	r1, #1
 80013f4:	fa01 f202 	lsl.w	r2, r1, r2
 80013f8:	4013      	ands	r3, r2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0ab      	beq.n	8001356 <HAL_RCC_OscConfig+0x1b6>
 80013fe:	e05c      	b.n	80014ba <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001400:	f7ff fb7e 	bl	8000b00 <HAL_GetTick>
 8001404:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001408:	e00a      	b.n	8001420 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800140a:	f7ff fb79 	bl	8000b00 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b64      	cmp	r3, #100	; 0x64
 8001418:	d902      	bls.n	8001420 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	f000 bf0d 	b.w	800223a <HAL_RCC_OscConfig+0x109a>
 8001420:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001424:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001428:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800142c:	fa93 f3a3 	rbit	r3, r3
 8001430:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001434:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001438:	fab3 f383 	clz	r3, r3
 800143c:	b2db      	uxtb	r3, r3
 800143e:	095b      	lsrs	r3, r3, #5
 8001440:	b2db      	uxtb	r3, r3
 8001442:	f043 0301 	orr.w	r3, r3, #1
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b01      	cmp	r3, #1
 800144a:	d102      	bne.n	8001452 <HAL_RCC_OscConfig+0x2b2>
 800144c:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <HAL_RCC_OscConfig+0x314>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	e015      	b.n	800147e <HAL_RCC_OscConfig+0x2de>
 8001452:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001456:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800145e:	fa93 f3a3 	rbit	r3, r3
 8001462:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001466:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800146a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800146e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001472:	fa93 f3a3 	rbit	r3, r3
 8001476:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800147a:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <HAL_RCC_OscConfig+0x314>)
 800147c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001482:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001486:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800148a:	fa92 f2a2 	rbit	r2, r2
 800148e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001492:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001496:	fab2 f282 	clz	r2, r2
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	f042 0220 	orr.w	r2, r2, #32
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	f002 021f 	and.w	r2, r2, #31
 80014a6:	2101      	movs	r1, #1
 80014a8:	fa01 f202 	lsl.w	r2, r1, r2
 80014ac:	4013      	ands	r3, r2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1ab      	bne.n	800140a <HAL_RCC_OscConfig+0x26a>
 80014b2:	e002      	b.n	80014ba <HAL_RCC_OscConfig+0x31a>
 80014b4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 817f 	beq.w	80017ce <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014d0:	4ba7      	ldr	r3, [pc, #668]	; (8001770 <HAL_RCC_OscConfig+0x5d0>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 030c 	and.w	r3, r3, #12
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d00c      	beq.n	80014f6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014dc:	4ba4      	ldr	r3, [pc, #656]	; (8001770 <HAL_RCC_OscConfig+0x5d0>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 030c 	and.w	r3, r3, #12
 80014e4:	2b08      	cmp	r3, #8
 80014e6:	d173      	bne.n	80015d0 <HAL_RCC_OscConfig+0x430>
 80014e8:	4ba1      	ldr	r3, [pc, #644]	; (8001770 <HAL_RCC_OscConfig+0x5d0>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80014f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014f4:	d16c      	bne.n	80015d0 <HAL_RCC_OscConfig+0x430>
 80014f6:	2302      	movs	r3, #2
 80014f8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001500:	fa93 f3a3 	rbit	r3, r3
 8001504:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001508:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150c:	fab3 f383 	clz	r3, r3
 8001510:	b2db      	uxtb	r3, r3
 8001512:	095b      	lsrs	r3, r3, #5
 8001514:	b2db      	uxtb	r3, r3
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b01      	cmp	r3, #1
 800151e:	d102      	bne.n	8001526 <HAL_RCC_OscConfig+0x386>
 8001520:	4b93      	ldr	r3, [pc, #588]	; (8001770 <HAL_RCC_OscConfig+0x5d0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	e013      	b.n	800154e <HAL_RCC_OscConfig+0x3ae>
 8001526:	2302      	movs	r3, #2
 8001528:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001530:	fa93 f3a3 	rbit	r3, r3
 8001534:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001538:	2302      	movs	r3, #2
 800153a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800153e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001542:	fa93 f3a3 	rbit	r3, r3
 8001546:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800154a:	4b89      	ldr	r3, [pc, #548]	; (8001770 <HAL_RCC_OscConfig+0x5d0>)
 800154c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154e:	2202      	movs	r2, #2
 8001550:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001554:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001558:	fa92 f2a2 	rbit	r2, r2
 800155c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001560:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001564:	fab2 f282 	clz	r2, r2
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	f042 0220 	orr.w	r2, r2, #32
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	f002 021f 	and.w	r2, r2, #31
 8001574:	2101      	movs	r1, #1
 8001576:	fa01 f202 	lsl.w	r2, r1, r2
 800157a:	4013      	ands	r3, r2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d00a      	beq.n	8001596 <HAL_RCC_OscConfig+0x3f6>
 8001580:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001584:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d002      	beq.n	8001596 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	f000 be52 	b.w	800223a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001596:	4b76      	ldr	r3, [pc, #472]	; (8001770 <HAL_RCC_OscConfig+0x5d0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800159e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	21f8      	movs	r1, #248	; 0xf8
 80015ac:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b0:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80015b4:	fa91 f1a1 	rbit	r1, r1
 80015b8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80015bc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80015c0:	fab1 f181 	clz	r1, r1
 80015c4:	b2c9      	uxtb	r1, r1
 80015c6:	408b      	lsls	r3, r1
 80015c8:	4969      	ldr	r1, [pc, #420]	; (8001770 <HAL_RCC_OscConfig+0x5d0>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ce:	e0fe      	b.n	80017ce <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 8088 	beq.w	80016f2 <HAL_RCC_OscConfig+0x552>
 80015e2:	2301      	movs	r3, #1
 80015e4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80015ec:	fa93 f3a3 	rbit	r3, r3
 80015f0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80015f4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015f8:	fab3 f383 	clz	r3, r3
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001602:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	461a      	mov	r2, r3
 800160a:	2301      	movs	r3, #1
 800160c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160e:	f7ff fa77 	bl	8000b00 <HAL_GetTick>
 8001612:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001616:	e00a      	b.n	800162e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001618:	f7ff fa72 	bl	8000b00 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d902      	bls.n	800162e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	f000 be06 	b.w	800223a <HAL_RCC_OscConfig+0x109a>
 800162e:	2302      	movs	r3, #2
 8001630:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001634:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001638:	fa93 f3a3 	rbit	r3, r3
 800163c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001640:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001644:	fab3 f383 	clz	r3, r3
 8001648:	b2db      	uxtb	r3, r3
 800164a:	095b      	lsrs	r3, r3, #5
 800164c:	b2db      	uxtb	r3, r3
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b01      	cmp	r3, #1
 8001656:	d102      	bne.n	800165e <HAL_RCC_OscConfig+0x4be>
 8001658:	4b45      	ldr	r3, [pc, #276]	; (8001770 <HAL_RCC_OscConfig+0x5d0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	e013      	b.n	8001686 <HAL_RCC_OscConfig+0x4e6>
 800165e:	2302      	movs	r3, #2
 8001660:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001664:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001668:	fa93 f3a3 	rbit	r3, r3
 800166c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001670:	2302      	movs	r3, #2
 8001672:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001676:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800167a:	fa93 f3a3 	rbit	r3, r3
 800167e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001682:	4b3b      	ldr	r3, [pc, #236]	; (8001770 <HAL_RCC_OscConfig+0x5d0>)
 8001684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001686:	2202      	movs	r2, #2
 8001688:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800168c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001690:	fa92 f2a2 	rbit	r2, r2
 8001694:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001698:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800169c:	fab2 f282 	clz	r2, r2
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	f042 0220 	orr.w	r2, r2, #32
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	f002 021f 	and.w	r2, r2, #31
 80016ac:	2101      	movs	r1, #1
 80016ae:	fa01 f202 	lsl.w	r2, r1, r2
 80016b2:	4013      	ands	r3, r2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0af      	beq.n	8001618 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b8:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <HAL_RCC_OscConfig+0x5d0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	21f8      	movs	r1, #248	; 0xf8
 80016ce:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d2:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80016d6:	fa91 f1a1 	rbit	r1, r1
 80016da:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80016de:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80016e2:	fab1 f181 	clz	r1, r1
 80016e6:	b2c9      	uxtb	r1, r1
 80016e8:	408b      	lsls	r3, r1
 80016ea:	4921      	ldr	r1, [pc, #132]	; (8001770 <HAL_RCC_OscConfig+0x5d0>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	600b      	str	r3, [r1, #0]
 80016f0:	e06d      	b.n	80017ce <HAL_RCC_OscConfig+0x62e>
 80016f2:	2301      	movs	r3, #1
 80016f4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80016fc:	fa93 f3a3 	rbit	r3, r3
 8001700:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001704:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001708:	fab3 f383 	clz	r3, r3
 800170c:	b2db      	uxtb	r3, r3
 800170e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001712:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	461a      	mov	r2, r3
 800171a:	2300      	movs	r3, #0
 800171c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171e:	f7ff f9ef 	bl	8000b00 <HAL_GetTick>
 8001722:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001726:	e00a      	b.n	800173e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001728:	f7ff f9ea 	bl	8000b00 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d902      	bls.n	800173e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	f000 bd7e 	b.w	800223a <HAL_RCC_OscConfig+0x109a>
 800173e:	2302      	movs	r3, #2
 8001740:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001744:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001748:	fa93 f3a3 	rbit	r3, r3
 800174c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001750:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001754:	fab3 f383 	clz	r3, r3
 8001758:	b2db      	uxtb	r3, r3
 800175a:	095b      	lsrs	r3, r3, #5
 800175c:	b2db      	uxtb	r3, r3
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b01      	cmp	r3, #1
 8001766:	d105      	bne.n	8001774 <HAL_RCC_OscConfig+0x5d4>
 8001768:	4b01      	ldr	r3, [pc, #4]	; (8001770 <HAL_RCC_OscConfig+0x5d0>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	e016      	b.n	800179c <HAL_RCC_OscConfig+0x5fc>
 800176e:	bf00      	nop
 8001770:	40021000 	.word	0x40021000
 8001774:	2302      	movs	r3, #2
 8001776:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800177e:	fa93 f3a3 	rbit	r3, r3
 8001782:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001786:	2302      	movs	r3, #2
 8001788:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800178c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001790:	fa93 f3a3 	rbit	r3, r3
 8001794:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001798:	4bbf      	ldr	r3, [pc, #764]	; (8001a98 <HAL_RCC_OscConfig+0x8f8>)
 800179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179c:	2202      	movs	r2, #2
 800179e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80017a2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80017a6:	fa92 f2a2 	rbit	r2, r2
 80017aa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80017ae:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80017b2:	fab2 f282 	clz	r2, r2
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	f042 0220 	orr.w	r2, r2, #32
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	f002 021f 	and.w	r2, r2, #31
 80017c2:	2101      	movs	r1, #1
 80017c4:	fa01 f202 	lsl.w	r2, r1, r2
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1ac      	bne.n	8001728 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 8113 	beq.w	8001a0a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d07c      	beq.n	80018ee <HAL_RCC_OscConfig+0x74e>
 80017f4:	2301      	movs	r3, #1
 80017f6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017fe:	fa93 f3a3 	rbit	r3, r3
 8001802:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001806:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800180a:	fab3 f383 	clz	r3, r3
 800180e:	b2db      	uxtb	r3, r3
 8001810:	461a      	mov	r2, r3
 8001812:	4ba2      	ldr	r3, [pc, #648]	; (8001a9c <HAL_RCC_OscConfig+0x8fc>)
 8001814:	4413      	add	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	461a      	mov	r2, r3
 800181a:	2301      	movs	r3, #1
 800181c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181e:	f7ff f96f 	bl	8000b00 <HAL_GetTick>
 8001822:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001826:	e00a      	b.n	800183e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001828:	f7ff f96a 	bl	8000b00 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d902      	bls.n	800183e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	f000 bcfe 	b.w	800223a <HAL_RCC_OscConfig+0x109a>
 800183e:	2302      	movs	r3, #2
 8001840:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001844:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001848:	fa93 f2a3 	rbit	r2, r3
 800184c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001850:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800185a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800185e:	2202      	movs	r2, #2
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001866:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	fa93 f2a3 	rbit	r2, r3
 8001870:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001874:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800187e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001882:	2202      	movs	r2, #2
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800188a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	fa93 f2a3 	rbit	r2, r3
 8001894:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001898:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800189c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800189e:	4b7e      	ldr	r3, [pc, #504]	; (8001a98 <HAL_RCC_OscConfig+0x8f8>)
 80018a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018a6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80018aa:	2102      	movs	r1, #2
 80018ac:	6019      	str	r1, [r3, #0]
 80018ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	fa93 f1a3 	rbit	r1, r3
 80018bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018c0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80018c4:	6019      	str	r1, [r3, #0]
  return result;
 80018c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ca:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	fab3 f383 	clz	r3, r3
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	f003 031f 	and.w	r3, r3, #31
 80018e0:	2101      	movs	r1, #1
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	4013      	ands	r3, r2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d09d      	beq.n	8001828 <HAL_RCC_OscConfig+0x688>
 80018ec:	e08d      	b.n	8001a0a <HAL_RCC_OscConfig+0x86a>
 80018ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018f2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80018f6:	2201      	movs	r2, #1
 80018f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018fe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	fa93 f2a3 	rbit	r2, r3
 8001908:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800190c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001910:	601a      	str	r2, [r3, #0]
  return result;
 8001912:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001916:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800191a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800191c:	fab3 f383 	clz	r3, r3
 8001920:	b2db      	uxtb	r3, r3
 8001922:	461a      	mov	r2, r3
 8001924:	4b5d      	ldr	r3, [pc, #372]	; (8001a9c <HAL_RCC_OscConfig+0x8fc>)
 8001926:	4413      	add	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	461a      	mov	r2, r3
 800192c:	2300      	movs	r3, #0
 800192e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001930:	f7ff f8e6 	bl	8000b00 <HAL_GetTick>
 8001934:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001938:	e00a      	b.n	8001950 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800193a:	f7ff f8e1 	bl	8000b00 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d902      	bls.n	8001950 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	f000 bc75 	b.w	800223a <HAL_RCC_OscConfig+0x109a>
 8001950:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001954:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001958:	2202      	movs	r2, #2
 800195a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001960:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	fa93 f2a3 	rbit	r2, r3
 800196a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800196e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001978:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800197c:	2202      	movs	r2, #2
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001984:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	fa93 f2a3 	rbit	r2, r3
 800198e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001992:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800199c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80019a0:	2202      	movs	r2, #2
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019a8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	fa93 f2a3 	rbit	r2, r3
 80019b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019b6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80019ba:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019bc:	4b36      	ldr	r3, [pc, #216]	; (8001a98 <HAL_RCC_OscConfig+0x8f8>)
 80019be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019c4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80019c8:	2102      	movs	r1, #2
 80019ca:	6019      	str	r1, [r3, #0]
 80019cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019d0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	fa93 f1a3 	rbit	r1, r3
 80019da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019de:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80019e2:	6019      	str	r1, [r3, #0]
  return result;
 80019e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019e8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	fab3 f383 	clz	r3, r3
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	f003 031f 	and.w	r3, r3, #31
 80019fe:	2101      	movs	r1, #1
 8001a00:	fa01 f303 	lsl.w	r3, r1, r3
 8001a04:	4013      	ands	r3, r2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d197      	bne.n	800193a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a0e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0304 	and.w	r3, r3, #4
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f000 81a5 	beq.w	8001d6a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a20:	2300      	movs	r3, #0
 8001a22:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a26:	4b1c      	ldr	r3, [pc, #112]	; (8001a98 <HAL_RCC_OscConfig+0x8f8>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d116      	bne.n	8001a60 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a32:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <HAL_RCC_OscConfig+0x8f8>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	4a18      	ldr	r2, [pc, #96]	; (8001a98 <HAL_RCC_OscConfig+0x8f8>)
 8001a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	61d3      	str	r3, [r2, #28]
 8001a3e:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <HAL_RCC_OscConfig+0x8f8>)
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001a46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a58:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a60:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <HAL_RCC_OscConfig+0x900>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d121      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <HAL_RCC_OscConfig+0x900>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a0b      	ldr	r2, [pc, #44]	; (8001aa0 <HAL_RCC_OscConfig+0x900>)
 8001a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a76:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a78:	f7ff f842 	bl	8000b00 <HAL_GetTick>
 8001a7c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a80:	e010      	b.n	8001aa4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a82:	f7ff f83d 	bl	8000b00 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b64      	cmp	r3, #100	; 0x64
 8001a90:	d908      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e3d1      	b.n	800223a <HAL_RCC_OscConfig+0x109a>
 8001a96:	bf00      	nop
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	10908120 	.word	0x10908120
 8001aa0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa4:	4b8d      	ldr	r3, [pc, #564]	; (8001cdc <HAL_RCC_OscConfig+0xb3c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0e8      	beq.n	8001a82 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ab0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ab4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d106      	bne.n	8001ace <HAL_RCC_OscConfig+0x92e>
 8001ac0:	4b87      	ldr	r3, [pc, #540]	; (8001ce0 <HAL_RCC_OscConfig+0xb40>)
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	4a86      	ldr	r2, [pc, #536]	; (8001ce0 <HAL_RCC_OscConfig+0xb40>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	6213      	str	r3, [r2, #32]
 8001acc:	e035      	b.n	8001b3a <HAL_RCC_OscConfig+0x99a>
 8001ace:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ad2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10c      	bne.n	8001af8 <HAL_RCC_OscConfig+0x958>
 8001ade:	4b80      	ldr	r3, [pc, #512]	; (8001ce0 <HAL_RCC_OscConfig+0xb40>)
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	4a7f      	ldr	r2, [pc, #508]	; (8001ce0 <HAL_RCC_OscConfig+0xb40>)
 8001ae4:	f023 0301 	bic.w	r3, r3, #1
 8001ae8:	6213      	str	r3, [r2, #32]
 8001aea:	4b7d      	ldr	r3, [pc, #500]	; (8001ce0 <HAL_RCC_OscConfig+0xb40>)
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	4a7c      	ldr	r2, [pc, #496]	; (8001ce0 <HAL_RCC_OscConfig+0xb40>)
 8001af0:	f023 0304 	bic.w	r3, r3, #4
 8001af4:	6213      	str	r3, [r2, #32]
 8001af6:	e020      	b.n	8001b3a <HAL_RCC_OscConfig+0x99a>
 8001af8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001afc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b05      	cmp	r3, #5
 8001b06:	d10c      	bne.n	8001b22 <HAL_RCC_OscConfig+0x982>
 8001b08:	4b75      	ldr	r3, [pc, #468]	; (8001ce0 <HAL_RCC_OscConfig+0xb40>)
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	4a74      	ldr	r2, [pc, #464]	; (8001ce0 <HAL_RCC_OscConfig+0xb40>)
 8001b0e:	f043 0304 	orr.w	r3, r3, #4
 8001b12:	6213      	str	r3, [r2, #32]
 8001b14:	4b72      	ldr	r3, [pc, #456]	; (8001ce0 <HAL_RCC_OscConfig+0xb40>)
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	4a71      	ldr	r2, [pc, #452]	; (8001ce0 <HAL_RCC_OscConfig+0xb40>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	6213      	str	r3, [r2, #32]
 8001b20:	e00b      	b.n	8001b3a <HAL_RCC_OscConfig+0x99a>
 8001b22:	4b6f      	ldr	r3, [pc, #444]	; (8001ce0 <HAL_RCC_OscConfig+0xb40>)
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	4a6e      	ldr	r2, [pc, #440]	; (8001ce0 <HAL_RCC_OscConfig+0xb40>)
 8001b28:	f023 0301 	bic.w	r3, r3, #1
 8001b2c:	6213      	str	r3, [r2, #32]
 8001b2e:	4b6c      	ldr	r3, [pc, #432]	; (8001ce0 <HAL_RCC_OscConfig+0xb40>)
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	4a6b      	ldr	r2, [pc, #428]	; (8001ce0 <HAL_RCC_OscConfig+0xb40>)
 8001b34:	f023 0304 	bic.w	r3, r3, #4
 8001b38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b3e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 8081 	beq.w	8001c4e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b4c:	f7fe ffd8 	bl	8000b00 <HAL_GetTick>
 8001b50:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b54:	e00b      	b.n	8001b6e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b56:	f7fe ffd3 	bl	8000b00 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e365      	b.n	800223a <HAL_RCC_OscConfig+0x109a>
 8001b6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b72:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001b76:	2202      	movs	r2, #2
 8001b78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b7e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	fa93 f2a3 	rbit	r2, r3
 8001b88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b8c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b96:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ba2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	fa93 f2a3 	rbit	r2, r3
 8001bac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001bb4:	601a      	str	r2, [r3, #0]
  return result;
 8001bb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bba:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001bbe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc0:	fab3 f383 	clz	r3, r3
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	095b      	lsrs	r3, r3, #5
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	f043 0302 	orr.w	r3, r3, #2
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d102      	bne.n	8001bda <HAL_RCC_OscConfig+0xa3a>
 8001bd4:	4b42      	ldr	r3, [pc, #264]	; (8001ce0 <HAL_RCC_OscConfig+0xb40>)
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	e013      	b.n	8001c02 <HAL_RCC_OscConfig+0xa62>
 8001bda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bde:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001be2:	2202      	movs	r2, #2
 8001be4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bea:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	fa93 f2a3 	rbit	r2, r3
 8001bf4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bf8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	4b38      	ldr	r3, [pc, #224]	; (8001ce0 <HAL_RCC_OscConfig+0xb40>)
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c02:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c06:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001c0a:	2102      	movs	r1, #2
 8001c0c:	6011      	str	r1, [r2, #0]
 8001c0e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c12:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	fa92 f1a2 	rbit	r1, r2
 8001c1c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c20:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001c24:	6011      	str	r1, [r2, #0]
  return result;
 8001c26:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c2a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	fab2 f282 	clz	r2, r2
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	f002 021f 	and.w	r2, r2, #31
 8001c40:	2101      	movs	r1, #1
 8001c42:	fa01 f202 	lsl.w	r2, r1, r2
 8001c46:	4013      	ands	r3, r2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d084      	beq.n	8001b56 <HAL_RCC_OscConfig+0x9b6>
 8001c4c:	e083      	b.n	8001d56 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c4e:	f7fe ff57 	bl	8000b00 <HAL_GetTick>
 8001c52:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c56:	e00b      	b.n	8001c70 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c58:	f7fe ff52 	bl	8000b00 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e2e4      	b.n	800223a <HAL_RCC_OscConfig+0x109a>
 8001c70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c74:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001c78:	2202      	movs	r2, #2
 8001c7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c80:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	fa93 f2a3 	rbit	r2, r3
 8001c8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c8e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c98:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	fa93 f2a3 	rbit	r2, r3
 8001cae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001cb6:	601a      	str	r2, [r3, #0]
  return result;
 8001cb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cbc:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001cc0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc2:	fab3 f383 	clz	r3, r3
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	095b      	lsrs	r3, r3, #5
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	f043 0302 	orr.w	r3, r3, #2
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d106      	bne.n	8001ce4 <HAL_RCC_OscConfig+0xb44>
 8001cd6:	4b02      	ldr	r3, [pc, #8]	; (8001ce0 <HAL_RCC_OscConfig+0xb40>)
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	e017      	b.n	8001d0c <HAL_RCC_OscConfig+0xb6c>
 8001cdc:	40007000 	.word	0x40007000
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001cec:	2202      	movs	r2, #2
 8001cee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	fa93 f2a3 	rbit	r2, r3
 8001cfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d02:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	4bb3      	ldr	r3, [pc, #716]	; (8001fd8 <HAL_RCC_OscConfig+0xe38>)
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d10:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001d14:	2102      	movs	r1, #2
 8001d16:	6011      	str	r1, [r2, #0]
 8001d18:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d1c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001d20:	6812      	ldr	r2, [r2, #0]
 8001d22:	fa92 f1a2 	rbit	r1, r2
 8001d26:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d2a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001d2e:	6011      	str	r1, [r2, #0]
  return result;
 8001d30:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d34:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001d38:	6812      	ldr	r2, [r2, #0]
 8001d3a:	fab2 f282 	clz	r2, r2
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	f002 021f 	and.w	r2, r2, #31
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d50:	4013      	ands	r3, r2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d180      	bne.n	8001c58 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d56:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d105      	bne.n	8001d6a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d5e:	4b9e      	ldr	r3, [pc, #632]	; (8001fd8 <HAL_RCC_OscConfig+0xe38>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	4a9d      	ldr	r2, [pc, #628]	; (8001fd8 <HAL_RCC_OscConfig+0xe38>)
 8001d64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d68:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d6e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 825e 	beq.w	8002238 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d7c:	4b96      	ldr	r3, [pc, #600]	; (8001fd8 <HAL_RCC_OscConfig+0xe38>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 030c 	and.w	r3, r3, #12
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	f000 821f 	beq.w	80021c8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d8e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	f040 8170 	bne.w	800207c <HAL_RCC_OscConfig+0xedc>
 8001d9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001da4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001da8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001daa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dae:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	fa93 f2a3 	rbit	r2, r3
 8001db8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dbc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001dc0:	601a      	str	r2, [r3, #0]
  return result;
 8001dc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001dca:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dcc:	fab3 f383 	clz	r3, r3
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dd6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	461a      	mov	r2, r3
 8001dde:	2300      	movs	r3, #0
 8001de0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de2:	f7fe fe8d 	bl	8000b00 <HAL_GetTick>
 8001de6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dea:	e009      	b.n	8001e00 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dec:	f7fe fe88 	bl	8000b00 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e21c      	b.n	800223a <HAL_RCC_OscConfig+0x109a>
 8001e00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e04:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001e08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e12:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	fa93 f2a3 	rbit	r2, r3
 8001e1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e20:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001e24:	601a      	str	r2, [r3, #0]
  return result;
 8001e26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e2a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001e2e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e30:	fab3 f383 	clz	r3, r3
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	095b      	lsrs	r3, r3, #5
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d102      	bne.n	8001e4a <HAL_RCC_OscConfig+0xcaa>
 8001e44:	4b64      	ldr	r3, [pc, #400]	; (8001fd8 <HAL_RCC_OscConfig+0xe38>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	e027      	b.n	8001e9a <HAL_RCC_OscConfig+0xcfa>
 8001e4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e4e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001e52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e5c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	fa93 f2a3 	rbit	r2, r3
 8001e66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e6a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e74:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001e78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e82:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	fa93 f2a3 	rbit	r2, r3
 8001e8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e90:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	4b50      	ldr	r3, [pc, #320]	; (8001fd8 <HAL_RCC_OscConfig+0xe38>)
 8001e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e9e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001ea2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ea6:	6011      	str	r1, [r2, #0]
 8001ea8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001eac:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	fa92 f1a2 	rbit	r1, r2
 8001eb6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001eba:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001ebe:	6011      	str	r1, [r2, #0]
  return result;
 8001ec0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ec4:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001ec8:	6812      	ldr	r2, [r2, #0]
 8001eca:	fab2 f282 	clz	r2, r2
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	f042 0220 	orr.w	r2, r2, #32
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	f002 021f 	and.w	r2, r2, #31
 8001eda:	2101      	movs	r1, #1
 8001edc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d182      	bne.n	8001dec <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ee6:	4b3c      	ldr	r3, [pc, #240]	; (8001fd8 <HAL_RCC_OscConfig+0xe38>)
 8001ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eea:	f023 020f 	bic.w	r2, r3, #15
 8001eee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ef2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efa:	4937      	ldr	r1, [pc, #220]	; (8001fd8 <HAL_RCC_OscConfig+0xe38>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001f00:	4b35      	ldr	r3, [pc, #212]	; (8001fd8 <HAL_RCC_OscConfig+0xe38>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001f08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f0c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6a19      	ldr	r1, [r3, #32]
 8001f14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	430b      	orrs	r3, r1
 8001f22:	492d      	ldr	r1, [pc, #180]	; (8001fd8 <HAL_RCC_OscConfig+0xe38>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	604b      	str	r3, [r1, #4]
 8001f28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f2c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001f30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f3a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	fa93 f2a3 	rbit	r2, r3
 8001f44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f48:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001f4c:	601a      	str	r2, [r3, #0]
  return result;
 8001f4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f52:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001f56:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f58:	fab3 f383 	clz	r3, r3
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f62:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	461a      	mov	r2, r3
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6e:	f7fe fdc7 	bl	8000b00 <HAL_GetTick>
 8001f72:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f76:	e009      	b.n	8001f8c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f78:	f7fe fdc2 	bl	8000b00 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e156      	b.n	800223a <HAL_RCC_OscConfig+0x109a>
 8001f8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f90:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001f94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f9e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	fa93 f2a3 	rbit	r2, r3
 8001fa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fac:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001fb0:	601a      	str	r2, [r3, #0]
  return result;
 8001fb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fb6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001fba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fbc:	fab3 f383 	clz	r3, r3
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	095b      	lsrs	r3, r3, #5
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d105      	bne.n	8001fdc <HAL_RCC_OscConfig+0xe3c>
 8001fd0:	4b01      	ldr	r3, [pc, #4]	; (8001fd8 <HAL_RCC_OscConfig+0xe38>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	e02a      	b.n	800202c <HAL_RCC_OscConfig+0xe8c>
 8001fd6:	bf00      	nop
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fe0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001fe4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fe8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fee:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	fa93 f2a3 	rbit	r2, r3
 8001ff8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ffc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002006:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800200a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002014:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	fa93 f2a3 	rbit	r2, r3
 800201e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002022:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	4b86      	ldr	r3, [pc, #536]	; (8002244 <HAL_RCC_OscConfig+0x10a4>)
 800202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002030:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002034:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002038:	6011      	str	r1, [r2, #0]
 800203a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800203e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002042:	6812      	ldr	r2, [r2, #0]
 8002044:	fa92 f1a2 	rbit	r1, r2
 8002048:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800204c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002050:	6011      	str	r1, [r2, #0]
  return result;
 8002052:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002056:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800205a:	6812      	ldr	r2, [r2, #0]
 800205c:	fab2 f282 	clz	r2, r2
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	f042 0220 	orr.w	r2, r2, #32
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	f002 021f 	and.w	r2, r2, #31
 800206c:	2101      	movs	r1, #1
 800206e:	fa01 f202 	lsl.w	r2, r1, r2
 8002072:	4013      	ands	r3, r2
 8002074:	2b00      	cmp	r3, #0
 8002076:	f43f af7f 	beq.w	8001f78 <HAL_RCC_OscConfig+0xdd8>
 800207a:	e0dd      	b.n	8002238 <HAL_RCC_OscConfig+0x1098>
 800207c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002080:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002084:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002088:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800208e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	fa93 f2a3 	rbit	r2, r3
 8002098:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800209c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80020a0:	601a      	str	r2, [r3, #0]
  return result;
 80020a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020a6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80020aa:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ac:	fab3 f383 	clz	r3, r3
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	461a      	mov	r2, r3
 80020be:	2300      	movs	r3, #0
 80020c0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c2:	f7fe fd1d 	bl	8000b00 <HAL_GetTick>
 80020c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ca:	e009      	b.n	80020e0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020cc:	f7fe fd18 	bl	8000b00 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e0ac      	b.n	800223a <HAL_RCC_OscConfig+0x109a>
 80020e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020e4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80020e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020f2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	fa93 f2a3 	rbit	r2, r3
 80020fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002100:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002104:	601a      	str	r2, [r3, #0]
  return result;
 8002106:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800210a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800210e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002110:	fab3 f383 	clz	r3, r3
 8002114:	b2db      	uxtb	r3, r3
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	b2db      	uxtb	r3, r3
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b01      	cmp	r3, #1
 8002122:	d102      	bne.n	800212a <HAL_RCC_OscConfig+0xf8a>
 8002124:	4b47      	ldr	r3, [pc, #284]	; (8002244 <HAL_RCC_OscConfig+0x10a4>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	e027      	b.n	800217a <HAL_RCC_OscConfig+0xfda>
 800212a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800212e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002132:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002136:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002138:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800213c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	fa93 f2a3 	rbit	r2, r3
 8002146:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800214a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002154:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002158:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002162:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	fa93 f2a3 	rbit	r2, r3
 800216c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002170:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	4b33      	ldr	r3, [pc, #204]	; (8002244 <HAL_RCC_OscConfig+0x10a4>)
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800217e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002182:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002186:	6011      	str	r1, [r2, #0]
 8002188:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800218c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002190:	6812      	ldr	r2, [r2, #0]
 8002192:	fa92 f1a2 	rbit	r1, r2
 8002196:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800219a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800219e:	6011      	str	r1, [r2, #0]
  return result;
 80021a0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021a4:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80021a8:	6812      	ldr	r2, [r2, #0]
 80021aa:	fab2 f282 	clz	r2, r2
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	f042 0220 	orr.w	r2, r2, #32
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	f002 021f 	and.w	r2, r2, #31
 80021ba:	2101      	movs	r1, #1
 80021bc:	fa01 f202 	lsl.w	r2, r1, r2
 80021c0:	4013      	ands	r3, r2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d182      	bne.n	80020cc <HAL_RCC_OscConfig+0xf2c>
 80021c6:	e037      	b.n	8002238 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d101      	bne.n	80021dc <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e02e      	b.n	800223a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021dc:	4b19      	ldr	r3, [pc, #100]	; (8002244 <HAL_RCC_OscConfig+0x10a4>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80021e4:	4b17      	ldr	r3, [pc, #92]	; (8002244 <HAL_RCC_OscConfig+0x10a4>)
 80021e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80021ec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80021f0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80021f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	429a      	cmp	r2, r3
 8002202:	d117      	bne.n	8002234 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002204:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002208:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800220c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002210:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002218:	429a      	cmp	r2, r3
 800221a:	d10b      	bne.n	8002234 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800221c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002220:	f003 020f 	and.w	r2, r3, #15
 8002224:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002228:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002230:	429a      	cmp	r2, r3
 8002232:	d001      	beq.n	8002238 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e000      	b.n	800223a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40021000 	.word	0x40021000

08002248 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b09e      	sub	sp, #120	; 0x78
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002252:	2300      	movs	r3, #0
 8002254:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e162      	b.n	8002526 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002260:	4b90      	ldr	r3, [pc, #576]	; (80024a4 <HAL_RCC_ClockConfig+0x25c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d910      	bls.n	8002290 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226e:	4b8d      	ldr	r3, [pc, #564]	; (80024a4 <HAL_RCC_ClockConfig+0x25c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 0207 	bic.w	r2, r3, #7
 8002276:	498b      	ldr	r1, [pc, #556]	; (80024a4 <HAL_RCC_ClockConfig+0x25c>)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	4313      	orrs	r3, r2
 800227c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800227e:	4b89      	ldr	r3, [pc, #548]	; (80024a4 <HAL_RCC_ClockConfig+0x25c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d001      	beq.n	8002290 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e14a      	b.n	8002526 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d008      	beq.n	80022ae <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800229c:	4b82      	ldr	r3, [pc, #520]	; (80024a8 <HAL_RCC_ClockConfig+0x260>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	497f      	ldr	r1, [pc, #508]	; (80024a8 <HAL_RCC_ClockConfig+0x260>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 80dc 	beq.w	8002474 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d13c      	bne.n	800233e <HAL_RCC_ClockConfig+0xf6>
 80022c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022c8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022cc:	fa93 f3a3 	rbit	r3, r3
 80022d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80022d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d4:	fab3 f383 	clz	r3, r3
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	095b      	lsrs	r3, r3, #5
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d102      	bne.n	80022ee <HAL_RCC_ClockConfig+0xa6>
 80022e8:	4b6f      	ldr	r3, [pc, #444]	; (80024a8 <HAL_RCC_ClockConfig+0x260>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	e00f      	b.n	800230e <HAL_RCC_ClockConfig+0xc6>
 80022ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022f6:	fa93 f3a3 	rbit	r3, r3
 80022fa:	667b      	str	r3, [r7, #100]	; 0x64
 80022fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002300:	663b      	str	r3, [r7, #96]	; 0x60
 8002302:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002304:	fa93 f3a3 	rbit	r3, r3
 8002308:	65fb      	str	r3, [r7, #92]	; 0x5c
 800230a:	4b67      	ldr	r3, [pc, #412]	; (80024a8 <HAL_RCC_ClockConfig+0x260>)
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002312:	65ba      	str	r2, [r7, #88]	; 0x58
 8002314:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002316:	fa92 f2a2 	rbit	r2, r2
 800231a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800231c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800231e:	fab2 f282 	clz	r2, r2
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	f042 0220 	orr.w	r2, r2, #32
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	f002 021f 	and.w	r2, r2, #31
 800232e:	2101      	movs	r1, #1
 8002330:	fa01 f202 	lsl.w	r2, r1, r2
 8002334:	4013      	ands	r3, r2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d17b      	bne.n	8002432 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e0f3      	b.n	8002526 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b02      	cmp	r3, #2
 8002344:	d13c      	bne.n	80023c0 <HAL_RCC_ClockConfig+0x178>
 8002346:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800234a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800234e:	fa93 f3a3 	rbit	r3, r3
 8002352:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002356:	fab3 f383 	clz	r3, r3
 800235a:	b2db      	uxtb	r3, r3
 800235c:	095b      	lsrs	r3, r3, #5
 800235e:	b2db      	uxtb	r3, r3
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b01      	cmp	r3, #1
 8002368:	d102      	bne.n	8002370 <HAL_RCC_ClockConfig+0x128>
 800236a:	4b4f      	ldr	r3, [pc, #316]	; (80024a8 <HAL_RCC_ClockConfig+0x260>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	e00f      	b.n	8002390 <HAL_RCC_ClockConfig+0x148>
 8002370:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002374:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002378:	fa93 f3a3 	rbit	r3, r3
 800237c:	647b      	str	r3, [r7, #68]	; 0x44
 800237e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002382:	643b      	str	r3, [r7, #64]	; 0x40
 8002384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002386:	fa93 f3a3 	rbit	r3, r3
 800238a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800238c:	4b46      	ldr	r3, [pc, #280]	; (80024a8 <HAL_RCC_ClockConfig+0x260>)
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002394:	63ba      	str	r2, [r7, #56]	; 0x38
 8002396:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002398:	fa92 f2a2 	rbit	r2, r2
 800239c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800239e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023a0:	fab2 f282 	clz	r2, r2
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	f042 0220 	orr.w	r2, r2, #32
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	f002 021f 	and.w	r2, r2, #31
 80023b0:	2101      	movs	r1, #1
 80023b2:	fa01 f202 	lsl.w	r2, r1, r2
 80023b6:	4013      	ands	r3, r2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d13a      	bne.n	8002432 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0b2      	b.n	8002526 <HAL_RCC_ClockConfig+0x2de>
 80023c0:	2302      	movs	r3, #2
 80023c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c6:	fa93 f3a3 	rbit	r3, r3
 80023ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80023cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ce:	fab3 f383 	clz	r3, r3
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	095b      	lsrs	r3, r3, #5
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d102      	bne.n	80023e8 <HAL_RCC_ClockConfig+0x1a0>
 80023e2:	4b31      	ldr	r3, [pc, #196]	; (80024a8 <HAL_RCC_ClockConfig+0x260>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	e00d      	b.n	8002404 <HAL_RCC_ClockConfig+0x1bc>
 80023e8:	2302      	movs	r3, #2
 80023ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ee:	fa93 f3a3 	rbit	r3, r3
 80023f2:	627b      	str	r3, [r7, #36]	; 0x24
 80023f4:	2302      	movs	r3, #2
 80023f6:	623b      	str	r3, [r7, #32]
 80023f8:	6a3b      	ldr	r3, [r7, #32]
 80023fa:	fa93 f3a3 	rbit	r3, r3
 80023fe:	61fb      	str	r3, [r7, #28]
 8002400:	4b29      	ldr	r3, [pc, #164]	; (80024a8 <HAL_RCC_ClockConfig+0x260>)
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	2202      	movs	r2, #2
 8002406:	61ba      	str	r2, [r7, #24]
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	fa92 f2a2 	rbit	r2, r2
 800240e:	617a      	str	r2, [r7, #20]
  return result;
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	fab2 f282 	clz	r2, r2
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	f042 0220 	orr.w	r2, r2, #32
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	f002 021f 	and.w	r2, r2, #31
 8002422:	2101      	movs	r1, #1
 8002424:	fa01 f202 	lsl.w	r2, r1, r2
 8002428:	4013      	ands	r3, r2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e079      	b.n	8002526 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002432:	4b1d      	ldr	r3, [pc, #116]	; (80024a8 <HAL_RCC_ClockConfig+0x260>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f023 0203 	bic.w	r2, r3, #3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	491a      	ldr	r1, [pc, #104]	; (80024a8 <HAL_RCC_ClockConfig+0x260>)
 8002440:	4313      	orrs	r3, r2
 8002442:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002444:	f7fe fb5c 	bl	8000b00 <HAL_GetTick>
 8002448:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244a:	e00a      	b.n	8002462 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800244c:	f7fe fb58 	bl	8000b00 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	f241 3288 	movw	r2, #5000	; 0x1388
 800245a:	4293      	cmp	r3, r2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e061      	b.n	8002526 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002462:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <HAL_RCC_ClockConfig+0x260>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 020c 	and.w	r2, r3, #12
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	429a      	cmp	r2, r3
 8002472:	d1eb      	bne.n	800244c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002474:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <HAL_RCC_ClockConfig+0x25c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	429a      	cmp	r2, r3
 8002480:	d214      	bcs.n	80024ac <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002482:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <HAL_RCC_ClockConfig+0x25c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f023 0207 	bic.w	r2, r3, #7
 800248a:	4906      	ldr	r1, [pc, #24]	; (80024a4 <HAL_RCC_ClockConfig+0x25c>)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	4313      	orrs	r3, r2
 8002490:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002492:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <HAL_RCC_ClockConfig+0x25c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	429a      	cmp	r2, r3
 800249e:	d005      	beq.n	80024ac <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e040      	b.n	8002526 <HAL_RCC_ClockConfig+0x2de>
 80024a4:	40022000 	.word	0x40022000
 80024a8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b8:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <HAL_RCC_ClockConfig+0x2e8>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	491a      	ldr	r1, [pc, #104]	; (8002530 <HAL_RCC_ClockConfig+0x2e8>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d009      	beq.n	80024ea <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024d6:	4b16      	ldr	r3, [pc, #88]	; (8002530 <HAL_RCC_ClockConfig+0x2e8>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	4912      	ldr	r1, [pc, #72]	; (8002530 <HAL_RCC_ClockConfig+0x2e8>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80024ea:	f000 f829 	bl	8002540 <HAL_RCC_GetSysClockFreq>
 80024ee:	4601      	mov	r1, r0
 80024f0:	4b0f      	ldr	r3, [pc, #60]	; (8002530 <HAL_RCC_ClockConfig+0x2e8>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024f8:	22f0      	movs	r2, #240	; 0xf0
 80024fa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	fa92 f2a2 	rbit	r2, r2
 8002502:	60fa      	str	r2, [r7, #12]
  return result;
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	fab2 f282 	clz	r2, r2
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	40d3      	lsrs	r3, r2
 800250e:	4a09      	ldr	r2, [pc, #36]	; (8002534 <HAL_RCC_ClockConfig+0x2ec>)
 8002510:	5cd3      	ldrb	r3, [r2, r3]
 8002512:	fa21 f303 	lsr.w	r3, r1, r3
 8002516:	4a08      	ldr	r2, [pc, #32]	; (8002538 <HAL_RCC_ClockConfig+0x2f0>)
 8002518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800251a:	4b08      	ldr	r3, [pc, #32]	; (800253c <HAL_RCC_ClockConfig+0x2f4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7fe faaa 	bl	8000a78 <HAL_InitTick>
  
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3778      	adds	r7, #120	; 0x78
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40021000 	.word	0x40021000
 8002534:	0800416c 	.word	0x0800416c
 8002538:	2000009c 	.word	0x2000009c
 800253c:	200000a0 	.word	0x200000a0

08002540 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002540:	b480      	push	{r7}
 8002542:	b08b      	sub	sp, #44	; 0x2c
 8002544:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
 800254a:	2300      	movs	r3, #0
 800254c:	61bb      	str	r3, [r7, #24]
 800254e:	2300      	movs	r3, #0
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800255a:	4b2a      	ldr	r3, [pc, #168]	; (8002604 <HAL_RCC_GetSysClockFreq+0xc4>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	2b04      	cmp	r3, #4
 8002568:	d002      	beq.n	8002570 <HAL_RCC_GetSysClockFreq+0x30>
 800256a:	2b08      	cmp	r3, #8
 800256c:	d003      	beq.n	8002576 <HAL_RCC_GetSysClockFreq+0x36>
 800256e:	e03f      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002570:	4b25      	ldr	r3, [pc, #148]	; (8002608 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002572:	623b      	str	r3, [r7, #32]
      break;
 8002574:	e03f      	b.n	80025f6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800257c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002580:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	fa92 f2a2 	rbit	r2, r2
 8002588:	607a      	str	r2, [r7, #4]
  return result;
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	fab2 f282 	clz	r2, r2
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	40d3      	lsrs	r3, r2
 8002594:	4a1d      	ldr	r2, [pc, #116]	; (800260c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002596:	5cd3      	ldrb	r3, [r2, r3]
 8002598:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800259a:	4b1a      	ldr	r3, [pc, #104]	; (8002604 <HAL_RCC_GetSysClockFreq+0xc4>)
 800259c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	220f      	movs	r2, #15
 80025a4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	fa92 f2a2 	rbit	r2, r2
 80025ac:	60fa      	str	r2, [r7, #12]
  return result;
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	fab2 f282 	clz	r2, r2
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	40d3      	lsrs	r3, r2
 80025b8:	4a15      	ldr	r2, [pc, #84]	; (8002610 <HAL_RCC_GetSysClockFreq+0xd0>)
 80025ba:	5cd3      	ldrb	r3, [r2, r3]
 80025bc:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025c8:	4a0f      	ldr	r2, [pc, #60]	; (8002608 <HAL_RCC_GetSysClockFreq+0xc8>)
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	fb02 f303 	mul.w	r3, r2, r3
 80025d6:	627b      	str	r3, [r7, #36]	; 0x24
 80025d8:	e007      	b.n	80025ea <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025da:	4a0b      	ldr	r2, [pc, #44]	; (8002608 <HAL_RCC_GetSysClockFreq+0xc8>)
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	fbb2 f2f3 	udiv	r2, r2, r3
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	fb02 f303 	mul.w	r3, r2, r3
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	623b      	str	r3, [r7, #32]
      break;
 80025ee:	e002      	b.n	80025f6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025f0:	4b05      	ldr	r3, [pc, #20]	; (8002608 <HAL_RCC_GetSysClockFreq+0xc8>)
 80025f2:	623b      	str	r3, [r7, #32]
      break;
 80025f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025f6:	6a3b      	ldr	r3, [r7, #32]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	372c      	adds	r7, #44	; 0x2c
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	40021000 	.word	0x40021000
 8002608:	007a1200 	.word	0x007a1200
 800260c:	08004184 	.word	0x08004184
 8002610:	08004194 	.word	0x08004194

08002614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002618:	4b03      	ldr	r3, [pc, #12]	; (8002628 <HAL_RCC_GetHCLKFreq+0x14>)
 800261a:	681b      	ldr	r3, [r3, #0]
}
 800261c:	4618      	mov	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	2000009c 	.word	0x2000009c

0800262c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002632:	f7ff ffef 	bl	8002614 <HAL_RCC_GetHCLKFreq>
 8002636:	4601      	mov	r1, r0
 8002638:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002640:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002644:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	fa92 f2a2 	rbit	r2, r2
 800264c:	603a      	str	r2, [r7, #0]
  return result;
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	fab2 f282 	clz	r2, r2
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	40d3      	lsrs	r3, r2
 8002658:	4a04      	ldr	r2, [pc, #16]	; (800266c <HAL_RCC_GetPCLK1Freq+0x40>)
 800265a:	5cd3      	ldrb	r3, [r2, r3]
 800265c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002660:	4618      	mov	r0, r3
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40021000 	.word	0x40021000
 800266c:	0800417c 	.word	0x0800417c

08002670 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002676:	f7ff ffcd 	bl	8002614 <HAL_RCC_GetHCLKFreq>
 800267a:	4601      	mov	r1, r0
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_RCC_GetPCLK2Freq+0x3c>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002684:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002688:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	fa92 f2a2 	rbit	r2, r2
 8002690:	603a      	str	r2, [r7, #0]
  return result;
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	fab2 f282 	clz	r2, r2
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	40d3      	lsrs	r3, r2
 800269c:	4a04      	ldr	r2, [pc, #16]	; (80026b0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800269e:	5cd3      	ldrb	r3, [r2, r3]
 80026a0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80026a4:	4618      	mov	r0, r3
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40021000 	.word	0x40021000
 80026b0:	0800417c 	.word	0x0800417c

080026b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b092      	sub	sp, #72	; 0x48
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026bc:	2300      	movs	r3, #0
 80026be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80026c4:	2300      	movs	r3, #0
 80026c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 80d4 	beq.w	8002880 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026d8:	4b4e      	ldr	r3, [pc, #312]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10e      	bne.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e4:	4b4b      	ldr	r3, [pc, #300]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	4a4a      	ldr	r2, [pc, #296]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ee:	61d3      	str	r3, [r2, #28]
 80026f0:	4b48      	ldr	r3, [pc, #288]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026fc:	2301      	movs	r3, #1
 80026fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002702:	4b45      	ldr	r3, [pc, #276]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270a:	2b00      	cmp	r3, #0
 800270c:	d118      	bne.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800270e:	4b42      	ldr	r3, [pc, #264]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a41      	ldr	r2, [pc, #260]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002718:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800271a:	f7fe f9f1 	bl	8000b00 <HAL_GetTick>
 800271e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002720:	e008      	b.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002722:	f7fe f9ed 	bl	8000b00 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b64      	cmp	r3, #100	; 0x64
 800272e:	d901      	bls.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e1d6      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002734:	4b38      	ldr	r3, [pc, #224]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0f0      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002740:	4b34      	ldr	r3, [pc, #208]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002748:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800274a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 8084 	beq.w	800285a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800275a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800275c:	429a      	cmp	r2, r3
 800275e:	d07c      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002760:	4b2c      	ldr	r3, [pc, #176]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002768:	63fb      	str	r3, [r7, #60]	; 0x3c
 800276a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800276e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002772:	fa93 f3a3 	rbit	r3, r3
 8002776:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800277a:	fab3 f383 	clz	r3, r3
 800277e:	b2db      	uxtb	r3, r3
 8002780:	461a      	mov	r2, r3
 8002782:	4b26      	ldr	r3, [pc, #152]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002784:	4413      	add	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	461a      	mov	r2, r3
 800278a:	2301      	movs	r3, #1
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002792:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002796:	fa93 f3a3 	rbit	r3, r3
 800279a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800279c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800279e:	fab3 f383 	clz	r3, r3
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	461a      	mov	r2, r3
 80027a6:	4b1d      	ldr	r3, [pc, #116]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027a8:	4413      	add	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	461a      	mov	r2, r3
 80027ae:	2300      	movs	r3, #0
 80027b0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80027b2:	4a18      	ldr	r2, [pc, #96]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027b6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d04b      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c2:	f7fe f99d 	bl	8000b00 <HAL_GetTick>
 80027c6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c8:	e00a      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ca:	f7fe f999 	bl	8000b00 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d8:	4293      	cmp	r3, r2
 80027da:	d901      	bls.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e180      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80027e0:	2302      	movs	r3, #2
 80027e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e6:	fa93 f3a3 	rbit	r3, r3
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
 80027ec:	2302      	movs	r3, #2
 80027ee:	623b      	str	r3, [r7, #32]
 80027f0:	6a3b      	ldr	r3, [r7, #32]
 80027f2:	fa93 f3a3 	rbit	r3, r3
 80027f6:	61fb      	str	r3, [r7, #28]
  return result;
 80027f8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027fa:	fab3 f383 	clz	r3, r3
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	095b      	lsrs	r3, r3, #5
 8002802:	b2db      	uxtb	r3, r3
 8002804:	f043 0302 	orr.w	r3, r3, #2
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d108      	bne.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800280e:	4b01      	ldr	r3, [pc, #4]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	e00d      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002814:	40021000 	.word	0x40021000
 8002818:	40007000 	.word	0x40007000
 800281c:	10908100 	.word	0x10908100
 8002820:	2302      	movs	r3, #2
 8002822:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	fa93 f3a3 	rbit	r3, r3
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	4b9a      	ldr	r3, [pc, #616]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800282e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002830:	2202      	movs	r2, #2
 8002832:	613a      	str	r2, [r7, #16]
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	fa92 f2a2 	rbit	r2, r2
 800283a:	60fa      	str	r2, [r7, #12]
  return result;
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	fab2 f282 	clz	r2, r2
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	f002 021f 	and.w	r2, r2, #31
 800284e:	2101      	movs	r1, #1
 8002850:	fa01 f202 	lsl.w	r2, r1, r2
 8002854:	4013      	ands	r3, r2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0b7      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800285a:	4b8f      	ldr	r3, [pc, #572]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	498c      	ldr	r1, [pc, #560]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002868:	4313      	orrs	r3, r2
 800286a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800286c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002870:	2b01      	cmp	r3, #1
 8002872:	d105      	bne.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002874:	4b88      	ldr	r3, [pc, #544]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	4a87      	ldr	r2, [pc, #540]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800287a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800287e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	d008      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800288c:	4b82      	ldr	r3, [pc, #520]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800288e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002890:	f023 0203 	bic.w	r2, r3, #3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	497f      	ldr	r1, [pc, #508]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800289a:	4313      	orrs	r3, r2
 800289c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d008      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028aa:	4b7b      	ldr	r3, [pc, #492]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	4978      	ldr	r1, [pc, #480]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d008      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028c8:	4b73      	ldr	r3, [pc, #460]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	4970      	ldr	r1, [pc, #448]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0320 	and.w	r3, r3, #32
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d008      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028e6:	4b6c      	ldr	r3, [pc, #432]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	f023 0210 	bic.w	r2, r3, #16
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	4969      	ldr	r1, [pc, #420]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d008      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002904:	4b64      	ldr	r3, [pc, #400]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002910:	4961      	ldr	r1, [pc, #388]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002912:	4313      	orrs	r3, r2
 8002914:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291e:	2b00      	cmp	r3, #0
 8002920:	d008      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002922:	4b5d      	ldr	r3, [pc, #372]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	f023 0220 	bic.w	r2, r3, #32
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	495a      	ldr	r1, [pc, #360]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002930:	4313      	orrs	r3, r2
 8002932:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002940:	4b55      	ldr	r3, [pc, #340]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	4952      	ldr	r1, [pc, #328]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800294e:	4313      	orrs	r3, r2
 8002950:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d008      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800295e:	4b4e      	ldr	r3, [pc, #312]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	494b      	ldr	r1, [pc, #300]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800296c:	4313      	orrs	r3, r2
 800296e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0310 	and.w	r3, r3, #16
 8002978:	2b00      	cmp	r3, #0
 800297a:	d008      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800297c:	4b46      	ldr	r3, [pc, #280]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	4943      	ldr	r1, [pc, #268]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800298a:	4313      	orrs	r3, r2
 800298c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002996:	2b00      	cmp	r3, #0
 8002998:	d008      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800299a:	4b3f      	ldr	r3, [pc, #252]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	493c      	ldr	r1, [pc, #240]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d008      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80029b8:	4b37      	ldr	r3, [pc, #220]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029bc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c4:	4934      	ldr	r1, [pc, #208]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d008      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80029d6:	4b30      	ldr	r3, [pc, #192]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029da:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e2:	492d      	ldr	r1, [pc, #180]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d008      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80029f4:	4b28      	ldr	r3, [pc, #160]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a00:	4925      	ldr	r1, [pc, #148]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d008      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002a12:	4b21      	ldr	r3, [pc, #132]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	491e      	ldr	r1, [pc, #120]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d008      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002a30:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a34:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3c:	4916      	ldr	r1, [pc, #88]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d008      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002a4e:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5a:	490f      	ldr	r1, [pc, #60]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d008      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002a6c:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a70:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a78:	4907      	ldr	r1, [pc, #28]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00c      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002a8a:	4b03      	ldr	r3, [pc, #12]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	e002      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002a96:	bf00      	nop
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a9e:	4913      	ldr	r1, [pc, #76]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d008      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002ab0:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002abc:	490b      	ldr	r1, [pc, #44]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d008      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002ace:	4b07      	ldr	r3, [pc, #28]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ada:	4904      	ldr	r1, [pc, #16]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3748      	adds	r7, #72	; 0x48
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40021000 	.word	0x40021000

08002af0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e040      	b.n	8002b84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d106      	bne.n	8002b18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7fd fe7c 	bl	8000810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2224      	movs	r2, #36	; 0x24
 8002b1c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0201 	bic.w	r2, r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 fbba 	bl	80032a8 <UART_SetConfig>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d101      	bne.n	8002b3e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e022      	b.n	8002b84 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d002      	beq.n	8002b4c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 fd82 	bl	8003650 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689a      	ldr	r2, [r3, #8]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0201 	orr.w	r2, r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 fe09 	bl	8003794 <UART_CheckIdleState>
 8002b82:	4603      	mov	r3, r0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08a      	sub	sp, #40	; 0x28
 8002b90:	af02      	add	r7, sp, #8
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	603b      	str	r3, [r7, #0]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ba0:	2b20      	cmp	r3, #32
 8002ba2:	d178      	bne.n	8002c96 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <HAL_UART_Transmit+0x24>
 8002baa:	88fb      	ldrh	r3, [r7, #6]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e071      	b.n	8002c98 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2221      	movs	r2, #33	; 0x21
 8002bc0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bc2:	f7fd ff9d 	bl	8000b00 <HAL_GetTick>
 8002bc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	88fa      	ldrh	r2, [r7, #6]
 8002bcc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	88fa      	ldrh	r2, [r7, #6]
 8002bd4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002be0:	d108      	bne.n	8002bf4 <HAL_UART_Transmit+0x68>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d104      	bne.n	8002bf4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	61bb      	str	r3, [r7, #24]
 8002bf2:	e003      	b.n	8002bfc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002bfc:	e030      	b.n	8002c60 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	2200      	movs	r2, #0
 8002c06:	2180      	movs	r1, #128	; 0x80
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 fe6b 	bl	80038e4 <UART_WaitOnFlagUntilTimeout>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d004      	beq.n	8002c1e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2220      	movs	r2, #32
 8002c18:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e03c      	b.n	8002c98 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10b      	bne.n	8002c3c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	881a      	ldrh	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c30:	b292      	uxth	r2, r2
 8002c32:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	3302      	adds	r3, #2
 8002c38:	61bb      	str	r3, [r7, #24]
 8002c3a:	e008      	b.n	8002c4e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	781a      	ldrb	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	b292      	uxth	r2, r2
 8002c46:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1c8      	bne.n	8002bfe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	2200      	movs	r2, #0
 8002c74:	2140      	movs	r1, #64	; 0x40
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 fe34 	bl	80038e4 <UART_WaitOnFlagUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d004      	beq.n	8002c8c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2220      	movs	r2, #32
 8002c86:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e005      	b.n	8002c98 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2220      	movs	r2, #32
 8002c90:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002c92:	2300      	movs	r3, #0
 8002c94:	e000      	b.n	8002c98 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002c96:	2302      	movs	r3, #2
  }
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3720      	adds	r7, #32
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b0ba      	sub	sp, #232	; 0xe8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002cc6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002cca:	f640 030f 	movw	r3, #2063	; 0x80f
 8002cce:	4013      	ands	r3, r2
 8002cd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002cd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d115      	bne.n	8002d08 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ce0:	f003 0320 	and.w	r3, r3, #32
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00f      	beq.n	8002d08 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cec:	f003 0320 	and.w	r3, r3, #32
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d009      	beq.n	8002d08 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 82ab 	beq.w	8003254 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	4798      	blx	r3
      }
      return;
 8002d06:	e2a5      	b.n	8003254 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002d08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 8117 	beq.w	8002f40 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002d12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d106      	bne.n	8002d2c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002d1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002d22:	4b85      	ldr	r3, [pc, #532]	; (8002f38 <HAL_UART_IRQHandler+0x298>)
 8002d24:	4013      	ands	r3, r2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 810a 	beq.w	8002f40 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d011      	beq.n	8002d5c <HAL_UART_IRQHandler+0xbc>
 8002d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00b      	beq.n	8002d5c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d52:	f043 0201 	orr.w	r2, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d011      	beq.n	8002d8c <HAL_UART_IRQHandler+0xec>
 8002d68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00b      	beq.n	8002d8c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2202      	movs	r2, #2
 8002d7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d82:	f043 0204 	orr.w	r2, r3, #4
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d011      	beq.n	8002dbc <HAL_UART_IRQHandler+0x11c>
 8002d98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00b      	beq.n	8002dbc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2204      	movs	r2, #4
 8002daa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002db2:	f043 0202 	orr.w	r2, r3, #2
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dc0:	f003 0308 	and.w	r3, r3, #8
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d017      	beq.n	8002df8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dcc:	f003 0320 	and.w	r3, r3, #32
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d105      	bne.n	8002de0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002dd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dd8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00b      	beq.n	8002df8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2208      	movs	r2, #8
 8002de6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dee:	f043 0208 	orr.w	r2, r3, #8
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d012      	beq.n	8002e2a <HAL_UART_IRQHandler+0x18a>
 8002e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00c      	beq.n	8002e2a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e20:	f043 0220 	orr.w	r2, r3, #32
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 8211 	beq.w	8003258 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e3a:	f003 0320 	and.w	r3, r3, #32
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00d      	beq.n	8002e5e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e46:	f003 0320 	and.w	r3, r3, #32
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d007      	beq.n	8002e5e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e72:	2b40      	cmp	r3, #64	; 0x40
 8002e74:	d005      	beq.n	8002e82 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002e76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d04f      	beq.n	8002f22 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 fe5c 	bl	8003b40 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e92:	2b40      	cmp	r3, #64	; 0x40
 8002e94:	d141      	bne.n	8002f1a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	3308      	adds	r3, #8
 8002e9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ea4:	e853 3f00 	ldrex	r3, [r3]
 8002ea8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002eac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002eb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	3308      	adds	r3, #8
 8002ebe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002ec2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002ec6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002ece:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002ed2:	e841 2300 	strex	r3, r2, [r1]
 8002ed6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002eda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1d9      	bne.n	8002e96 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d013      	beq.n	8002f12 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eee:	4a13      	ldr	r2, [pc, #76]	; (8002f3c <HAL_UART_IRQHandler+0x29c>)
 8002ef0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fd ff58 	bl	8000dac <HAL_DMA_Abort_IT>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d017      	beq.n	8002f32 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002f0c:	4610      	mov	r0, r2
 8002f0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f10:	e00f      	b.n	8002f32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f9be 	bl	8003294 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f18:	e00b      	b.n	8002f32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f9ba 	bl	8003294 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f20:	e007      	b.n	8002f32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f9b6 	bl	8003294 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002f30:	e192      	b.n	8003258 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f32:	bf00      	nop
    return;
 8002f34:	e190      	b.n	8003258 <HAL_UART_IRQHandler+0x5b8>
 8002f36:	bf00      	nop
 8002f38:	04000120 	.word	0x04000120
 8002f3c:	08003c09 	.word	0x08003c09

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	f040 814b 	bne.w	80031e0 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f4e:	f003 0310 	and.w	r3, r3, #16
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 8144 	beq.w	80031e0 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f5c:	f003 0310 	and.w	r3, r3, #16
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 813d 	beq.w	80031e0 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2210      	movs	r2, #16
 8002f6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f78:	2b40      	cmp	r3, #64	; 0x40
 8002f7a:	f040 80b5 	bne.w	80030e8 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f8a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 8164 	beq.w	800325c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002f9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	f080 815c 	bcs.w	800325c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002faa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	2b20      	cmp	r3, #32
 8002fb6:	f000 8086 	beq.w	80030c6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fc6:	e853 3f00 	ldrex	r3, [r3]
 8002fca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002fce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fd6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002fe4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002fe8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fec:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ff0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ff4:	e841 2300 	strex	r3, r2, [r1]
 8002ff8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002ffc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1da      	bne.n	8002fba <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	3308      	adds	r3, #8
 800300a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800300c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800300e:	e853 3f00 	ldrex	r3, [r3]
 8003012:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003014:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003016:	f023 0301 	bic.w	r3, r3, #1
 800301a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	3308      	adds	r3, #8
 8003024:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003028:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800302c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800302e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003030:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003034:	e841 2300 	strex	r3, r2, [r1]
 8003038:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800303a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1e1      	bne.n	8003004 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	3308      	adds	r3, #8
 8003046:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003048:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800304a:	e853 3f00 	ldrex	r3, [r3]
 800304e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003050:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003052:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003056:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	3308      	adds	r3, #8
 8003060:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003064:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003066:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003068:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800306a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800306c:	e841 2300 	strex	r3, r2, [r1]
 8003070:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003072:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1e3      	bne.n	8003040 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2220      	movs	r2, #32
 800307c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800308e:	e853 3f00 	ldrex	r3, [r3]
 8003092:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003096:	f023 0310 	bic.w	r3, r3, #16
 800309a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	461a      	mov	r2, r3
 80030a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80030aa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80030ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030b0:	e841 2300 	strex	r3, r2, [r1]
 80030b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80030b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1e4      	bne.n	8003086 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fd fe3a 	bl	8000d3a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2202      	movs	r2, #2
 80030ca:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80030d8:	b29b      	uxth	r3, r3
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	b29b      	uxth	r3, r3
 80030de:	4619      	mov	r1, r3
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f7fd f877 	bl	80001d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80030e6:	e0b9      	b.n	800325c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003102:	b29b      	uxth	r3, r3
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 80ab 	beq.w	8003260 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800310a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 80a6 	beq.w	8003260 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800311c:	e853 3f00 	ldrex	r3, [r3]
 8003120:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003124:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003128:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	461a      	mov	r2, r3
 8003132:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003136:	647b      	str	r3, [r7, #68]	; 0x44
 8003138:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800313c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800313e:	e841 2300 	strex	r3, r2, [r1]
 8003142:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1e4      	bne.n	8003114 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	3308      	adds	r3, #8
 8003150:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	e853 3f00 	ldrex	r3, [r3]
 8003158:	623b      	str	r3, [r7, #32]
   return(result);
 800315a:	6a3b      	ldr	r3, [r7, #32]
 800315c:	f023 0301 	bic.w	r3, r3, #1
 8003160:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	3308      	adds	r3, #8
 800316a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800316e:	633a      	str	r2, [r7, #48]	; 0x30
 8003170:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003172:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003176:	e841 2300 	strex	r3, r2, [r1]
 800317a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800317c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1e3      	bne.n	800314a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2220      	movs	r2, #32
 8003186:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	e853 3f00 	ldrex	r3, [r3]
 80031a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f023 0310 	bic.w	r3, r3, #16
 80031aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	461a      	mov	r2, r3
 80031b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031b8:	61fb      	str	r3, [r7, #28]
 80031ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031bc:	69b9      	ldr	r1, [r7, #24]
 80031be:	69fa      	ldr	r2, [r7, #28]
 80031c0:	e841 2300 	strex	r3, r2, [r1]
 80031c4:	617b      	str	r3, [r7, #20]
   return(result);
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1e4      	bne.n	8003196 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031d6:	4619      	mov	r1, r3
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f7fc fffb 	bl	80001d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80031de:	e03f      	b.n	8003260 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80031e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00e      	beq.n	800320a <HAL_UART_IRQHandler+0x56a>
 80031ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d008      	beq.n	800320a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003200:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 fee8 	bl	8003fd8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003208:	e02d      	b.n	8003266 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800320a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800320e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00e      	beq.n	8003234 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800321a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321e:	2b00      	cmp	r3, #0
 8003220:	d008      	beq.n	8003234 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003226:	2b00      	cmp	r3, #0
 8003228:	d01c      	beq.n	8003264 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	4798      	blx	r3
    }
    return;
 8003232:	e017      	b.n	8003264 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323c:	2b00      	cmp	r3, #0
 800323e:	d012      	beq.n	8003266 <HAL_UART_IRQHandler+0x5c6>
 8003240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00c      	beq.n	8003266 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 fcf1 	bl	8003c34 <UART_EndTransmit_IT>
    return;
 8003252:	e008      	b.n	8003266 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003254:	bf00      	nop
 8003256:	e006      	b.n	8003266 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003258:	bf00      	nop
 800325a:	e004      	b.n	8003266 <HAL_UART_IRQHandler+0x5c6>
      return;
 800325c:	bf00      	nop
 800325e:	e002      	b.n	8003266 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003260:	bf00      	nop
 8003262:	e000      	b.n	8003266 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003264:	bf00      	nop
  }

}
 8003266:	37e8      	adds	r7, #232	; 0xe8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032b0:	2300      	movs	r3, #0
 80032b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	431a      	orrs	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	4b92      	ldr	r3, [pc, #584]	; (800351c <UART_SetConfig+0x274>)
 80032d4:	4013      	ands	r3, r2
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6812      	ldr	r2, [r2, #0]
 80032da:	6979      	ldr	r1, [r7, #20]
 80032dc:	430b      	orrs	r3, r1
 80032de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	4313      	orrs	r3, r2
 8003304:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	430a      	orrs	r2, r1
 8003318:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a80      	ldr	r2, [pc, #512]	; (8003520 <UART_SetConfig+0x278>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d120      	bne.n	8003366 <UART_SetConfig+0xbe>
 8003324:	4b7f      	ldr	r3, [pc, #508]	; (8003524 <UART_SetConfig+0x27c>)
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	f003 0303 	and.w	r3, r3, #3
 800332c:	2b03      	cmp	r3, #3
 800332e:	d817      	bhi.n	8003360 <UART_SetConfig+0xb8>
 8003330:	a201      	add	r2, pc, #4	; (adr r2, 8003338 <UART_SetConfig+0x90>)
 8003332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003336:	bf00      	nop
 8003338:	08003349 	.word	0x08003349
 800333c:	08003355 	.word	0x08003355
 8003340:	0800335b 	.word	0x0800335b
 8003344:	0800334f 	.word	0x0800334f
 8003348:	2301      	movs	r3, #1
 800334a:	77fb      	strb	r3, [r7, #31]
 800334c:	e0b5      	b.n	80034ba <UART_SetConfig+0x212>
 800334e:	2302      	movs	r3, #2
 8003350:	77fb      	strb	r3, [r7, #31]
 8003352:	e0b2      	b.n	80034ba <UART_SetConfig+0x212>
 8003354:	2304      	movs	r3, #4
 8003356:	77fb      	strb	r3, [r7, #31]
 8003358:	e0af      	b.n	80034ba <UART_SetConfig+0x212>
 800335a:	2308      	movs	r3, #8
 800335c:	77fb      	strb	r3, [r7, #31]
 800335e:	e0ac      	b.n	80034ba <UART_SetConfig+0x212>
 8003360:	2310      	movs	r3, #16
 8003362:	77fb      	strb	r3, [r7, #31]
 8003364:	e0a9      	b.n	80034ba <UART_SetConfig+0x212>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a6f      	ldr	r2, [pc, #444]	; (8003528 <UART_SetConfig+0x280>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d124      	bne.n	80033ba <UART_SetConfig+0x112>
 8003370:	4b6c      	ldr	r3, [pc, #432]	; (8003524 <UART_SetConfig+0x27c>)
 8003372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003374:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003378:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800337c:	d011      	beq.n	80033a2 <UART_SetConfig+0xfa>
 800337e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003382:	d817      	bhi.n	80033b4 <UART_SetConfig+0x10c>
 8003384:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003388:	d011      	beq.n	80033ae <UART_SetConfig+0x106>
 800338a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800338e:	d811      	bhi.n	80033b4 <UART_SetConfig+0x10c>
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <UART_SetConfig+0xf4>
 8003394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003398:	d006      	beq.n	80033a8 <UART_SetConfig+0x100>
 800339a:	e00b      	b.n	80033b4 <UART_SetConfig+0x10c>
 800339c:	2300      	movs	r3, #0
 800339e:	77fb      	strb	r3, [r7, #31]
 80033a0:	e08b      	b.n	80034ba <UART_SetConfig+0x212>
 80033a2:	2302      	movs	r3, #2
 80033a4:	77fb      	strb	r3, [r7, #31]
 80033a6:	e088      	b.n	80034ba <UART_SetConfig+0x212>
 80033a8:	2304      	movs	r3, #4
 80033aa:	77fb      	strb	r3, [r7, #31]
 80033ac:	e085      	b.n	80034ba <UART_SetConfig+0x212>
 80033ae:	2308      	movs	r3, #8
 80033b0:	77fb      	strb	r3, [r7, #31]
 80033b2:	e082      	b.n	80034ba <UART_SetConfig+0x212>
 80033b4:	2310      	movs	r3, #16
 80033b6:	77fb      	strb	r3, [r7, #31]
 80033b8:	e07f      	b.n	80034ba <UART_SetConfig+0x212>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a5b      	ldr	r2, [pc, #364]	; (800352c <UART_SetConfig+0x284>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d124      	bne.n	800340e <UART_SetConfig+0x166>
 80033c4:	4b57      	ldr	r3, [pc, #348]	; (8003524 <UART_SetConfig+0x27c>)
 80033c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80033cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033d0:	d011      	beq.n	80033f6 <UART_SetConfig+0x14e>
 80033d2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033d6:	d817      	bhi.n	8003408 <UART_SetConfig+0x160>
 80033d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033dc:	d011      	beq.n	8003402 <UART_SetConfig+0x15a>
 80033de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033e2:	d811      	bhi.n	8003408 <UART_SetConfig+0x160>
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <UART_SetConfig+0x148>
 80033e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033ec:	d006      	beq.n	80033fc <UART_SetConfig+0x154>
 80033ee:	e00b      	b.n	8003408 <UART_SetConfig+0x160>
 80033f0:	2300      	movs	r3, #0
 80033f2:	77fb      	strb	r3, [r7, #31]
 80033f4:	e061      	b.n	80034ba <UART_SetConfig+0x212>
 80033f6:	2302      	movs	r3, #2
 80033f8:	77fb      	strb	r3, [r7, #31]
 80033fa:	e05e      	b.n	80034ba <UART_SetConfig+0x212>
 80033fc:	2304      	movs	r3, #4
 80033fe:	77fb      	strb	r3, [r7, #31]
 8003400:	e05b      	b.n	80034ba <UART_SetConfig+0x212>
 8003402:	2308      	movs	r3, #8
 8003404:	77fb      	strb	r3, [r7, #31]
 8003406:	e058      	b.n	80034ba <UART_SetConfig+0x212>
 8003408:	2310      	movs	r3, #16
 800340a:	77fb      	strb	r3, [r7, #31]
 800340c:	e055      	b.n	80034ba <UART_SetConfig+0x212>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a47      	ldr	r2, [pc, #284]	; (8003530 <UART_SetConfig+0x288>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d124      	bne.n	8003462 <UART_SetConfig+0x1ba>
 8003418:	4b42      	ldr	r3, [pc, #264]	; (8003524 <UART_SetConfig+0x27c>)
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003420:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003424:	d011      	beq.n	800344a <UART_SetConfig+0x1a2>
 8003426:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800342a:	d817      	bhi.n	800345c <UART_SetConfig+0x1b4>
 800342c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003430:	d011      	beq.n	8003456 <UART_SetConfig+0x1ae>
 8003432:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003436:	d811      	bhi.n	800345c <UART_SetConfig+0x1b4>
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <UART_SetConfig+0x19c>
 800343c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003440:	d006      	beq.n	8003450 <UART_SetConfig+0x1a8>
 8003442:	e00b      	b.n	800345c <UART_SetConfig+0x1b4>
 8003444:	2300      	movs	r3, #0
 8003446:	77fb      	strb	r3, [r7, #31]
 8003448:	e037      	b.n	80034ba <UART_SetConfig+0x212>
 800344a:	2302      	movs	r3, #2
 800344c:	77fb      	strb	r3, [r7, #31]
 800344e:	e034      	b.n	80034ba <UART_SetConfig+0x212>
 8003450:	2304      	movs	r3, #4
 8003452:	77fb      	strb	r3, [r7, #31]
 8003454:	e031      	b.n	80034ba <UART_SetConfig+0x212>
 8003456:	2308      	movs	r3, #8
 8003458:	77fb      	strb	r3, [r7, #31]
 800345a:	e02e      	b.n	80034ba <UART_SetConfig+0x212>
 800345c:	2310      	movs	r3, #16
 800345e:	77fb      	strb	r3, [r7, #31]
 8003460:	e02b      	b.n	80034ba <UART_SetConfig+0x212>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a33      	ldr	r2, [pc, #204]	; (8003534 <UART_SetConfig+0x28c>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d124      	bne.n	80034b6 <UART_SetConfig+0x20e>
 800346c:	4b2d      	ldr	r3, [pc, #180]	; (8003524 <UART_SetConfig+0x27c>)
 800346e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003470:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003474:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003478:	d011      	beq.n	800349e <UART_SetConfig+0x1f6>
 800347a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800347e:	d817      	bhi.n	80034b0 <UART_SetConfig+0x208>
 8003480:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003484:	d011      	beq.n	80034aa <UART_SetConfig+0x202>
 8003486:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800348a:	d811      	bhi.n	80034b0 <UART_SetConfig+0x208>
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <UART_SetConfig+0x1f0>
 8003490:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003494:	d006      	beq.n	80034a4 <UART_SetConfig+0x1fc>
 8003496:	e00b      	b.n	80034b0 <UART_SetConfig+0x208>
 8003498:	2300      	movs	r3, #0
 800349a:	77fb      	strb	r3, [r7, #31]
 800349c:	e00d      	b.n	80034ba <UART_SetConfig+0x212>
 800349e:	2302      	movs	r3, #2
 80034a0:	77fb      	strb	r3, [r7, #31]
 80034a2:	e00a      	b.n	80034ba <UART_SetConfig+0x212>
 80034a4:	2304      	movs	r3, #4
 80034a6:	77fb      	strb	r3, [r7, #31]
 80034a8:	e007      	b.n	80034ba <UART_SetConfig+0x212>
 80034aa:	2308      	movs	r3, #8
 80034ac:	77fb      	strb	r3, [r7, #31]
 80034ae:	e004      	b.n	80034ba <UART_SetConfig+0x212>
 80034b0:	2310      	movs	r3, #16
 80034b2:	77fb      	strb	r3, [r7, #31]
 80034b4:	e001      	b.n	80034ba <UART_SetConfig+0x212>
 80034b6:	2310      	movs	r3, #16
 80034b8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c2:	d16b      	bne.n	800359c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80034c4:	7ffb      	ldrb	r3, [r7, #31]
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d838      	bhi.n	800353c <UART_SetConfig+0x294>
 80034ca:	a201      	add	r2, pc, #4	; (adr r2, 80034d0 <UART_SetConfig+0x228>)
 80034cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d0:	080034f5 	.word	0x080034f5
 80034d4:	080034fd 	.word	0x080034fd
 80034d8:	08003505 	.word	0x08003505
 80034dc:	0800353d 	.word	0x0800353d
 80034e0:	0800350b 	.word	0x0800350b
 80034e4:	0800353d 	.word	0x0800353d
 80034e8:	0800353d 	.word	0x0800353d
 80034ec:	0800353d 	.word	0x0800353d
 80034f0:	08003513 	.word	0x08003513
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034f4:	f7ff f89a 	bl	800262c <HAL_RCC_GetPCLK1Freq>
 80034f8:	61b8      	str	r0, [r7, #24]
        break;
 80034fa:	e024      	b.n	8003546 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034fc:	f7ff f8b8 	bl	8002670 <HAL_RCC_GetPCLK2Freq>
 8003500:	61b8      	str	r0, [r7, #24]
        break;
 8003502:	e020      	b.n	8003546 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003504:	4b0c      	ldr	r3, [pc, #48]	; (8003538 <UART_SetConfig+0x290>)
 8003506:	61bb      	str	r3, [r7, #24]
        break;
 8003508:	e01d      	b.n	8003546 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800350a:	f7ff f819 	bl	8002540 <HAL_RCC_GetSysClockFreq>
 800350e:	61b8      	str	r0, [r7, #24]
        break;
 8003510:	e019      	b.n	8003546 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003516:	61bb      	str	r3, [r7, #24]
        break;
 8003518:	e015      	b.n	8003546 <UART_SetConfig+0x29e>
 800351a:	bf00      	nop
 800351c:	efff69f3 	.word	0xefff69f3
 8003520:	40013800 	.word	0x40013800
 8003524:	40021000 	.word	0x40021000
 8003528:	40004400 	.word	0x40004400
 800352c:	40004800 	.word	0x40004800
 8003530:	40004c00 	.word	0x40004c00
 8003534:	40005000 	.word	0x40005000
 8003538:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	77bb      	strb	r3, [r7, #30]
        break;
 8003544:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d073      	beq.n	8003634 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	005a      	lsls	r2, r3, #1
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	085b      	lsrs	r3, r3, #1
 8003556:	441a      	add	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003560:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	2b0f      	cmp	r3, #15
 8003566:	d916      	bls.n	8003596 <UART_SetConfig+0x2ee>
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800356e:	d212      	bcs.n	8003596 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	b29b      	uxth	r3, r3
 8003574:	f023 030f 	bic.w	r3, r3, #15
 8003578:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	085b      	lsrs	r3, r3, #1
 800357e:	b29b      	uxth	r3, r3
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	b29a      	uxth	r2, r3
 8003586:	89fb      	ldrh	r3, [r7, #14]
 8003588:	4313      	orrs	r3, r2
 800358a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	89fa      	ldrh	r2, [r7, #14]
 8003592:	60da      	str	r2, [r3, #12]
 8003594:	e04e      	b.n	8003634 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	77bb      	strb	r3, [r7, #30]
 800359a:	e04b      	b.n	8003634 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800359c:	7ffb      	ldrb	r3, [r7, #31]
 800359e:	2b08      	cmp	r3, #8
 80035a0:	d827      	bhi.n	80035f2 <UART_SetConfig+0x34a>
 80035a2:	a201      	add	r2, pc, #4	; (adr r2, 80035a8 <UART_SetConfig+0x300>)
 80035a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a8:	080035cd 	.word	0x080035cd
 80035ac:	080035d5 	.word	0x080035d5
 80035b0:	080035dd 	.word	0x080035dd
 80035b4:	080035f3 	.word	0x080035f3
 80035b8:	080035e3 	.word	0x080035e3
 80035bc:	080035f3 	.word	0x080035f3
 80035c0:	080035f3 	.word	0x080035f3
 80035c4:	080035f3 	.word	0x080035f3
 80035c8:	080035eb 	.word	0x080035eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035cc:	f7ff f82e 	bl	800262c <HAL_RCC_GetPCLK1Freq>
 80035d0:	61b8      	str	r0, [r7, #24]
        break;
 80035d2:	e013      	b.n	80035fc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035d4:	f7ff f84c 	bl	8002670 <HAL_RCC_GetPCLK2Freq>
 80035d8:	61b8      	str	r0, [r7, #24]
        break;
 80035da:	e00f      	b.n	80035fc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035dc:	4b1b      	ldr	r3, [pc, #108]	; (800364c <UART_SetConfig+0x3a4>)
 80035de:	61bb      	str	r3, [r7, #24]
        break;
 80035e0:	e00c      	b.n	80035fc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035e2:	f7fe ffad 	bl	8002540 <HAL_RCC_GetSysClockFreq>
 80035e6:	61b8      	str	r0, [r7, #24]
        break;
 80035e8:	e008      	b.n	80035fc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035ee:	61bb      	str	r3, [r7, #24]
        break;
 80035f0:	e004      	b.n	80035fc <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80035f2:	2300      	movs	r3, #0
 80035f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	77bb      	strb	r3, [r7, #30]
        break;
 80035fa:	bf00      	nop
    }

    if (pclk != 0U)
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d018      	beq.n	8003634 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	085a      	lsrs	r2, r3, #1
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	441a      	add	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	fbb2 f3f3 	udiv	r3, r2, r3
 8003614:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	2b0f      	cmp	r3, #15
 800361a:	d909      	bls.n	8003630 <UART_SetConfig+0x388>
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003622:	d205      	bcs.n	8003630 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	b29a      	uxth	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	60da      	str	r2, [r3, #12]
 800362e:	e001      	b.n	8003634 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003640:	7fbb      	ldrb	r3, [r7, #30]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3720      	adds	r7, #32
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	007a1200 	.word	0x007a1200

08003650 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	f003 0310 	and.w	r3, r3, #16
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00a      	beq.n	8003702 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372c:	2b00      	cmp	r3, #0
 800372e:	d01a      	beq.n	8003766 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800374e:	d10a      	bne.n	8003766 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	605a      	str	r2, [r3, #4]
  }
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b098      	sub	sp, #96	; 0x60
 8003798:	af02      	add	r7, sp, #8
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037a4:	f7fd f9ac 	bl	8000b00 <HAL_GetTick>
 80037a8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d12e      	bne.n	8003816 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037c0:	2200      	movs	r2, #0
 80037c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f88c 	bl	80038e4 <UART_WaitOnFlagUntilTimeout>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d021      	beq.n	8003816 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037da:	e853 3f00 	ldrex	r3, [r3]
 80037de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037e6:	653b      	str	r3, [r7, #80]	; 0x50
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	461a      	mov	r2, r3
 80037ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037f0:	647b      	str	r3, [r7, #68]	; 0x44
 80037f2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037f8:	e841 2300 	strex	r3, r2, [r1]
 80037fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80037fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1e6      	bne.n	80037d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2220      	movs	r2, #32
 8003808:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e062      	b.n	80038dc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b04      	cmp	r3, #4
 8003822:	d149      	bne.n	80038b8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003824:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800382c:	2200      	movs	r2, #0
 800382e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f856 	bl	80038e4 <UART_WaitOnFlagUntilTimeout>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d03c      	beq.n	80038b8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	e853 3f00 	ldrex	r3, [r3]
 800384a:	623b      	str	r3, [r7, #32]
   return(result);
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003852:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	461a      	mov	r2, r3
 800385a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800385c:	633b      	str	r3, [r7, #48]	; 0x30
 800385e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003860:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003862:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003864:	e841 2300 	strex	r3, r2, [r1]
 8003868:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800386a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1e6      	bne.n	800383e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3308      	adds	r3, #8
 8003876:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	e853 3f00 	ldrex	r3, [r3]
 800387e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f023 0301 	bic.w	r3, r3, #1
 8003886:	64bb      	str	r3, [r7, #72]	; 0x48
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3308      	adds	r3, #8
 800388e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003890:	61fa      	str	r2, [r7, #28]
 8003892:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003894:	69b9      	ldr	r1, [r7, #24]
 8003896:	69fa      	ldr	r2, [r7, #28]
 8003898:	e841 2300 	strex	r3, r2, [r1]
 800389c:	617b      	str	r3, [r7, #20]
   return(result);
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1e5      	bne.n	8003870 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e011      	b.n	80038dc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3758      	adds	r7, #88	; 0x58
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	603b      	str	r3, [r7, #0]
 80038f0:	4613      	mov	r3, r2
 80038f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038f4:	e049      	b.n	800398a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fc:	d045      	beq.n	800398a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fe:	f7fd f8ff 	bl	8000b00 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	429a      	cmp	r2, r3
 800390c:	d302      	bcc.n	8003914 <UART_WaitOnFlagUntilTimeout+0x30>
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e048      	b.n	80039aa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0304 	and.w	r3, r3, #4
 8003922:	2b00      	cmp	r3, #0
 8003924:	d031      	beq.n	800398a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	69db      	ldr	r3, [r3, #28]
 800392c:	f003 0308 	and.w	r3, r3, #8
 8003930:	2b08      	cmp	r3, #8
 8003932:	d110      	bne.n	8003956 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2208      	movs	r2, #8
 800393a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 f8ff 	bl	8003b40 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2208      	movs	r2, #8
 8003946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e029      	b.n	80039aa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	69db      	ldr	r3, [r3, #28]
 800395c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003960:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003964:	d111      	bne.n	800398a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800396e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 f8e5 	bl	8003b40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2220      	movs	r2, #32
 800397a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e00f      	b.n	80039aa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69da      	ldr	r2, [r3, #28]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	4013      	ands	r3, r2
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	429a      	cmp	r2, r3
 8003998:	bf0c      	ite	eq
 800399a:	2301      	moveq	r3, #1
 800399c:	2300      	movne	r3, #0
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	461a      	mov	r2, r3
 80039a2:	79fb      	ldrb	r3, [r7, #7]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d0a6      	beq.n	80038f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
	...

080039b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b097      	sub	sp, #92	; 0x5c
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	4613      	mov	r3, r2
 80039c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	88fa      	ldrh	r2, [r7, #6]
 80039cc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	88fa      	ldrh	r2, [r7, #6]
 80039d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e6:	d10e      	bne.n	8003a06 <UART_Start_Receive_IT+0x52>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d105      	bne.n	80039fc <UART_Start_Receive_IT+0x48>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80039f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039fa:	e02d      	b.n	8003a58 <UART_Start_Receive_IT+0xa4>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	22ff      	movs	r2, #255	; 0xff
 8003a00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a04:	e028      	b.n	8003a58 <UART_Start_Receive_IT+0xa4>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10d      	bne.n	8003a2a <UART_Start_Receive_IT+0x76>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d104      	bne.n	8003a20 <UART_Start_Receive_IT+0x6c>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	22ff      	movs	r2, #255	; 0xff
 8003a1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a1e:	e01b      	b.n	8003a58 <UART_Start_Receive_IT+0xa4>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	227f      	movs	r2, #127	; 0x7f
 8003a24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a28:	e016      	b.n	8003a58 <UART_Start_Receive_IT+0xa4>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a32:	d10d      	bne.n	8003a50 <UART_Start_Receive_IT+0x9c>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d104      	bne.n	8003a46 <UART_Start_Receive_IT+0x92>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	227f      	movs	r2, #127	; 0x7f
 8003a40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a44:	e008      	b.n	8003a58 <UART_Start_Receive_IT+0xa4>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	223f      	movs	r2, #63	; 0x3f
 8003a4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a4e:	e003      	b.n	8003a58 <UART_Start_Receive_IT+0xa4>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2222      	movs	r2, #34	; 0x22
 8003a64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3308      	adds	r3, #8
 8003a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a72:	e853 3f00 	ldrex	r3, [r3]
 8003a76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7a:	f043 0301 	orr.w	r3, r3, #1
 8003a7e:	657b      	str	r3, [r7, #84]	; 0x54
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	3308      	adds	r3, #8
 8003a86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a88:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a8a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a90:	e841 2300 	strex	r3, r2, [r1]
 8003a94:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1e5      	bne.n	8003a68 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa4:	d107      	bne.n	8003ab6 <UART_Start_Receive_IT+0x102>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d103      	bne.n	8003ab6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	4a21      	ldr	r2, [pc, #132]	; (8003b38 <UART_Start_Receive_IT+0x184>)
 8003ab2:	669a      	str	r2, [r3, #104]	; 0x68
 8003ab4:	e002      	b.n	8003abc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4a20      	ldr	r2, [pc, #128]	; (8003b3c <UART_Start_Receive_IT+0x188>)
 8003aba:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d019      	beq.n	8003af8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003acc:	e853 3f00 	ldrex	r3, [r3]
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ae4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ae8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003aea:	e841 2300 	strex	r3, r2, [r1]
 8003aee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1e6      	bne.n	8003ac4 <UART_Start_Receive_IT+0x110>
 8003af6:	e018      	b.n	8003b2a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	e853 3f00 	ldrex	r3, [r3]
 8003b04:	613b      	str	r3, [r7, #16]
   return(result);
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f043 0320 	orr.w	r3, r3, #32
 8003b0c:	653b      	str	r3, [r7, #80]	; 0x50
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b16:	623b      	str	r3, [r7, #32]
 8003b18:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1a:	69f9      	ldr	r1, [r7, #28]
 8003b1c:	6a3a      	ldr	r2, [r7, #32]
 8003b1e:	e841 2300 	strex	r3, r2, [r1]
 8003b22:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1e6      	bne.n	8003af8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	375c      	adds	r7, #92	; 0x5c
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	08003e31 	.word	0x08003e31
 8003b3c:	08003c89 	.word	0x08003c89

08003b40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b095      	sub	sp, #84	; 0x54
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b50:	e853 3f00 	ldrex	r3, [r3]
 8003b54:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b66:	643b      	str	r3, [r7, #64]	; 0x40
 8003b68:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b6e:	e841 2300 	strex	r3, r2, [r1]
 8003b72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1e6      	bne.n	8003b48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	3308      	adds	r3, #8
 8003b80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	e853 3f00 	ldrex	r3, [r3]
 8003b88:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	f023 0301 	bic.w	r3, r3, #1
 8003b90:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3308      	adds	r3, #8
 8003b98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ba0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ba2:	e841 2300 	strex	r3, r2, [r1]
 8003ba6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1e5      	bne.n	8003b7a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d118      	bne.n	8003be8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	e853 3f00 	ldrex	r3, [r3]
 8003bc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	f023 0310 	bic.w	r3, r3, #16
 8003bca:	647b      	str	r3, [r7, #68]	; 0x44
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bd4:	61bb      	str	r3, [r7, #24]
 8003bd6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd8:	6979      	ldr	r1, [r7, #20]
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	e841 2300 	strex	r3, r2, [r1]
 8003be0:	613b      	str	r3, [r7, #16]
   return(result);
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1e6      	bne.n	8003bb6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2220      	movs	r2, #32
 8003bec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003bfc:	bf00      	nop
 8003bfe:	3754      	adds	r7, #84	; 0x54
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f7ff fb34 	bl	8003294 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c2c:	bf00      	nop
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b088      	sub	sp, #32
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	e853 3f00 	ldrex	r3, [r3]
 8003c48:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c50:	61fb      	str	r3, [r7, #28]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	461a      	mov	r2, r3
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	61bb      	str	r3, [r7, #24]
 8003c5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5e:	6979      	ldr	r1, [r7, #20]
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	e841 2300 	strex	r3, r2, [r1]
 8003c66:	613b      	str	r3, [r7, #16]
   return(result);
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1e6      	bne.n	8003c3c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2220      	movs	r2, #32
 8003c72:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7ff faf6 	bl	800326c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c80:	bf00      	nop
 8003c82:	3720      	adds	r7, #32
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b09c      	sub	sp, #112	; 0x70
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003c96:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ca0:	2b22      	cmp	r3, #34	; 0x22
 8003ca2:	f040 80b9 	bne.w	8003e18 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003cac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003cb0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003cb4:	b2d9      	uxtb	r1, r3
 8003cb6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc0:	400a      	ands	r2, r1
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f040 809c 	bne.w	8003e28 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cf8:	e853 3f00 	ldrex	r3, [r3]
 8003cfc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003cfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d04:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d10:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d12:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d16:	e841 2300 	strex	r3, r2, [r1]
 8003d1a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1e6      	bne.n	8003cf0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	3308      	adds	r3, #8
 8003d28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2c:	e853 3f00 	ldrex	r3, [r3]
 8003d30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d34:	f023 0301 	bic.w	r3, r3, #1
 8003d38:	667b      	str	r3, [r7, #100]	; 0x64
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	3308      	adds	r3, #8
 8003d40:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003d42:	647a      	str	r2, [r7, #68]	; 0x44
 8003d44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d4a:	e841 2300 	strex	r3, r2, [r1]
 8003d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1e5      	bne.n	8003d22 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d018      	beq.n	8003daa <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	e853 3f00 	ldrex	r3, [r3]
 8003d84:	623b      	str	r3, [r7, #32]
   return(result);
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d8c:	663b      	str	r3, [r7, #96]	; 0x60
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	461a      	mov	r2, r3
 8003d94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d96:	633b      	str	r3, [r7, #48]	; 0x30
 8003d98:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d9e:	e841 2300 	strex	r3, r2, [r1]
 8003da2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1e6      	bne.n	8003d78 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d12e      	bne.n	8003e10 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	e853 3f00 	ldrex	r3, [r3]
 8003dc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f023 0310 	bic.w	r3, r3, #16
 8003dcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dd6:	61fb      	str	r3, [r7, #28]
 8003dd8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dda:	69b9      	ldr	r1, [r7, #24]
 8003ddc:	69fa      	ldr	r2, [r7, #28]
 8003dde:	e841 2300 	strex	r3, r2, [r1]
 8003de2:	617b      	str	r3, [r7, #20]
   return(result);
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1e6      	bne.n	8003db8 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	f003 0310 	and.w	r3, r3, #16
 8003df4:	2b10      	cmp	r3, #16
 8003df6:	d103      	bne.n	8003e00 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2210      	movs	r2, #16
 8003dfe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e06:	4619      	mov	r1, r3
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7fc f9e3 	bl	80001d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e0e:	e00b      	b.n	8003e28 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7ff fa35 	bl	8003280 <HAL_UART_RxCpltCallback>
}
 8003e16:	e007      	b.n	8003e28 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699a      	ldr	r2, [r3, #24]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f042 0208 	orr.w	r2, r2, #8
 8003e26:	619a      	str	r2, [r3, #24]
}
 8003e28:	bf00      	nop
 8003e2a:	3770      	adds	r7, #112	; 0x70
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b09c      	sub	sp, #112	; 0x70
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003e3e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e48:	2b22      	cmp	r3, #34	; 0x22
 8003e4a:	f040 80b9 	bne.w	8003fc0 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003e54:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003e5e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8003e62:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003e66:	4013      	ands	r3, r2
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e6c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e72:	1c9a      	adds	r2, r3, #2
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f040 809c 	bne.w	8003fd0 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ea0:	e853 3f00 	ldrex	r3, [r3]
 8003ea4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003ea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ea8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003eac:	667b      	str	r3, [r7, #100]	; 0x64
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eb6:	657b      	str	r3, [r7, #84]	; 0x54
 8003eb8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003ebc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ebe:	e841 2300 	strex	r3, r2, [r1]
 8003ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1e6      	bne.n	8003e98 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	3308      	adds	r3, #8
 8003ed0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed4:	e853 3f00 	ldrex	r3, [r3]
 8003ed8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003edc:	f023 0301 	bic.w	r3, r3, #1
 8003ee0:	663b      	str	r3, [r7, #96]	; 0x60
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	3308      	adds	r3, #8
 8003ee8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003eea:	643a      	str	r2, [r7, #64]	; 0x40
 8003eec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ef0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ef2:	e841 2300 	strex	r3, r2, [r1]
 8003ef6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1e5      	bne.n	8003eca <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d018      	beq.n	8003f52 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f26:	6a3b      	ldr	r3, [r7, #32]
 8003f28:	e853 3f00 	ldrex	r3, [r3]
 8003f2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f40:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f46:	e841 2300 	strex	r3, r2, [r1]
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1e6      	bne.n	8003f20 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d12e      	bne.n	8003fb8 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	e853 3f00 	ldrex	r3, [r3]
 8003f6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	f023 0310 	bic.w	r3, r3, #16
 8003f74:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f7e:	61bb      	str	r3, [r7, #24]
 8003f80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f82:	6979      	ldr	r1, [r7, #20]
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	e841 2300 	strex	r3, r2, [r1]
 8003f8a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1e6      	bne.n	8003f60 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	f003 0310 	and.w	r3, r3, #16
 8003f9c:	2b10      	cmp	r3, #16
 8003f9e:	d103      	bne.n	8003fa8 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2210      	movs	r2, #16
 8003fa6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003fae:	4619      	mov	r1, r3
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7fc f90f 	bl	80001d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003fb6:	e00b      	b.n	8003fd0 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7ff f961 	bl	8003280 <HAL_UART_RxCpltCallback>
}
 8003fbe:	e007      	b.n	8003fd0 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	699a      	ldr	r2, [r3, #24]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0208 	orr.w	r2, r2, #8
 8003fce:	619a      	str	r2, [r3, #24]
}
 8003fd0:	bf00      	nop
 8003fd2:	3770      	adds	r7, #112	; 0x70
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b08c      	sub	sp, #48	; 0x30
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004000:	2b20      	cmp	r3, #32
 8004002:	d142      	bne.n	800408a <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d002      	beq.n	8004010 <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 800400a:	88fb      	ldrh	r3, [r7, #6]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e03b      	b.n	800408c <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2201      	movs	r2, #1
 8004018:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8004020:	88fb      	ldrh	r3, [r7, #6]
 8004022:	461a      	mov	r2, r3
 8004024:	68b9      	ldr	r1, [r7, #8]
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f7ff fcc4 	bl	80039b4 <UART_Start_Receive_IT>
 800402c:	4603      	mov	r3, r0
 800402e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004032:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004036:	2b00      	cmp	r3, #0
 8004038:	d124      	bne.n	8004084 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800403e:	2b01      	cmp	r3, #1
 8004040:	d11d      	bne.n	800407e <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2210      	movs	r2, #16
 8004048:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	e853 3f00 	ldrex	r3, [r3]
 8004056:	617b      	str	r3, [r7, #20]
   return(result);
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f043 0310 	orr.w	r3, r3, #16
 800405e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	461a      	mov	r2, r3
 8004066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004068:	627b      	str	r3, [r7, #36]	; 0x24
 800406a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406c:	6a39      	ldr	r1, [r7, #32]
 800406e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004070:	e841 2300 	strex	r3, r2, [r1]
 8004074:	61fb      	str	r3, [r7, #28]
   return(result);
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1e6      	bne.n	800404a <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 800407c:	e002      	b.n	8004084 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004084:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004088:	e000      	b.n	800408c <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800408a:	2302      	movs	r3, #2
  }
}
 800408c:	4618      	mov	r0, r3
 800408e:	3730      	adds	r7, #48	; 0x30
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e016      	b.n	80040d4 <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7fc fc36 	bl	8000918 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68da      	ldr	r2, [r3, #12]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040b8:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	691a      	ldr	r2, [r3, #16]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	ea42 0103 	orr.w	r1, r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689a      	ldr	r2, [r3, #8]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	68d2      	ldr	r2, [r2, #12]
 80040ec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <memset>:
 80040fc:	4402      	add	r2, r0
 80040fe:	4603      	mov	r3, r0
 8004100:	4293      	cmp	r3, r2
 8004102:	d100      	bne.n	8004106 <memset+0xa>
 8004104:	4770      	bx	lr
 8004106:	f803 1b01 	strb.w	r1, [r3], #1
 800410a:	e7f9      	b.n	8004100 <memset+0x4>

0800410c <__libc_init_array>:
 800410c:	b570      	push	{r4, r5, r6, lr}
 800410e:	4d0d      	ldr	r5, [pc, #52]	; (8004144 <__libc_init_array+0x38>)
 8004110:	4c0d      	ldr	r4, [pc, #52]	; (8004148 <__libc_init_array+0x3c>)
 8004112:	1b64      	subs	r4, r4, r5
 8004114:	10a4      	asrs	r4, r4, #2
 8004116:	2600      	movs	r6, #0
 8004118:	42a6      	cmp	r6, r4
 800411a:	d109      	bne.n	8004130 <__libc_init_array+0x24>
 800411c:	4d0b      	ldr	r5, [pc, #44]	; (800414c <__libc_init_array+0x40>)
 800411e:	4c0c      	ldr	r4, [pc, #48]	; (8004150 <__libc_init_array+0x44>)
 8004120:	f000 f818 	bl	8004154 <_init>
 8004124:	1b64      	subs	r4, r4, r5
 8004126:	10a4      	asrs	r4, r4, #2
 8004128:	2600      	movs	r6, #0
 800412a:	42a6      	cmp	r6, r4
 800412c:	d105      	bne.n	800413a <__libc_init_array+0x2e>
 800412e:	bd70      	pop	{r4, r5, r6, pc}
 8004130:	f855 3b04 	ldr.w	r3, [r5], #4
 8004134:	4798      	blx	r3
 8004136:	3601      	adds	r6, #1
 8004138:	e7ee      	b.n	8004118 <__libc_init_array+0xc>
 800413a:	f855 3b04 	ldr.w	r3, [r5], #4
 800413e:	4798      	blx	r3
 8004140:	3601      	adds	r6, #1
 8004142:	e7f2      	b.n	800412a <__libc_init_array+0x1e>
 8004144:	080041a4 	.word	0x080041a4
 8004148:	080041a4 	.word	0x080041a4
 800414c:	080041a4 	.word	0x080041a4
 8004150:	080041a8 	.word	0x080041a8

08004154 <_init>:
 8004154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004156:	bf00      	nop
 8004158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800415a:	bc08      	pop	{r3}
 800415c:	469e      	mov	lr, r3
 800415e:	4770      	bx	lr

08004160 <_fini>:
 8004160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004162:	bf00      	nop
 8004164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004166:	bc08      	pop	{r3}
 8004168:	469e      	mov	lr, r3
 800416a:	4770      	bx	lr
