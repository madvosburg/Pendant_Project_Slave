
Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004560  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080046f4  080046f4  000146f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800472c  0800472c  000200ac  2**0
                  CONTENTS
  4 .ARM          00000000  0800472c  0800472c  000200ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800472c  0800472c  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800472c  0800472c  0001472c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004730  08004730  00014730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08004734  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200ac  2**0
                  CONTENTS
 10 .bss          00000170  200000b0  200000b0  000200b0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000220  20000220  000200b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000cb18  00000000  00000000  0002011f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000201b  00000000  00000000  0002cc37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000009b0  00000000  00000000  0002ec58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000762  00000000  00000000  0002f608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022c00  00000000  00000000  0002fd6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d900  00000000  00000000  0005296a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cfe6a  00000000  00000000  0006026a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000026a4  00000000  00000000  001300d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00132778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000b0 	.word	0x200000b0
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080046dc 	.word	0x080046dc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200000b4 	.word	0x200000b4
 80001d0:	080046dc 	.word	0x080046dc

080001d4 <crc_xor>:
uint64_t crc_key = 0xD;

/**
 * XOR logic used to divide data by key
 */
uint64_t crc_xor(uint64_t div_data){
 80001d4:	b4b0      	push	{r4, r5, r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	e9c7 0100 	strd	r0, r1, [r7]
	uint64_t ans = div_data;
 80001de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80001e2:	e9c7 0102 	strd	r0, r1, [r7, #8]
	if(ans & 0b1000){
 80001e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80001ea:	f000 0208 	and.w	r2, r0, #8
 80001ee:	2300      	movs	r3, #0
 80001f0:	4313      	orrs	r3, r2
 80001f2:	d00a      	beq.n	800020a <crc_xor+0x36>
		ans = ans ^ crc_key;		//if leftmost bit is 1, perform xor with key
 80001f4:	4b09      	ldr	r3, [pc, #36]	; (800021c <crc_xor+0x48>)
 80001f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80001fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80001fe:	ea80 0402 	eor.w	r4, r0, r2
 8000202:	ea81 0503 	eor.w	r5, r1, r3
 8000206:	e9c7 4502 	strd	r4, r5, [r7, #8]
	}else{
		ans = ans ^ 0b0000;			//if leftmost bit is 0, perform xor with all zeros
	}
	return ans;
 800020a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800020e:	4610      	mov	r0, r2
 8000210:	4619      	mov	r1, r3
 8000212:	3714      	adds	r7, #20
 8000214:	46bd      	mov	sp, r7
 8000216:	bcb0      	pop	{r4, r5, r7}
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	20000000 	.word	0x20000000

08000220 <crc_division>:
/**
 * divides data by key to get remainder
 *
 * takes 4 bits at a time and XORs them until 4 bit remainder is left
 */
uint64_t crc_division(uint64_t data, int curs_pos, int shift_pos, uint64_t answer){
 8000220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000224:	b08f      	sub	sp, #60	; 0x3c
 8000226:	af00      	add	r7, sp, #0
 8000228:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800022c:	617a      	str	r2, [r7, #20]
 800022e:	613b      	str	r3, [r7, #16]
	int cursor = curs_pos;
 8000230:	697b      	ldr	r3, [r7, #20]
 8000232:	637b      	str	r3, [r7, #52]	; 0x34
	int bit_shift = shift_pos;
 8000234:	693b      	ldr	r3, [r7, #16]
 8000236:	633b      	str	r3, [r7, #48]	; 0x30
	uint64_t remain = answer;
 8000238:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800023c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	uint64_t dividend = 0;
 8000240:	f04f 0200 	mov.w	r2, #0
 8000244:	f04f 0300 	mov.w	r3, #0
 8000248:	e9c7 2308 	strd	r2, r3, [r7, #32]

	while(bit_shift > 0){
 800024c:	e057      	b.n	80002fe <crc_division+0xde>
		bit_shift--;
 800024e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000250:	3b01      	subs	r3, #1
 8000252:	633b      	str	r3, [r7, #48]	; 0x30
		dividend = data & (0x0800000000000000 >> cursor);
 8000254:	f04f 0200 	mov.w	r2, #0
 8000258:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800025c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800025e:	f1c0 0120 	rsb	r1, r0, #32
 8000262:	f1b0 0420 	subs.w	r4, r0, #32
 8000266:	fa22 fa00 	lsr.w	sl, r2, r0
 800026a:	fa03 f101 	lsl.w	r1, r3, r1
 800026e:	ea4a 0a01 	orr.w	sl, sl, r1
 8000272:	d403      	bmi.n	800027c <crc_division+0x5c>
 8000274:	fa43 f404 	asr.w	r4, r3, r4
 8000278:	ea4a 0a04 	orr.w	sl, sl, r4
 800027c:	fa43 fb00 	asr.w	fp, r3, r0
 8000280:	4650      	mov	r0, sl
 8000282:	4659      	mov	r1, fp
 8000284:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000288:	ea02 0500 	and.w	r5, r2, r0
 800028c:	ea03 0601 	and.w	r6, r3, r1
 8000290:	e9c7 5608 	strd	r5, r6, [r7, #32]
		dividend = dividend >> bit_shift;
 8000294:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000298:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800029a:	f1c0 0420 	rsb	r4, r0, #32
 800029e:	f1a0 0120 	sub.w	r1, r0, #32
 80002a2:	fa22 f800 	lsr.w	r8, r2, r0
 80002a6:	fa03 f404 	lsl.w	r4, r3, r4
 80002aa:	ea48 0804 	orr.w	r8, r8, r4
 80002ae:	fa23 f101 	lsr.w	r1, r3, r1
 80002b2:	ea48 0801 	orr.w	r8, r8, r1
 80002b6:	fa23 f900 	lsr.w	r9, r3, r0
 80002ba:	e9c7 8908 	strd	r8, r9, [r7, #32]
		remain = remain << 1;
 80002be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80002c2:	1891      	adds	r1, r2, r2
 80002c4:	60b9      	str	r1, [r7, #8]
 80002c6:	415b      	adcs	r3, r3
 80002c8:	60fb      	str	r3, [r7, #12]
 80002ca:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80002ce:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		remain += dividend;
 80002d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80002d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80002da:	1884      	adds	r4, r0, r2
 80002dc:	603c      	str	r4, [r7, #0]
 80002de:	eb41 0303 	adc.w	r3, r1, r3
 80002e2:	607b      	str	r3, [r7, #4]
 80002e4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80002e8:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		remain = crc_xor(remain);
 80002ec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80002f0:	f7ff ff70 	bl	80001d4 <crc_xor>
 80002f4:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
		cursor++;
 80002f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002fa:	3301      	adds	r3, #1
 80002fc:	637b      	str	r3, [r7, #52]	; 0x34
	while(bit_shift > 0){
 80002fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000300:	2b00      	cmp	r3, #0
 8000302:	dca4      	bgt.n	800024e <crc_division+0x2e>
	}
	return remain;
 8000304:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 8000308:	4610      	mov	r0, r2
 800030a:	4619      	mov	r1, r3
 800030c:	373c      	adds	r7, #60	; 0x3c
 800030e:	46bd      	mov	sp, r7
 8000310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000318:	4b04      	ldr	r3, [pc, #16]	; (800032c <__NVIC_GetPriorityGrouping+0x18>)
 800031a:	68db      	ldr	r3, [r3, #12]
 800031c:	0a1b      	lsrs	r3, r3, #8
 800031e:	f003 0307 	and.w	r3, r3, #7
}
 8000322:	4618      	mov	r0, r3
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800033a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800033e:	2b00      	cmp	r3, #0
 8000340:	db0b      	blt.n	800035a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	f003 021f 	and.w	r2, r3, #31
 8000348:	4907      	ldr	r1, [pc, #28]	; (8000368 <__NVIC_EnableIRQ+0x38>)
 800034a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034e:	095b      	lsrs	r3, r3, #5
 8000350:	2001      	movs	r0, #1
 8000352:	fa00 f202 	lsl.w	r2, r0, r2
 8000356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800035a:	bf00      	nop
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	e000e100 	.word	0xe000e100

0800036c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	4603      	mov	r3, r0
 8000374:	6039      	str	r1, [r7, #0]
 8000376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800037c:	2b00      	cmp	r3, #0
 800037e:	db0a      	blt.n	8000396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	b2da      	uxtb	r2, r3
 8000384:	490c      	ldr	r1, [pc, #48]	; (80003b8 <__NVIC_SetPriority+0x4c>)
 8000386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800038a:	0112      	lsls	r2, r2, #4
 800038c:	b2d2      	uxtb	r2, r2
 800038e:	440b      	add	r3, r1
 8000390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000394:	e00a      	b.n	80003ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000396:	683b      	ldr	r3, [r7, #0]
 8000398:	b2da      	uxtb	r2, r3
 800039a:	4908      	ldr	r1, [pc, #32]	; (80003bc <__NVIC_SetPriority+0x50>)
 800039c:	79fb      	ldrb	r3, [r7, #7]
 800039e:	f003 030f 	and.w	r3, r3, #15
 80003a2:	3b04      	subs	r3, #4
 80003a4:	0112      	lsls	r2, r2, #4
 80003a6:	b2d2      	uxtb	r2, r2
 80003a8:	440b      	add	r3, r1
 80003aa:	761a      	strb	r2, [r3, #24]
}
 80003ac:	bf00      	nop
 80003ae:	370c      	adds	r7, #12
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr
 80003b8:	e000e100 	.word	0xe000e100
 80003bc:	e000ed00 	.word	0xe000ed00

080003c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b089      	sub	sp, #36	; 0x24
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	60f8      	str	r0, [r7, #12]
 80003c8:	60b9      	str	r1, [r7, #8]
 80003ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	f003 0307 	and.w	r3, r3, #7
 80003d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003d4:	69fb      	ldr	r3, [r7, #28]
 80003d6:	f1c3 0307 	rsb	r3, r3, #7
 80003da:	2b04      	cmp	r3, #4
 80003dc:	bf28      	it	cs
 80003de:	2304      	movcs	r3, #4
 80003e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003e2:	69fb      	ldr	r3, [r7, #28]
 80003e4:	3304      	adds	r3, #4
 80003e6:	2b06      	cmp	r3, #6
 80003e8:	d902      	bls.n	80003f0 <NVIC_EncodePriority+0x30>
 80003ea:	69fb      	ldr	r3, [r7, #28]
 80003ec:	3b03      	subs	r3, #3
 80003ee:	e000      	b.n	80003f2 <NVIC_EncodePriority+0x32>
 80003f0:	2300      	movs	r3, #0
 80003f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003f4:	f04f 32ff 	mov.w	r2, #4294967295
 80003f8:	69bb      	ldr	r3, [r7, #24]
 80003fa:	fa02 f303 	lsl.w	r3, r2, r3
 80003fe:	43da      	mvns	r2, r3
 8000400:	68bb      	ldr	r3, [r7, #8]
 8000402:	401a      	ands	r2, r3
 8000404:	697b      	ldr	r3, [r7, #20]
 8000406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000408:	f04f 31ff 	mov.w	r1, #4294967295
 800040c:	697b      	ldr	r3, [r7, #20]
 800040e:	fa01 f303 	lsl.w	r3, r1, r3
 8000412:	43d9      	mvns	r1, r3
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000418:	4313      	orrs	r3, r2
         );
}
 800041a:	4618      	mov	r0, r3
 800041c:	3724      	adds	r7, #36	; 0x24
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr

08000426 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000426:	b480      	push	{r7}
 8000428:	b083      	sub	sp, #12
 800042a:	af00      	add	r7, sp, #0
 800042c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	f043 0201 	orr.w	r2, r3, #1
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	601a      	str	r2, [r3, #0]
}
 800043a:	bf00      	nop
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr

08000446 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 8000446:	b480      	push	{r7}
 8000448:	b083      	sub	sp, #12
 800044a:	af00      	add	r7, sp, #0
 800044c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	f023 0201 	bic.w	r2, r3, #1
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	601a      	str	r2, [r3, #0]
}
 800045a:	bf00      	nop
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr

08000466 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000466:	b480      	push	{r7}
 8000468:	b083      	sub	sp, #12
 800046a:	af00      	add	r7, sp, #0
 800046c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	601a      	str	r2, [r3, #0]
}
 800047a:	bf00      	nop
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr

08000486 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000486:	b480      	push	{r7}
 8000488:	b083      	sub	sp, #12
 800048a:	af00      	add	r7, sp, #0
 800048c:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	f06f 0201 	mvn.w	r2, #1
 8000494:	611a      	str	r2, [r3, #16]
}
 8000496:	bf00      	nop
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr

080004a2 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 80004a2:	b480      	push	{r7}
 80004a4:	b083      	sub	sp, #12
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	691b      	ldr	r3, [r3, #16]
 80004ae:	f003 0301 	and.w	r3, r3, #1
 80004b2:	2b01      	cmp	r3, #1
 80004b4:	d101      	bne.n	80004ba <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80004b6:	2301      	movs	r3, #1
 80004b8:	e000      	b.n	80004bc <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80004ba:	2300      	movs	r3, #0
}
 80004bc:	4618      	mov	r0, r3
 80004be:	370c      	adds	r7, #12
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr

080004c8 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	695b      	ldr	r3, [r3, #20]
 80004d4:	f043 0201 	orr.w	r2, r3, #1
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	615a      	str	r2, [r3, #20]
}
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr

080004e8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80004f0:	4b08      	ldr	r3, [pc, #32]	; (8000514 <LL_APB2_GRP1_EnableClock+0x2c>)
 80004f2:	699a      	ldr	r2, [r3, #24]
 80004f4:	4907      	ldr	r1, [pc, #28]	; (8000514 <LL_APB2_GRP1_EnableClock+0x2c>)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4313      	orrs	r3, r2
 80004fa:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80004fc:	4b05      	ldr	r3, [pc, #20]	; (8000514 <LL_APB2_GRP1_EnableClock+0x2c>)
 80004fe:	699a      	ldr	r2, [r3, #24]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	4013      	ands	r3, r2
 8000504:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000506:	68fb      	ldr	r3, [r7, #12]
}
 8000508:	bf00      	nop
 800050a:	3714      	adds	r7, #20
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr
 8000514:	40021000 	.word	0x40021000

08000518 <HAL_UARTEx_RxEventCallback>:

/**
 * receives data with crc from transmitter every 10ms
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	460b      	mov	r3, r1
 8000522:	807b      	strh	r3, [r7, #2]
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t*)RxData, sizeof(RxData));
 8000524:	2218      	movs	r2, #24
 8000526:	4905      	ldr	r1, [pc, #20]	; (800053c <HAL_UARTEx_RxEventCallback+0x24>)
 8000528:	4805      	ldr	r0, [pc, #20]	; (8000540 <HAL_UARTEx_RxEventCallback+0x28>)
 800052a:	f003 ff51 	bl	80043d0 <HAL_UARTEx_ReceiveToIdle_IT>
	rx_flag = true;
 800052e:	4b05      	ldr	r3, [pc, #20]	; (8000544 <HAL_UARTEx_RxEventCallback+0x2c>)
 8000530:	2201      	movs	r2, #1
 8000532:	701a      	strb	r2, [r3, #0]
}
 8000534:	bf00      	nop
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	200001f0 	.word	0x200001f0
 8000540:	200000cc 	.word	0x200000cc
 8000544:	20000208 	.word	0x20000208

08000548 <crc_decode>:

/**
 * decodes crc value and if the remainder is not zero, track an error in the data sent
 */
void crc_decode(){
 8000548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800054a:	b08d      	sub	sp, #52	; 0x34
 800054c:	af02      	add	r7, sp, #8
	rx_flag = false;
 800054e:	4c29      	ldr	r4, [pc, #164]	; (80005f4 <crc_decode+0xac>)
 8000550:	2500      	movs	r5, #0
 8000552:	7025      	strb	r5, [r4, #0]
	int shift = 60;
 8000554:	243c      	movs	r4, #60	; 0x3c
 8000556:	627c      	str	r4, [r7, #36]	; 0x24
	int position = 0;
 8000558:	2400      	movs	r4, #0
 800055a:	623c      	str	r4, [r7, #32]
	uint64_t appended_data = RxData[1];
 800055c:	4c26      	ldr	r4, [pc, #152]	; (80005f8 <crc_decode+0xb0>)
 800055e:	e9d4 4502 	ldrd	r4, r5, [r4, #8]
 8000562:	e9c7 4506 	strd	r4, r5, [r7, #24]
	uint64_t dividend = appended_data & 0xF000000000000000;
 8000566:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800056a:	2000      	movs	r0, #0
 800056c:	f005 4170 	and.w	r1, r5, #4026531840	; 0xf0000000
 8000570:	e9c7 0104 	strd	r0, r1, [r7, #16]
	dividend = dividend >> shift;
 8000574:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000578:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800057a:	f1c4 0620 	rsb	r6, r4, #32
 800057e:	f1a4 0520 	sub.w	r5, r4, #32
 8000582:	fa20 f204 	lsr.w	r2, r0, r4
 8000586:	fa01 f606 	lsl.w	r6, r1, r6
 800058a:	4332      	orrs	r2, r6
 800058c:	fa21 f505 	lsr.w	r5, r1, r5
 8000590:	432a      	orrs	r2, r5
 8000592:	fa21 f304 	lsr.w	r3, r1, r4
 8000596:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint64_t ans = crc_xor(dividend);
 800059a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800059e:	f7ff fe19 	bl	80001d4 <crc_xor>
 80005a2:	e9c7 0102 	strd	r0, r1, [r7, #8]

	uint64_t remain = crc_division(appended_data, position, shift, ans);
 80005a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80005aa:	e9cd 2300 	strd	r2, r3, [sp]
 80005ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005b0:	6a3a      	ldr	r2, [r7, #32]
 80005b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80005b6:	f7ff fe33 	bl	8000220 <crc_division>
 80005ba:	e9c7 0100 	strd	r0, r1, [r7]
	if(remain != 0){
 80005be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80005c2:	4313      	orrs	r3, r2
 80005c4:	d012      	beq.n	80005ec <crc_decode+0xa4>
		errors++;
 80005c6:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <crc_decode+0xb4>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	3301      	adds	r3, #1
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <crc_decode+0xb4>)
 80005d0:	701a      	strb	r2, [r3, #0]
		if(!error_flag){
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <crc_decode+0xb8>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	f083 0301 	eor.w	r3, r3, #1
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d005      	beq.n	80005ec <crc_decode+0xa4>
			LL_TIM_EnableCounter(TIM16);
 80005e0:	4808      	ldr	r0, [pc, #32]	; (8000604 <crc_decode+0xbc>)
 80005e2:	f7ff ff20 	bl	8000426 <LL_TIM_EnableCounter>
			error_flag = true;
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <crc_decode+0xb8>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80005ec:	bf00      	nop
 80005ee:	372c      	adds	r7, #44	; 0x2c
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f4:	20000208 	.word	0x20000208
 80005f8:	200001f0 	.word	0x200001f0
 80005fc:	20000209 	.word	0x20000209
 8000600:	2000020b 	.word	0x2000020b
 8000604:	40014400 	.word	0x40014400

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b5b0      	push	{r4, r5, r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 fc2a 	bl	8000e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f91a 	bl	8000848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 fa6e 	bl	8000af4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000618:	f000 fa1c 	bl	8000a54 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800061c:	f000 f9ea 	bl	80009f4 <MX_USART1_UART_Init>
  MX_WWDG_Init();
 8000620:	f000 fa48 	bl	8000ab4 <MX_WWDG_Init>
  MX_TIM16_Init();
 8000624:	f000 f96a 	bl	80008fc <MX_TIM16_Init>
  MX_TIM17_Init();
 8000628:	f000 f9a6 	bl	8000978 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
	LL_TIM_EnableCounter(TIM17);
 800062c:	4870      	ldr	r0, [pc, #448]	; (80007f0 <main+0x1e8>)
 800062e:	f7ff fefa 	bl	8000426 <LL_TIM_EnableCounter>
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t*)RxData, sizeof(RxData));
 8000632:	2218      	movs	r2, #24
 8000634:	496f      	ldr	r1, [pc, #444]	; (80007f4 <main+0x1ec>)
 8000636:	4870      	ldr	r0, [pc, #448]	; (80007f8 <main+0x1f0>)
 8000638:	f003 feca 	bl	80043d0 <HAL_UARTEx_ReceiveToIdle_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		//watchdog calibration
		if(LL_TIM_IsActiveFlag_UPDATE(TIM17)){
 800063c:	486c      	ldr	r0, [pc, #432]	; (80007f0 <main+0x1e8>)
 800063e:	f7ff ff30 	bl	80004a2 <LL_TIM_IsActiveFlag_UPDATE>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d010      	beq.n	800066a <main+0x62>
			LL_TIM_ClearFlag_UPDATE(TIM17);
 8000648:	4869      	ldr	r0, [pc, #420]	; (80007f0 <main+0x1e8>)
 800064a:	f7ff ff1c 	bl	8000486 <LL_TIM_ClearFlag_UPDATE>
			LL_TIM_DisableCounter(TIM17);
 800064e:	4868      	ldr	r0, [pc, #416]	; (80007f0 <main+0x1e8>)
 8000650:	f7ff fef9 	bl	8000446 <LL_TIM_DisableCounter>
			MX_WWDG_Init();
 8000654:	f000 fa2e 	bl	8000ab4 <MX_WWDG_Init>
			timer_flag = true;
 8000658:	4b68      	ldr	r3, [pc, #416]	; (80007fc <main+0x1f4>)
 800065a:	2201      	movs	r2, #1
 800065c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, wwdg_msg, 20, 10);
 800065e:	230a      	movs	r3, #10
 8000660:	2214      	movs	r2, #20
 8000662:	4967      	ldr	r1, [pc, #412]	; (8000800 <main+0x1f8>)
 8000664:	4867      	ldr	r0, [pc, #412]	; (8000804 <main+0x1fc>)
 8000666:	f002 fc83 	bl	8002f70 <HAL_UART_Transmit>
		}

		//relay logic
		if(rx_flag){
 800066a:	4b67      	ldr	r3, [pc, #412]	; (8000808 <main+0x200>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	f000 809f 	beq.w	80007b2 <main+0x1aa>
			if(timer_flag){
 8000674:	4b61      	ldr	r3, [pc, #388]	; (80007fc <main+0x1f4>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d002      	beq.n	8000682 <main+0x7a>
				HAL_WWDG_Refresh(&hwwdg);		//receiving timeout
 800067c:	4863      	ldr	r0, [pc, #396]	; (800080c <main+0x204>)
 800067e:	f003 ff1f 	bl	80044c0 <HAL_WWDG_Refresh>
			}
			crc_decode();
 8000682:	f7ff ff61 	bl	8000548 <crc_decode>

			switch(RxData[0]){
 8000686:	4b5b      	ldr	r3, [pc, #364]	; (80007f4 <main+0x1ec>)
 8000688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800068c:	1e54      	subs	r4, r2, #1
 800068e:	f143 35ff 	adc.w	r5, r3, #4294967295
 8000692:	2c08      	cmp	r4, #8
 8000694:	f175 0300 	sbcs.w	r3, r5, #0
 8000698:	d274      	bcs.n	8000784 <main+0x17c>
 800069a:	2c07      	cmp	r4, #7
 800069c:	d872      	bhi.n	8000784 <main+0x17c>
 800069e:	a301      	add	r3, pc, #4	; (adr r3, 80006a4 <main+0x9c>)
 80006a0:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 80006a4:	080006c5 	.word	0x080006c5
 80006a8:	080006e7 	.word	0x080006e7
 80006ac:	080006f3 	.word	0x080006f3
 80006b0:	08000715 	.word	0x08000715
 80006b4:	08000721 	.word	0x08000721
 80006b8:	08000745 	.word	0x08000745
 80006bc:	08000753 	.word	0x08000753
 80006c0:	08000777 	.word	0x08000777
			case RELAY1_ON:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2104      	movs	r1, #4
 80006c8:	4851      	ldr	r0, [pc, #324]	; (8000810 <main+0x208>)
 80006ca:	f000 ff43 	bl	8001554 <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart2, relay1_msg, 20, 10);
 80006ce:	230a      	movs	r3, #10
 80006d0:	2214      	movs	r2, #20
 80006d2:	4950      	ldr	r1, [pc, #320]	; (8000814 <main+0x20c>)
 80006d4:	484b      	ldr	r0, [pc, #300]	; (8000804 <main+0x1fc>)
 80006d6:	f002 fc4b 	bl	8002f70 <HAL_UART_Transmit>
				relay1_count++;
 80006da:	4b4f      	ldr	r3, [pc, #316]	; (8000818 <main+0x210>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	3301      	adds	r3, #1
 80006e0:	4a4d      	ldr	r2, [pc, #308]	; (8000818 <main+0x210>)
 80006e2:	6013      	str	r3, [r2, #0]
				break;
 80006e4:	e065      	b.n	80007b2 <main+0x1aa>
			case RELAY1_OFF:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80006e6:	2201      	movs	r2, #1
 80006e8:	2104      	movs	r1, #4
 80006ea:	4849      	ldr	r0, [pc, #292]	; (8000810 <main+0x208>)
 80006ec:	f000 ff32 	bl	8001554 <HAL_GPIO_WritePin>
				break;
 80006f0:	e05f      	b.n	80007b2 <main+0x1aa>
			case RELAY2_ON:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2108      	movs	r1, #8
 80006f6:	4846      	ldr	r0, [pc, #280]	; (8000810 <main+0x208>)
 80006f8:	f000 ff2c 	bl	8001554 <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart2, relay2_msg, 20, 10);
 80006fc:	230a      	movs	r3, #10
 80006fe:	2214      	movs	r2, #20
 8000700:	4946      	ldr	r1, [pc, #280]	; (800081c <main+0x214>)
 8000702:	4840      	ldr	r0, [pc, #256]	; (8000804 <main+0x1fc>)
 8000704:	f002 fc34 	bl	8002f70 <HAL_UART_Transmit>
				relay2_count++;
 8000708:	4b45      	ldr	r3, [pc, #276]	; (8000820 <main+0x218>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	3301      	adds	r3, #1
 800070e:	4a44      	ldr	r2, [pc, #272]	; (8000820 <main+0x218>)
 8000710:	6013      	str	r3, [r2, #0]
				break;
 8000712:	e04e      	b.n	80007b2 <main+0x1aa>
			case RELAY2_OFF:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	2108      	movs	r1, #8
 8000718:	483d      	ldr	r0, [pc, #244]	; (8000810 <main+0x208>)
 800071a:	f000 ff1b 	bl	8001554 <HAL_GPIO_WritePin>
				break;
 800071e:	e048      	b.n	80007b2 <main+0x1aa>
			case RELAY3_ON:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000726:	483f      	ldr	r0, [pc, #252]	; (8000824 <main+0x21c>)
 8000728:	f000 ff14 	bl	8001554 <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart2, relay3_msg, 20, 10);
 800072c:	230a      	movs	r3, #10
 800072e:	2214      	movs	r2, #20
 8000730:	493d      	ldr	r1, [pc, #244]	; (8000828 <main+0x220>)
 8000732:	4834      	ldr	r0, [pc, #208]	; (8000804 <main+0x1fc>)
 8000734:	f002 fc1c 	bl	8002f70 <HAL_UART_Transmit>
				relay3_count++;
 8000738:	4b3c      	ldr	r3, [pc, #240]	; (800082c <main+0x224>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	3301      	adds	r3, #1
 800073e:	4a3b      	ldr	r2, [pc, #236]	; (800082c <main+0x224>)
 8000740:	6013      	str	r3, [r2, #0]
				break;
 8000742:	e036      	b.n	80007b2 <main+0x1aa>
			case RELAY3_OFF:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000744:	2201      	movs	r2, #1
 8000746:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800074a:	4836      	ldr	r0, [pc, #216]	; (8000824 <main+0x21c>)
 800074c:	f000 ff02 	bl	8001554 <HAL_GPIO_WritePin>
				break;
 8000750:	e02f      	b.n	80007b2 <main+0x1aa>
			case RELAY4_ON:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000758:	4832      	ldr	r0, [pc, #200]	; (8000824 <main+0x21c>)
 800075a:	f000 fefb 	bl	8001554 <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart2, relay4_msg, 20, 10);
 800075e:	230a      	movs	r3, #10
 8000760:	2214      	movs	r2, #20
 8000762:	4933      	ldr	r1, [pc, #204]	; (8000830 <main+0x228>)
 8000764:	4827      	ldr	r0, [pc, #156]	; (8000804 <main+0x1fc>)
 8000766:	f002 fc03 	bl	8002f70 <HAL_UART_Transmit>
				relay4_count++;
 800076a:	4b32      	ldr	r3, [pc, #200]	; (8000834 <main+0x22c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	3301      	adds	r3, #1
 8000770:	4a30      	ldr	r2, [pc, #192]	; (8000834 <main+0x22c>)
 8000772:	6013      	str	r3, [r2, #0]
				break;
 8000774:	e01d      	b.n	80007b2 <main+0x1aa>
			case RELAY4_OFF:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000776:	2201      	movs	r2, #1
 8000778:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800077c:	4829      	ldr	r0, [pc, #164]	; (8000824 <main+0x21c>)
 800077e:	f000 fee9 	bl	8001554 <HAL_GPIO_WritePin>
				break;
 8000782:	e016      	b.n	80007b2 <main+0x1aa>
			default:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	2104      	movs	r1, #4
 8000788:	4821      	ldr	r0, [pc, #132]	; (8000810 <main+0x208>)
 800078a:	f000 fee3 	bl	8001554 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800078e:	2201      	movs	r2, #1
 8000790:	2108      	movs	r1, #8
 8000792:	481f      	ldr	r0, [pc, #124]	; (8000810 <main+0x208>)
 8000794:	f000 fede 	bl	8001554 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000798:	2201      	movs	r2, #1
 800079a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800079e:	4821      	ldr	r0, [pc, #132]	; (8000824 <main+0x21c>)
 80007a0:	f000 fed8 	bl	8001554 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007aa:	481e      	ldr	r0, [pc, #120]	; (8000824 <main+0x21c>)
 80007ac:	f000 fed2 	bl	8001554 <HAL_GPIO_WritePin>
				break;
 80007b0:	bf00      	nop
			}
		}

		//error reset
		if(LL_TIM_IsActiveFlag_UPDATE(TIM16)){
 80007b2:	4821      	ldr	r0, [pc, #132]	; (8000838 <main+0x230>)
 80007b4:	f7ff fe75 	bl	80004a2 <LL_TIM_IsActiveFlag_UPDATE>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d00b      	beq.n	80007d6 <main+0x1ce>
			LL_TIM_ClearFlag_UPDATE(TIM16);
 80007be:	481e      	ldr	r0, [pc, #120]	; (8000838 <main+0x230>)
 80007c0:	f7ff fe61 	bl	8000486 <LL_TIM_ClearFlag_UPDATE>
			LL_TIM_DisableCounter(TIM16);
 80007c4:	481c      	ldr	r0, [pc, #112]	; (8000838 <main+0x230>)
 80007c6:	f7ff fe3e 	bl	8000446 <LL_TIM_DisableCounter>
			error_flag = false;
 80007ca:	4b1c      	ldr	r3, [pc, #112]	; (800083c <main+0x234>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	701a      	strb	r2, [r3, #0]
			errors = 0;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <main+0x238>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]
		}
		if(errors > 10){
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <main+0x238>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b0a      	cmp	r3, #10
 80007dc:	f67f af2e 	bls.w	800063c <main+0x34>
			HAL_UART_Transmit(&huart2, err_max, 50, 10);
 80007e0:	230a      	movs	r3, #10
 80007e2:	2232      	movs	r2, #50	; 0x32
 80007e4:	4917      	ldr	r1, [pc, #92]	; (8000844 <main+0x23c>)
 80007e6:	4807      	ldr	r0, [pc, #28]	; (8000804 <main+0x1fc>)
 80007e8:	f002 fbc2 	bl	8002f70 <HAL_UART_Transmit>
		if(LL_TIM_IsActiveFlag_UPDATE(TIM17)){
 80007ec:	e726      	b.n	800063c <main+0x34>
 80007ee:	bf00      	nop
 80007f0:	40014800 	.word	0x40014800
 80007f4:	200001f0 	.word	0x200001f0
 80007f8:	200000cc 	.word	0x200000cc
 80007fc:	2000020a 	.word	0x2000020a
 8000800:	2000008c 	.word	0x2000008c
 8000804:	20000154 	.word	0x20000154
 8000808:	20000208 	.word	0x20000208
 800080c:	200001dc 	.word	0x200001dc
 8000810:	48000800 	.word	0x48000800
 8000814:	2000003c 	.word	0x2000003c
 8000818:	2000020c 	.word	0x2000020c
 800081c:	20000050 	.word	0x20000050
 8000820:	20000210 	.word	0x20000210
 8000824:	48000400 	.word	0x48000400
 8000828:	20000064 	.word	0x20000064
 800082c:	20000214 	.word	0x20000214
 8000830:	20000078 	.word	0x20000078
 8000834:	20000218 	.word	0x20000218
 8000838:	40014400 	.word	0x40014400
 800083c:	2000020b 	.word	0x2000020b
 8000840:	20000209 	.word	0x20000209
 8000844:	20000008 	.word	0x20000008

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b0a6      	sub	sp, #152	; 0x98
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000852:	2228      	movs	r2, #40	; 0x28
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f003 ff14 	bl	8004684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	2258      	movs	r2, #88	; 0x58
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f003 ff06 	bl	8004684 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000878:	2302      	movs	r3, #2
 800087a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800087c:	2301      	movs	r3, #1
 800087e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000880:	2310      	movs	r3, #16
 8000882:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000886:	2300      	movs	r3, #0
 8000888:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000890:	4618      	mov	r0, r3
 8000892:	f000 fe77 	bl	8001584 <HAL_RCC_OscConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800089c:	f000 f98c 	bl	8000bb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a0:	230f      	movs	r3, #15
 80008a2:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008a4:	2300      	movs	r3, #0
 80008a6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f001 feb6 	bl	800262c <HAL_RCC_ClockConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0x82>
  {
    Error_Handler();
 80008c6:	f000 f977 	bl	8000bb8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <SystemClock_Config+0xb0>)
 80008cc:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM17;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80008d6:	2300      	movs	r3, #0
 80008d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 80008da:	2300      	movs	r3, #0
 80008dc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	4618      	mov	r0, r3
 80008e2:	f002 f8d9 	bl	8002a98 <HAL_RCCEx_PeriphCLKConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80008ec:	f000 f964 	bl	8000bb8 <Error_Handler>
  }
}
 80008f0:	bf00      	nop
 80008f2:	3798      	adds	r7, #152	; 0x98
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	01800003 	.word	0x01800003

080008fc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_Init 0 */
	//f = 8Mhz / PSC				PSC = 615
	//T = (1 / f) * period = 5s		Period = 64934
  /* USER CODE END TIM16_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM16);
 8000910:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000914:	f7ff fde8 	bl	80004e8 <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM16_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000918:	f7ff fcfc 	bl	8000314 <__NVIC_GetPriorityGrouping>
 800091c:	4603      	mov	r3, r0
 800091e:	2200      	movs	r2, #0
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff fd4c 	bl	80003c0 <NVIC_EncodePriority>
 8000928:	4603      	mov	r3, r0
 800092a:	4619      	mov	r1, r3
 800092c:	2019      	movs	r0, #25
 800092e:	f7ff fd1d 	bl	800036c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000932:	2019      	movs	r0, #25
 8000934:	f7ff fcfc 	bl	8000330 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  TIM_InitStruct.Prescaler = 615;
 8000938:	f240 2367 	movw	r3, #615	; 0x267
 800093c:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 64934;
 8000942:	f64f 53a6 	movw	r3, #64934	; 0xfda6
 8000946:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM16, &TIM_InitStruct);
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	4619      	mov	r1, r3
 8000954:	4807      	ldr	r0, [pc, #28]	; (8000974 <MX_TIM16_Init+0x78>)
 8000956:	f003 fdfd 	bl	8004554 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM16);
 800095a:	4806      	ldr	r0, [pc, #24]	; (8000974 <MX_TIM16_Init+0x78>)
 800095c:	f7ff fd83 	bl	8000466 <LL_TIM_DisableARRPreload>
  /* USER CODE BEGIN TIM16_Init 2 */

	LL_TIM_GenerateEvent_UPDATE(TIM16);
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <MX_TIM16_Init+0x78>)
 8000962:	f7ff fdb1 	bl	80004c8 <LL_TIM_GenerateEvent_UPDATE>

	LL_TIM_ClearFlag_UPDATE(TIM16);
 8000966:	4803      	ldr	r0, [pc, #12]	; (8000974 <MX_TIM16_Init+0x78>)
 8000968:	f7ff fd8d 	bl	8000486 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM16_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	3718      	adds	r7, #24
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40014400 	.word	0x40014400

08000978 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_Init 0 */
	//f = 8MHz / PSC					PSC = 367
	//T = (1 / f) * period = 3s			Period = 65216
  /* USER CODE END TIM17_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM17);
 800098c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000990:	f7ff fdaa 	bl	80004e8 <LL_APB2_GRP1_EnableClock>

  /* TIM17 interrupt Init */
  NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000994:	f7ff fcbe 	bl	8000314 <__NVIC_GetPriorityGrouping>
 8000998:	4603      	mov	r3, r0
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fd0e 	bl	80003c0 <NVIC_EncodePriority>
 80009a4:	4603      	mov	r3, r0
 80009a6:	4619      	mov	r1, r3
 80009a8:	201a      	movs	r0, #26
 80009aa:	f7ff fcdf 	bl	800036c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80009ae:	201a      	movs	r0, #26
 80009b0:	f7ff fcbe 	bl	8000330 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  TIM_InitStruct.Prescaler = 367;
 80009b4:	f240 136f 	movw	r3, #367	; 0x16f
 80009b8:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65216;
 80009be:	f64f 63c0 	movw	r3, #65216	; 0xfec0
 80009c2:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM17, &TIM_InitStruct);
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	4619      	mov	r1, r3
 80009d0:	4807      	ldr	r0, [pc, #28]	; (80009f0 <MX_TIM17_Init+0x78>)
 80009d2:	f003 fdbf 	bl	8004554 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM17);
 80009d6:	4806      	ldr	r0, [pc, #24]	; (80009f0 <MX_TIM17_Init+0x78>)
 80009d8:	f7ff fd45 	bl	8000466 <LL_TIM_DisableARRPreload>
  /* USER CODE BEGIN TIM17_Init 2 */

	LL_TIM_GenerateEvent_UPDATE(TIM17);
 80009dc:	4804      	ldr	r0, [pc, #16]	; (80009f0 <MX_TIM17_Init+0x78>)
 80009de:	f7ff fd73 	bl	80004c8 <LL_TIM_GenerateEvent_UPDATE>

	LL_TIM_ClearFlag_UPDATE(TIM17);
 80009e2:	4803      	ldr	r0, [pc, #12]	; (80009f0 <MX_TIM17_Init+0x78>)
 80009e4:	f7ff fd4f 	bl	8000486 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM17_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	3718      	adds	r7, #24
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40014800 	.word	0x40014800

080009f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_USART1_UART_Init+0x58>)
 80009fa:	4a15      	ldr	r2, [pc, #84]	; (8000a50 <MX_USART1_UART_Init+0x5c>)
 80009fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009fe:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a38:	f002 fa4c 	bl	8002ed4 <HAL_UART_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a42:	f000 f8b9 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200000cc 	.word	0x200000cc
 8000a50:	40013800 	.word	0x40013800

08000a54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_USART2_UART_Init+0x58>)
 8000a5a:	4a15      	ldr	r2, [pc, #84]	; (8000ab0 <MX_USART2_UART_Init+0x5c>)
 8000a5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <MX_USART2_UART_Init+0x58>)
 8000a60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_USART2_UART_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_USART2_UART_Init+0x58>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_USART2_UART_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_USART2_UART_Init+0x58>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <MX_USART2_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_USART2_UART_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <MX_USART2_UART_Init+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_USART2_UART_Init+0x58>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_USART2_UART_Init+0x58>)
 8000a98:	f002 fa1c 	bl	8002ed4 <HAL_UART_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000aa2:	f000 f889 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000154 	.word	0x20000154
 8000ab0:	40004400 	.word	0x40004400

08000ab4 <MX_WWDG_Init>:
  * @brief WWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN WWDG_Init 1 */
	//counter = ((max_time * clk) / (4096 * prescalar)) + 64			= ((.015 * 8M) / (4096 * 4)) + 64 = 72
	//window = counter - ((min_time * clk) / (4096 * prescalar))		= 72 - ((0.005 * 8M) / (4096 * 4)) = 70
  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_WWDG_Init+0x38>)
 8000aba:	4a0d      	ldr	r2, [pc, #52]	; (8000af0 <MX_WWDG_Init+0x3c>)
 8000abc:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_4;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <MX_WWDG_Init+0x38>)
 8000ac0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ac4:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 70;
 8000ac6:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_WWDG_Init+0x38>)
 8000ac8:	2246      	movs	r2, #70	; 0x46
 8000aca:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 72;
 8000acc:	4b07      	ldr	r3, [pc, #28]	; (8000aec <MX_WWDG_Init+0x38>)
 8000ace:	2248      	movs	r2, #72	; 0x48
 8000ad0:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_WWDG_Init+0x38>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 8000ad8:	4804      	ldr	r0, [pc, #16]	; (8000aec <MX_WWDG_Init+0x38>)
 8000ada:	f003 fccd 	bl	8004478 <HAL_WWDG_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_WWDG_Init+0x34>
  {
    Error_Handler();
 8000ae4:	f000 f868 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	200001dc 	.word	0x200001dc
 8000af0:	40002c00 	.word	0x40002c00

08000af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b088      	sub	sp, #32
 8000af8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afa:	f107 030c 	add.w	r3, r7, #12
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0a:	4b28      	ldr	r3, [pc, #160]	; (8000bac <MX_GPIO_Init+0xb8>)
 8000b0c:	695b      	ldr	r3, [r3, #20]
 8000b0e:	4a27      	ldr	r2, [pc, #156]	; (8000bac <MX_GPIO_Init+0xb8>)
 8000b10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b14:	6153      	str	r3, [r2, #20]
 8000b16:	4b25      	ldr	r3, [pc, #148]	; (8000bac <MX_GPIO_Init+0xb8>)
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	4b22      	ldr	r3, [pc, #136]	; (8000bac <MX_GPIO_Init+0xb8>)
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	4a21      	ldr	r2, [pc, #132]	; (8000bac <MX_GPIO_Init+0xb8>)
 8000b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b2c:	6153      	str	r3, [r2, #20]
 8000b2e:	4b1f      	ldr	r3, [pc, #124]	; (8000bac <MX_GPIO_Init+0xb8>)
 8000b30:	695b      	ldr	r3, [r3, #20]
 8000b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3a:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <MX_GPIO_Init+0xb8>)
 8000b3c:	695b      	ldr	r3, [r3, #20]
 8000b3e:	4a1b      	ldr	r2, [pc, #108]	; (8000bac <MX_GPIO_Init+0xb8>)
 8000b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b44:	6153      	str	r3, [r2, #20]
 8000b46:	4b19      	ldr	r3, [pc, #100]	; (8000bac <MX_GPIO_Init+0xb8>)
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 8000b52:	2201      	movs	r2, #1
 8000b54:	210c      	movs	r1, #12
 8000b56:	4816      	ldr	r0, [pc, #88]	; (8000bb0 <MX_GPIO_Init+0xbc>)
 8000b58:	f000 fcfc 	bl	8001554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000b62:	4814      	ldr	r0, [pc, #80]	; (8000bb4 <MX_GPIO_Init+0xc0>)
 8000b64:	f000 fcf6 	bl	8001554 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b68:	230c      	movs	r3, #12
 8000b6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b78:	f107 030c 	add.w	r3, r7, #12
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <MX_GPIO_Init+0xbc>)
 8000b80:	f000 fb5e 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000b84:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000b88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b96:	f107 030c 	add.w	r3, r7, #12
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <MX_GPIO_Init+0xc0>)
 8000b9e:	f000 fb4f 	bl	8001240 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ba2:	bf00      	nop
 8000ba4:	3720      	adds	r7, #32
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	48000800 	.word	0x48000800
 8000bb4:	48000400 	.word	0x48000400

08000bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bbc:	b672      	cpsid	i
}
 8000bbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <Error_Handler+0x8>
	...

08000bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bca:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <HAL_MspInit+0x44>)
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	4a0e      	ldr	r2, [pc, #56]	; (8000c08 <HAL_MspInit+0x44>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6193      	str	r3, [r2, #24]
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <HAL_MspInit+0x44>)
 8000bd8:	699b      	ldr	r3, [r3, #24]
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <HAL_MspInit+0x44>)
 8000be4:	69db      	ldr	r3, [r3, #28]
 8000be6:	4a08      	ldr	r2, [pc, #32]	; (8000c08 <HAL_MspInit+0x44>)
 8000be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bec:	61d3      	str	r3, [r2, #28]
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_MspInit+0x44>)
 8000bf0:	69db      	ldr	r3, [r3, #28]
 8000bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	40021000 	.word	0x40021000

08000c0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08c      	sub	sp, #48	; 0x30
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a36      	ldr	r2, [pc, #216]	; (8000d04 <HAL_UART_MspInit+0xf8>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d130      	bne.n	8000c90 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c2e:	4b36      	ldr	r3, [pc, #216]	; (8000d08 <HAL_UART_MspInit+0xfc>)
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	4a35      	ldr	r2, [pc, #212]	; (8000d08 <HAL_UART_MspInit+0xfc>)
 8000c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c38:	6193      	str	r3, [r2, #24]
 8000c3a:	4b33      	ldr	r3, [pc, #204]	; (8000d08 <HAL_UART_MspInit+0xfc>)
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c42:	61bb      	str	r3, [r7, #24]
 8000c44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c46:	4b30      	ldr	r3, [pc, #192]	; (8000d08 <HAL_UART_MspInit+0xfc>)
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	4a2f      	ldr	r2, [pc, #188]	; (8000d08 <HAL_UART_MspInit+0xfc>)
 8000c4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c50:	6153      	str	r3, [r2, #20]
 8000c52:	4b2d      	ldr	r3, [pc, #180]	; (8000d08 <HAL_UART_MspInit+0xfc>)
 8000c54:	695b      	ldr	r3, [r3, #20]
 8000c56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c5e:	2330      	movs	r3, #48	; 0x30
 8000c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c6e:	2307      	movs	r3, #7
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	4619      	mov	r1, r3
 8000c78:	4824      	ldr	r0, [pc, #144]	; (8000d0c <HAL_UART_MspInit+0x100>)
 8000c7a:	f000 fae1 	bl	8001240 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2100      	movs	r1, #0
 8000c82:	2025      	movs	r0, #37	; 0x25
 8000c84:	f000 fa2f 	bl	80010e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c88:	2025      	movs	r0, #37	; 0x25
 8000c8a:	f000 fa48 	bl	800111e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c8e:	e035      	b.n	8000cfc <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a1e      	ldr	r2, [pc, #120]	; (8000d10 <HAL_UART_MspInit+0x104>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d130      	bne.n	8000cfc <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c9a:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <HAL_UART_MspInit+0xfc>)
 8000c9c:	69db      	ldr	r3, [r3, #28]
 8000c9e:	4a1a      	ldr	r2, [pc, #104]	; (8000d08 <HAL_UART_MspInit+0xfc>)
 8000ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca4:	61d3      	str	r3, [r2, #28]
 8000ca6:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <HAL_UART_MspInit+0xfc>)
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <HAL_UART_MspInit+0xfc>)
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <HAL_UART_MspInit+0xfc>)
 8000cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cbc:	6153      	str	r3, [r2, #20]
 8000cbe:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <HAL_UART_MspInit+0xfc>)
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cca:	230c      	movs	r3, #12
 8000ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cda:	2307      	movs	r3, #7
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce8:	f000 faaa 	bl	8001240 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2100      	movs	r1, #0
 8000cf0:	2026      	movs	r0, #38	; 0x26
 8000cf2:	f000 f9f8 	bl	80010e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cf6:	2026      	movs	r0, #38	; 0x26
 8000cf8:	f000 fa11 	bl	800111e <HAL_NVIC_EnableIRQ>
}
 8000cfc:	bf00      	nop
 8000cfe:	3730      	adds	r7, #48	; 0x30
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40013800 	.word	0x40013800
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	48000800 	.word	0x48000800
 8000d10:	40004400 	.word	0x40004400

08000d14 <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <HAL_WWDG_MspInit+0x38>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d10b      	bne.n	8000d3e <HAL_WWDG_MspInit+0x2a>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 8000d26:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <HAL_WWDG_MspInit+0x3c>)
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	4a09      	ldr	r2, [pc, #36]	; (8000d50 <HAL_WWDG_MspInit+0x3c>)
 8000d2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d30:	61d3      	str	r3, [r2, #28]
 8000d32:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <HAL_WWDG_MspInit+0x3c>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 8000d3e:	bf00      	nop
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	40002c00 	.word	0x40002c00
 8000d50:	40021000 	.word	0x40021000

08000d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d58:	e7fe      	b.n	8000d58 <NMI_Handler+0x4>

08000d5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <HardFault_Handler+0x4>

08000d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <MemManage_Handler+0x4>

08000d66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <BusFault_Handler+0x4>

08000d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <UsageFault_Handler+0x4>

08000d72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da0:	f000 f8a6 	bl	8000ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000dc8:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <USART1_IRQHandler+0x10>)
 8000dca:	f002 f95b 	bl	8003084 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	200000cc 	.word	0x200000cc

08000dd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ddc:	4802      	ldr	r0, [pc, #8]	; (8000de8 <USART2_IRQHandler+0x10>)
 8000dde:	f002 f951 	bl	8003084 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000154 	.word	0x20000154

08000dec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <SystemInit+0x20>)
 8000df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000df6:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <SystemInit+0x20>)
 8000df8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e48 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e14:	f7ff ffea 	bl	8000dec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e18:	480c      	ldr	r0, [pc, #48]	; (8000e4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e1a:	490d      	ldr	r1, [pc, #52]	; (8000e50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	; (8000e54 <LoopForever+0xe>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e20:	e002      	b.n	8000e28 <LoopCopyDataInit>

08000e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e26:	3304      	adds	r3, #4

08000e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e2c:	d3f9      	bcc.n	8000e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e30:	4c0a      	ldr	r4, [pc, #40]	; (8000e5c <LoopForever+0x16>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e34:	e001      	b.n	8000e3a <LoopFillZerobss>

08000e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e38:	3204      	adds	r2, #4

08000e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e3c:	d3fb      	bcc.n	8000e36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e3e:	f003 fc29 	bl	8004694 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e42:	f7ff fbe1 	bl	8000608 <main>

08000e46 <LoopForever>:

LoopForever:
    b LoopForever
 8000e46:	e7fe      	b.n	8000e46 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e48:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e50:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8000e54:	08004734 	.word	0x08004734
  ldr r2, =_sbss
 8000e58:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8000e5c:	20000220 	.word	0x20000220

08000e60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e60:	e7fe      	b.n	8000e60 <ADC1_2_IRQHandler>
	...

08000e64 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <HAL_Init+0x28>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a07      	ldr	r2, [pc, #28]	; (8000e8c <HAL_Init+0x28>)
 8000e6e:	f043 0310 	orr.w	r3, r3, #16
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e74:	2003      	movs	r0, #3
 8000e76:	f000 f92b 	bl	80010d0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e7a:	200f      	movs	r0, #15
 8000e7c:	f000 f808 	bl	8000e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e80:	f7ff fea0 	bl	8000bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40022000 	.word	0x40022000

08000e90 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_InitTick+0x54>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_InitTick+0x58>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 f943 	bl	800113a <HAL_SYSTICK_Config>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00e      	b.n	8000edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b0f      	cmp	r3, #15
 8000ec2:	d80a      	bhi.n	8000eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f000 f90b 	bl	80010e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed0:	4a06      	ldr	r2, [pc, #24]	; (8000eec <HAL_InitTick+0x5c>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	e000      	b.n	8000edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	200000a0 	.word	0x200000a0
 8000ee8:	200000a8 	.word	0x200000a8
 8000eec:	200000a4 	.word	0x200000a4

08000ef0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_IncTick+0x20>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_IncTick+0x24>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <HAL_IncTick+0x24>)
 8000f02:	6013      	str	r3, [r2, #0]
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	200000a8 	.word	0x200000a8
 8000f14:	2000021c 	.word	0x2000021c

08000f18 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <HAL_GetTick+0x14>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	2000021c 	.word	0x2000021c

08000f30 <__NVIC_SetPriorityGrouping>:
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f62:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	60d3      	str	r3, [r2, #12]
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_GetPriorityGrouping>:
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <__NVIC_GetPriorityGrouping+0x18>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	0a1b      	lsrs	r3, r3, #8
 8000f82:	f003 0307 	and.w	r3, r3, #7
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_EnableIRQ>:
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	db0b      	blt.n	8000fbe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	f003 021f 	and.w	r2, r3, #31
 8000fac:	4907      	ldr	r1, [pc, #28]	; (8000fcc <__NVIC_EnableIRQ+0x38>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	095b      	lsrs	r3, r3, #5
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000e100 	.word	0xe000e100

08000fd0 <__NVIC_SetPriority>:
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	db0a      	blt.n	8000ffa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	490c      	ldr	r1, [pc, #48]	; (800101c <__NVIC_SetPriority+0x4c>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	0112      	lsls	r2, r2, #4
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ff8:	e00a      	b.n	8001010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4908      	ldr	r1, [pc, #32]	; (8001020 <__NVIC_SetPriority+0x50>)
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	f003 030f 	and.w	r3, r3, #15
 8001006:	3b04      	subs	r3, #4
 8001008:	0112      	lsls	r2, r2, #4
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	440b      	add	r3, r1
 800100e:	761a      	strb	r2, [r3, #24]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000e100 	.word	0xe000e100
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <NVIC_EncodePriority>:
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	; 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f1c3 0307 	rsb	r3, r3, #7
 800103e:	2b04      	cmp	r3, #4
 8001040:	bf28      	it	cs
 8001042:	2304      	movcs	r3, #4
 8001044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3304      	adds	r3, #4
 800104a:	2b06      	cmp	r3, #6
 800104c:	d902      	bls.n	8001054 <NVIC_EncodePriority+0x30>
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3b03      	subs	r3, #3
 8001052:	e000      	b.n	8001056 <NVIC_EncodePriority+0x32>
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	f04f 32ff 	mov.w	r2, #4294967295
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43da      	mvns	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	401a      	ands	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800106c:	f04f 31ff 	mov.w	r1, #4294967295
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	43d9      	mvns	r1, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	4313      	orrs	r3, r2
}
 800107e:	4618      	mov	r0, r3
 8001080:	3724      	adds	r7, #36	; 0x24
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800109c:	d301      	bcc.n	80010a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109e:	2301      	movs	r3, #1
 80010a0:	e00f      	b.n	80010c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a2:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <SysTick_Config+0x40>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010aa:	210f      	movs	r1, #15
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295
 80010b0:	f7ff ff8e 	bl	8000fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <SysTick_Config+0x40>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ba:	4b04      	ldr	r3, [pc, #16]	; (80010cc <SysTick_Config+0x40>)
 80010bc:	2207      	movs	r2, #7
 80010be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	e000e010 	.word	0xe000e010

080010d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff ff29 	bl	8000f30 <__NVIC_SetPriorityGrouping>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b086      	sub	sp, #24
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
 80010f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f8:	f7ff ff3e 	bl	8000f78 <__NVIC_GetPriorityGrouping>
 80010fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	68b9      	ldr	r1, [r7, #8]
 8001102:	6978      	ldr	r0, [r7, #20]
 8001104:	f7ff ff8e 	bl	8001024 <NVIC_EncodePriority>
 8001108:	4602      	mov	r2, r0
 800110a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110e:	4611      	mov	r1, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff5d 	bl	8000fd0 <__NVIC_SetPriority>
}
 8001116:	bf00      	nop
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff31 	bl	8000f94 <__NVIC_EnableIRQ>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff ffa2 	bl	800108c <SysTick_Config>
 8001148:	4603      	mov	r3, r0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001160:	2b02      	cmp	r3, #2
 8001162:	d008      	beq.n	8001176 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2204      	movs	r2, #4
 8001168:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e020      	b.n	80011b8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f022 020e 	bic.w	r2, r2, #14
 8001184:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f022 0201 	bic.w	r2, r2, #1
 8001194:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800119e:	2101      	movs	r1, #1
 80011a0:	fa01 f202 	lsl.w	r2, r1, r2
 80011a4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2201      	movs	r2, #1
 80011aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011cc:	2300      	movs	r3, #0
 80011ce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d005      	beq.n	80011e6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2204      	movs	r2, #4
 80011de:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	73fb      	strb	r3, [r7, #15]
 80011e4:	e027      	b.n	8001236 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f022 020e 	bic.w	r2, r2, #14
 80011f4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f022 0201 	bic.w	r2, r2, #1
 8001204:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800120e:	2101      	movs	r1, #1
 8001210:	fa01 f202 	lsl.w	r2, r1, r2
 8001214:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2201      	movs	r2, #1
 800121a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	4798      	blx	r3
    } 
  }
  return status;
 8001236:	7bfb      	ldrb	r3, [r7, #15]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001240:	b480      	push	{r7}
 8001242:	b087      	sub	sp, #28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800124e:	e160      	b.n	8001512 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	2101      	movs	r1, #1
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	fa01 f303 	lsl.w	r3, r1, r3
 800125c:	4013      	ands	r3, r2
 800125e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2b00      	cmp	r3, #0
 8001264:	f000 8152 	beq.w	800150c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	2b01      	cmp	r3, #1
 8001272:	d005      	beq.n	8001280 <HAL_GPIO_Init+0x40>
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d130      	bne.n	80012e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	2203      	movs	r2, #3
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4013      	ands	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	68da      	ldr	r2, [r3, #12]
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012b6:	2201      	movs	r2, #1
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	091b      	lsrs	r3, r3, #4
 80012cc:	f003 0201 	and.w	r2, r3, #1
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 0303 	and.w	r3, r3, #3
 80012ea:	2b03      	cmp	r3, #3
 80012ec:	d017      	beq.n	800131e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	2203      	movs	r2, #3
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d123      	bne.n	8001372 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	08da      	lsrs	r2, r3, #3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3208      	adds	r2, #8
 8001332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001336:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	220f      	movs	r2, #15
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4013      	ands	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	691a      	ldr	r2, [r3, #16]
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	f003 0307 	and.w	r3, r3, #7
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	08da      	lsrs	r2, r3, #3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3208      	adds	r2, #8
 800136c:	6939      	ldr	r1, [r7, #16]
 800136e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	2203      	movs	r2, #3
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4013      	ands	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 0203 	and.w	r2, r3, #3
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 80ac 	beq.w	800150c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b4:	4b5e      	ldr	r3, [pc, #376]	; (8001530 <HAL_GPIO_Init+0x2f0>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	4a5d      	ldr	r2, [pc, #372]	; (8001530 <HAL_GPIO_Init+0x2f0>)
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	6193      	str	r3, [r2, #24]
 80013c0:	4b5b      	ldr	r3, [pc, #364]	; (8001530 <HAL_GPIO_Init+0x2f0>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013cc:	4a59      	ldr	r2, [pc, #356]	; (8001534 <HAL_GPIO_Init+0x2f4>)
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	089b      	lsrs	r3, r3, #2
 80013d2:	3302      	adds	r3, #2
 80013d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	220f      	movs	r2, #15
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4013      	ands	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013f6:	d025      	beq.n	8001444 <HAL_GPIO_Init+0x204>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a4f      	ldr	r2, [pc, #316]	; (8001538 <HAL_GPIO_Init+0x2f8>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d01f      	beq.n	8001440 <HAL_GPIO_Init+0x200>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a4e      	ldr	r2, [pc, #312]	; (800153c <HAL_GPIO_Init+0x2fc>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d019      	beq.n	800143c <HAL_GPIO_Init+0x1fc>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a4d      	ldr	r2, [pc, #308]	; (8001540 <HAL_GPIO_Init+0x300>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d013      	beq.n	8001438 <HAL_GPIO_Init+0x1f8>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a4c      	ldr	r2, [pc, #304]	; (8001544 <HAL_GPIO_Init+0x304>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d00d      	beq.n	8001434 <HAL_GPIO_Init+0x1f4>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a4b      	ldr	r2, [pc, #300]	; (8001548 <HAL_GPIO_Init+0x308>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d007      	beq.n	8001430 <HAL_GPIO_Init+0x1f0>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a4a      	ldr	r2, [pc, #296]	; (800154c <HAL_GPIO_Init+0x30c>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d101      	bne.n	800142c <HAL_GPIO_Init+0x1ec>
 8001428:	2306      	movs	r3, #6
 800142a:	e00c      	b.n	8001446 <HAL_GPIO_Init+0x206>
 800142c:	2307      	movs	r3, #7
 800142e:	e00a      	b.n	8001446 <HAL_GPIO_Init+0x206>
 8001430:	2305      	movs	r3, #5
 8001432:	e008      	b.n	8001446 <HAL_GPIO_Init+0x206>
 8001434:	2304      	movs	r3, #4
 8001436:	e006      	b.n	8001446 <HAL_GPIO_Init+0x206>
 8001438:	2303      	movs	r3, #3
 800143a:	e004      	b.n	8001446 <HAL_GPIO_Init+0x206>
 800143c:	2302      	movs	r3, #2
 800143e:	e002      	b.n	8001446 <HAL_GPIO_Init+0x206>
 8001440:	2301      	movs	r3, #1
 8001442:	e000      	b.n	8001446 <HAL_GPIO_Init+0x206>
 8001444:	2300      	movs	r3, #0
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	f002 0203 	and.w	r2, r2, #3
 800144c:	0092      	lsls	r2, r2, #2
 800144e:	4093      	lsls	r3, r2
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4313      	orrs	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001456:	4937      	ldr	r1, [pc, #220]	; (8001534 <HAL_GPIO_Init+0x2f4>)
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	089b      	lsrs	r3, r3, #2
 800145c:	3302      	adds	r3, #2
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001464:	4b3a      	ldr	r3, [pc, #232]	; (8001550 <HAL_GPIO_Init+0x310>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	43db      	mvns	r3, r3
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001488:	4a31      	ldr	r2, [pc, #196]	; (8001550 <HAL_GPIO_Init+0x310>)
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800148e:	4b30      	ldr	r3, [pc, #192]	; (8001550 <HAL_GPIO_Init+0x310>)
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	43db      	mvns	r3, r3
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	4013      	ands	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014b2:	4a27      	ldr	r2, [pc, #156]	; (8001550 <HAL_GPIO_Init+0x310>)
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014b8:	4b25      	ldr	r3, [pc, #148]	; (8001550 <HAL_GPIO_Init+0x310>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4313      	orrs	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014dc:	4a1c      	ldr	r2, [pc, #112]	; (8001550 <HAL_GPIO_Init+0x310>)
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014e2:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <HAL_GPIO_Init+0x310>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4313      	orrs	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001506:	4a12      	ldr	r2, [pc, #72]	; (8001550 <HAL_GPIO_Init+0x310>)
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	3301      	adds	r3, #1
 8001510:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	fa22 f303 	lsr.w	r3, r2, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	f47f ae97 	bne.w	8001250 <HAL_GPIO_Init+0x10>
  }
}
 8001522:	bf00      	nop
 8001524:	bf00      	nop
 8001526:	371c      	adds	r7, #28
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	40021000 	.word	0x40021000
 8001534:	40010000 	.word	0x40010000
 8001538:	48000400 	.word	0x48000400
 800153c:	48000800 	.word	0x48000800
 8001540:	48000c00 	.word	0x48000c00
 8001544:	48001000 	.word	0x48001000
 8001548:	48001400 	.word	0x48001400
 800154c:	48001800 	.word	0x48001800
 8001550:	40010400 	.word	0x40010400

08001554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	807b      	strh	r3, [r7, #2]
 8001560:	4613      	mov	r3, r2
 8001562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001564:	787b      	ldrb	r3, [r7, #1]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800156a:	887a      	ldrh	r2, [r7, #2]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001570:	e002      	b.n	8001578 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001572:	887a      	ldrh	r2, [r7, #2]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800158a:	af00      	add	r7, sp, #0
 800158c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001590:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001594:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001596:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800159a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d102      	bne.n	80015aa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	f001 b83a 	b.w	800261e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 816f 	beq.w	800189e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80015c0:	4bb5      	ldr	r3, [pc, #724]	; (8001898 <HAL_RCC_OscConfig+0x314>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 030c 	and.w	r3, r3, #12
 80015c8:	2b04      	cmp	r3, #4
 80015ca:	d00c      	beq.n	80015e6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015cc:	4bb2      	ldr	r3, [pc, #712]	; (8001898 <HAL_RCC_OscConfig+0x314>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 030c 	and.w	r3, r3, #12
 80015d4:	2b08      	cmp	r3, #8
 80015d6:	d15c      	bne.n	8001692 <HAL_RCC_OscConfig+0x10e>
 80015d8:	4baf      	ldr	r3, [pc, #700]	; (8001898 <HAL_RCC_OscConfig+0x314>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80015e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e4:	d155      	bne.n	8001692 <HAL_RCC_OscConfig+0x10e>
 80015e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015ea:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80015f2:	fa93 f3a3 	rbit	r3, r3
 80015f6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015fa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015fe:	fab3 f383 	clz	r3, r3
 8001602:	b2db      	uxtb	r3, r3
 8001604:	095b      	lsrs	r3, r3, #5
 8001606:	b2db      	uxtb	r3, r3
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b01      	cmp	r3, #1
 8001610:	d102      	bne.n	8001618 <HAL_RCC_OscConfig+0x94>
 8001612:	4ba1      	ldr	r3, [pc, #644]	; (8001898 <HAL_RCC_OscConfig+0x314>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	e015      	b.n	8001644 <HAL_RCC_OscConfig+0xc0>
 8001618:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800161c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001620:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001624:	fa93 f3a3 	rbit	r3, r3
 8001628:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800162c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001630:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001634:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001638:	fa93 f3a3 	rbit	r3, r3
 800163c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001640:	4b95      	ldr	r3, [pc, #596]	; (8001898 <HAL_RCC_OscConfig+0x314>)
 8001642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001644:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001648:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800164c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001650:	fa92 f2a2 	rbit	r2, r2
 8001654:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001658:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800165c:	fab2 f282 	clz	r2, r2
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	f042 0220 	orr.w	r2, r2, #32
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	f002 021f 	and.w	r2, r2, #31
 800166c:	2101      	movs	r1, #1
 800166e:	fa01 f202 	lsl.w	r2, r1, r2
 8001672:	4013      	ands	r3, r2
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 8111 	beq.w	800189c <HAL_RCC_OscConfig+0x318>
 800167a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800167e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	f040 8108 	bne.w	800189c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	f000 bfc6 	b.w	800261e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001692:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001696:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a2:	d106      	bne.n	80016b2 <HAL_RCC_OscConfig+0x12e>
 80016a4:	4b7c      	ldr	r3, [pc, #496]	; (8001898 <HAL_RCC_OscConfig+0x314>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a7b      	ldr	r2, [pc, #492]	; (8001898 <HAL_RCC_OscConfig+0x314>)
 80016aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	e036      	b.n	8001720 <HAL_RCC_OscConfig+0x19c>
 80016b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d10c      	bne.n	80016dc <HAL_RCC_OscConfig+0x158>
 80016c2:	4b75      	ldr	r3, [pc, #468]	; (8001898 <HAL_RCC_OscConfig+0x314>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a74      	ldr	r2, [pc, #464]	; (8001898 <HAL_RCC_OscConfig+0x314>)
 80016c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	4b72      	ldr	r3, [pc, #456]	; (8001898 <HAL_RCC_OscConfig+0x314>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a71      	ldr	r2, [pc, #452]	; (8001898 <HAL_RCC_OscConfig+0x314>)
 80016d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	e021      	b.n	8001720 <HAL_RCC_OscConfig+0x19c>
 80016dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016ec:	d10c      	bne.n	8001708 <HAL_RCC_OscConfig+0x184>
 80016ee:	4b6a      	ldr	r3, [pc, #424]	; (8001898 <HAL_RCC_OscConfig+0x314>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a69      	ldr	r2, [pc, #420]	; (8001898 <HAL_RCC_OscConfig+0x314>)
 80016f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	4b67      	ldr	r3, [pc, #412]	; (8001898 <HAL_RCC_OscConfig+0x314>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a66      	ldr	r2, [pc, #408]	; (8001898 <HAL_RCC_OscConfig+0x314>)
 8001700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	e00b      	b.n	8001720 <HAL_RCC_OscConfig+0x19c>
 8001708:	4b63      	ldr	r3, [pc, #396]	; (8001898 <HAL_RCC_OscConfig+0x314>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a62      	ldr	r2, [pc, #392]	; (8001898 <HAL_RCC_OscConfig+0x314>)
 800170e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	4b60      	ldr	r3, [pc, #384]	; (8001898 <HAL_RCC_OscConfig+0x314>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a5f      	ldr	r2, [pc, #380]	; (8001898 <HAL_RCC_OscConfig+0x314>)
 800171a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800171e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001720:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001724:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d059      	beq.n	80017e4 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001730:	f7ff fbf2 	bl	8000f18 <HAL_GetTick>
 8001734:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001738:	e00a      	b.n	8001750 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800173a:	f7ff fbed 	bl	8000f18 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b64      	cmp	r3, #100	; 0x64
 8001748:	d902      	bls.n	8001750 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	f000 bf67 	b.w	800261e <HAL_RCC_OscConfig+0x109a>
 8001750:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001754:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001758:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800175c:	fa93 f3a3 	rbit	r3, r3
 8001760:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001764:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001768:	fab3 f383 	clz	r3, r3
 800176c:	b2db      	uxtb	r3, r3
 800176e:	095b      	lsrs	r3, r3, #5
 8001770:	b2db      	uxtb	r3, r3
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b01      	cmp	r3, #1
 800177a:	d102      	bne.n	8001782 <HAL_RCC_OscConfig+0x1fe>
 800177c:	4b46      	ldr	r3, [pc, #280]	; (8001898 <HAL_RCC_OscConfig+0x314>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	e015      	b.n	80017ae <HAL_RCC_OscConfig+0x22a>
 8001782:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001786:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800178e:	fa93 f3a3 	rbit	r3, r3
 8001792:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001796:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800179a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800179e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80017a2:	fa93 f3a3 	rbit	r3, r3
 80017a6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80017aa:	4b3b      	ldr	r3, [pc, #236]	; (8001898 <HAL_RCC_OscConfig+0x314>)
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017b2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80017b6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80017ba:	fa92 f2a2 	rbit	r2, r2
 80017be:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80017c2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80017c6:	fab2 f282 	clz	r2, r2
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	f042 0220 	orr.w	r2, r2, #32
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	f002 021f 	and.w	r2, r2, #31
 80017d6:	2101      	movs	r1, #1
 80017d8:	fa01 f202 	lsl.w	r2, r1, r2
 80017dc:	4013      	ands	r3, r2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0ab      	beq.n	800173a <HAL_RCC_OscConfig+0x1b6>
 80017e2:	e05c      	b.n	800189e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7ff fb98 	bl	8000f18 <HAL_GetTick>
 80017e8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ec:	e00a      	b.n	8001804 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017ee:	f7ff fb93 	bl	8000f18 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b64      	cmp	r3, #100	; 0x64
 80017fc:	d902      	bls.n	8001804 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	f000 bf0d 	b.w	800261e <HAL_RCC_OscConfig+0x109a>
 8001804:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001808:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001810:	fa93 f3a3 	rbit	r3, r3
 8001814:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001818:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181c:	fab3 f383 	clz	r3, r3
 8001820:	b2db      	uxtb	r3, r3
 8001822:	095b      	lsrs	r3, r3, #5
 8001824:	b2db      	uxtb	r3, r3
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b01      	cmp	r3, #1
 800182e:	d102      	bne.n	8001836 <HAL_RCC_OscConfig+0x2b2>
 8001830:	4b19      	ldr	r3, [pc, #100]	; (8001898 <HAL_RCC_OscConfig+0x314>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	e015      	b.n	8001862 <HAL_RCC_OscConfig+0x2de>
 8001836:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800183a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001842:	fa93 f3a3 	rbit	r3, r3
 8001846:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800184a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800184e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001852:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001856:	fa93 f3a3 	rbit	r3, r3
 800185a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800185e:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <HAL_RCC_OscConfig+0x314>)
 8001860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001862:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001866:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800186a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800186e:	fa92 f2a2 	rbit	r2, r2
 8001872:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001876:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800187a:	fab2 f282 	clz	r2, r2
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	f042 0220 	orr.w	r2, r2, #32
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	f002 021f 	and.w	r2, r2, #31
 800188a:	2101      	movs	r1, #1
 800188c:	fa01 f202 	lsl.w	r2, r1, r2
 8001890:	4013      	ands	r3, r2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1ab      	bne.n	80017ee <HAL_RCC_OscConfig+0x26a>
 8001896:	e002      	b.n	800189e <HAL_RCC_OscConfig+0x31a>
 8001898:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800189e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 817f 	beq.w	8001bb2 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80018b4:	4ba7      	ldr	r3, [pc, #668]	; (8001b54 <HAL_RCC_OscConfig+0x5d0>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 030c 	and.w	r3, r3, #12
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d00c      	beq.n	80018da <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80018c0:	4ba4      	ldr	r3, [pc, #656]	; (8001b54 <HAL_RCC_OscConfig+0x5d0>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 030c 	and.w	r3, r3, #12
 80018c8:	2b08      	cmp	r3, #8
 80018ca:	d173      	bne.n	80019b4 <HAL_RCC_OscConfig+0x430>
 80018cc:	4ba1      	ldr	r3, [pc, #644]	; (8001b54 <HAL_RCC_OscConfig+0x5d0>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80018d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018d8:	d16c      	bne.n	80019b4 <HAL_RCC_OscConfig+0x430>
 80018da:	2302      	movs	r3, #2
 80018dc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80018e4:	fa93 f3a3 	rbit	r3, r3
 80018e8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80018ec:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018f0:	fab3 f383 	clz	r3, r3
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	095b      	lsrs	r3, r3, #5
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b01      	cmp	r3, #1
 8001902:	d102      	bne.n	800190a <HAL_RCC_OscConfig+0x386>
 8001904:	4b93      	ldr	r3, [pc, #588]	; (8001b54 <HAL_RCC_OscConfig+0x5d0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	e013      	b.n	8001932 <HAL_RCC_OscConfig+0x3ae>
 800190a:	2302      	movs	r3, #2
 800190c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001910:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001914:	fa93 f3a3 	rbit	r3, r3
 8001918:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800191c:	2302      	movs	r3, #2
 800191e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001922:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001926:	fa93 f3a3 	rbit	r3, r3
 800192a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800192e:	4b89      	ldr	r3, [pc, #548]	; (8001b54 <HAL_RCC_OscConfig+0x5d0>)
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	2202      	movs	r2, #2
 8001934:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001938:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800193c:	fa92 f2a2 	rbit	r2, r2
 8001940:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001944:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001948:	fab2 f282 	clz	r2, r2
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	f042 0220 	orr.w	r2, r2, #32
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	f002 021f 	and.w	r2, r2, #31
 8001958:	2101      	movs	r1, #1
 800195a:	fa01 f202 	lsl.w	r2, r1, r2
 800195e:	4013      	ands	r3, r2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d00a      	beq.n	800197a <HAL_RCC_OscConfig+0x3f6>
 8001964:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001968:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d002      	beq.n	800197a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	f000 be52 	b.w	800261e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197a:	4b76      	ldr	r3, [pc, #472]	; (8001b54 <HAL_RCC_OscConfig+0x5d0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001982:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001986:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	21f8      	movs	r1, #248	; 0xf8
 8001990:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001994:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001998:	fa91 f1a1 	rbit	r1, r1
 800199c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80019a0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80019a4:	fab1 f181 	clz	r1, r1
 80019a8:	b2c9      	uxtb	r1, r1
 80019aa:	408b      	lsls	r3, r1
 80019ac:	4969      	ldr	r1, [pc, #420]	; (8001b54 <HAL_RCC_OscConfig+0x5d0>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b2:	e0fe      	b.n	8001bb2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 8088 	beq.w	8001ad6 <HAL_RCC_OscConfig+0x552>
 80019c6:	2301      	movs	r3, #1
 80019c8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019cc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80019d0:	fa93 f3a3 	rbit	r3, r3
 80019d4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80019d8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019dc:	fab3 f383 	clz	r3, r3
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	461a      	mov	r2, r3
 80019ee:	2301      	movs	r3, #1
 80019f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f2:	f7ff fa91 	bl	8000f18 <HAL_GetTick>
 80019f6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fa:	e00a      	b.n	8001a12 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019fc:	f7ff fa8c 	bl	8000f18 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d902      	bls.n	8001a12 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	f000 be06 	b.w	800261e <HAL_RCC_OscConfig+0x109a>
 8001a12:	2302      	movs	r3, #2
 8001a14:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a18:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001a1c:	fa93 f3a3 	rbit	r3, r3
 8001a20:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001a24:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a28:	fab3 f383 	clz	r3, r3
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	095b      	lsrs	r3, r3, #5
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d102      	bne.n	8001a42 <HAL_RCC_OscConfig+0x4be>
 8001a3c:	4b45      	ldr	r3, [pc, #276]	; (8001b54 <HAL_RCC_OscConfig+0x5d0>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	e013      	b.n	8001a6a <HAL_RCC_OscConfig+0x4e6>
 8001a42:	2302      	movs	r3, #2
 8001a44:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a48:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001a4c:	fa93 f3a3 	rbit	r3, r3
 8001a50:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001a54:	2302      	movs	r3, #2
 8001a56:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001a5a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001a5e:	fa93 f3a3 	rbit	r3, r3
 8001a62:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001a66:	4b3b      	ldr	r3, [pc, #236]	; (8001b54 <HAL_RCC_OscConfig+0x5d0>)
 8001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001a70:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001a74:	fa92 f2a2 	rbit	r2, r2
 8001a78:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001a7c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001a80:	fab2 f282 	clz	r2, r2
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	f042 0220 	orr.w	r2, r2, #32
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	f002 021f 	and.w	r2, r2, #31
 8001a90:	2101      	movs	r1, #1
 8001a92:	fa01 f202 	lsl.w	r2, r1, r2
 8001a96:	4013      	ands	r3, r2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0af      	beq.n	80019fc <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9c:	4b2d      	ldr	r3, [pc, #180]	; (8001b54 <HAL_RCC_OscConfig+0x5d0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	21f8      	movs	r1, #248	; 0xf8
 8001ab2:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab6:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001aba:	fa91 f1a1 	rbit	r1, r1
 8001abe:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001ac2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001ac6:	fab1 f181 	clz	r1, r1
 8001aca:	b2c9      	uxtb	r1, r1
 8001acc:	408b      	lsls	r3, r1
 8001ace:	4921      	ldr	r1, [pc, #132]	; (8001b54 <HAL_RCC_OscConfig+0x5d0>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	600b      	str	r3, [r1, #0]
 8001ad4:	e06d      	b.n	8001bb2 <HAL_RCC_OscConfig+0x62e>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001adc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001ae0:	fa93 f3a3 	rbit	r3, r3
 8001ae4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001ae8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aec:	fab3 f383 	clz	r3, r3
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001af6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	461a      	mov	r2, r3
 8001afe:	2300      	movs	r3, #0
 8001b00:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b02:	f7ff fa09 	bl	8000f18 <HAL_GetTick>
 8001b06:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b0a:	e00a      	b.n	8001b22 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b0c:	f7ff fa04 	bl	8000f18 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d902      	bls.n	8001b22 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	f000 bd7e 	b.w	800261e <HAL_RCC_OscConfig+0x109a>
 8001b22:	2302      	movs	r3, #2
 8001b24:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b28:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001b2c:	fa93 f3a3 	rbit	r3, r3
 8001b30:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001b34:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b38:	fab3 f383 	clz	r3, r3
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	095b      	lsrs	r3, r3, #5
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d105      	bne.n	8001b58 <HAL_RCC_OscConfig+0x5d4>
 8001b4c:	4b01      	ldr	r3, [pc, #4]	; (8001b54 <HAL_RCC_OscConfig+0x5d0>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	e016      	b.n	8001b80 <HAL_RCC_OscConfig+0x5fc>
 8001b52:	bf00      	nop
 8001b54:	40021000 	.word	0x40021000
 8001b58:	2302      	movs	r3, #2
 8001b5a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001b62:	fa93 f3a3 	rbit	r3, r3
 8001b66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001b70:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001b74:	fa93 f3a3 	rbit	r3, r3
 8001b78:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001b7c:	4bbf      	ldr	r3, [pc, #764]	; (8001e7c <HAL_RCC_OscConfig+0x8f8>)
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	2202      	movs	r2, #2
 8001b82:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001b86:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001b8a:	fa92 f2a2 	rbit	r2, r2
 8001b8e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001b92:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001b96:	fab2 f282 	clz	r2, r2
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	f042 0220 	orr.w	r2, r2, #32
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	f002 021f 	and.w	r2, r2, #31
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bac:	4013      	ands	r3, r2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1ac      	bne.n	8001b0c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 8113 	beq.w	8001dee <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bcc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d07c      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x74e>
 8001bd8:	2301      	movs	r3, #1
 8001bda:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001be2:	fa93 f3a3 	rbit	r3, r3
 8001be6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001bea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bee:	fab3 f383 	clz	r3, r3
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4ba2      	ldr	r3, [pc, #648]	; (8001e80 <HAL_RCC_OscConfig+0x8fc>)
 8001bf8:	4413      	add	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	2301      	movs	r3, #1
 8001c00:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c02:	f7ff f989 	bl	8000f18 <HAL_GetTick>
 8001c06:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0a:	e00a      	b.n	8001c22 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c0c:	f7ff f984 	bl	8000f18 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d902      	bls.n	8001c22 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	f000 bcfe 	b.w	800261e <HAL_RCC_OscConfig+0x109a>
 8001c22:	2302      	movs	r3, #2
 8001c24:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001c2c:	fa93 f2a3 	rbit	r2, r3
 8001c30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c34:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c42:	2202      	movs	r2, #2
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	fa93 f2a3 	rbit	r2, r3
 8001c54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c62:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c66:	2202      	movs	r2, #2
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c6e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	fa93 f2a3 	rbit	r2, r3
 8001c78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c7c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001c80:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c82:	4b7e      	ldr	r3, [pc, #504]	; (8001e7c <HAL_RCC_OscConfig+0x8f8>)
 8001c84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c8a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001c8e:	2102      	movs	r1, #2
 8001c90:	6019      	str	r1, [r3, #0]
 8001c92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c96:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	fa93 f1a3 	rbit	r1, r3
 8001ca0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001ca8:	6019      	str	r1, [r3, #0]
  return result;
 8001caa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cae:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	fab3 f383 	clz	r3, r3
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	f003 031f 	and.w	r3, r3, #31
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cca:	4013      	ands	r3, r2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d09d      	beq.n	8001c0c <HAL_RCC_OscConfig+0x688>
 8001cd0:	e08d      	b.n	8001dee <HAL_RCC_OscConfig+0x86a>
 8001cd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001cda:	2201      	movs	r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	fa93 f2a3 	rbit	r2, r3
 8001cec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001cf4:	601a      	str	r2, [r3, #0]
  return result;
 8001cf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cfa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001cfe:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d00:	fab3 f383 	clz	r3, r3
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	461a      	mov	r2, r3
 8001d08:	4b5d      	ldr	r3, [pc, #372]	; (8001e80 <HAL_RCC_OscConfig+0x8fc>)
 8001d0a:	4413      	add	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	461a      	mov	r2, r3
 8001d10:	2300      	movs	r3, #0
 8001d12:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d14:	f7ff f900 	bl	8000f18 <HAL_GetTick>
 8001d18:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d1c:	e00a      	b.n	8001d34 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d1e:	f7ff f8fb 	bl	8000f18 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d902      	bls.n	8001d34 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	f000 bc75 	b.w	800261e <HAL_RCC_OscConfig+0x109a>
 8001d34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d38:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d44:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	fa93 f2a3 	rbit	r2, r3
 8001d4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d52:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001d60:	2202      	movs	r2, #2
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	fa93 f2a3 	rbit	r2, r3
 8001d72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d80:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001d84:	2202      	movs	r2, #2
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d8c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	fa93 f2a3 	rbit	r2, r3
 8001d96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d9a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001d9e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da0:	4b36      	ldr	r3, [pc, #216]	; (8001e7c <HAL_RCC_OscConfig+0x8f8>)
 8001da2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001da4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001dac:	2102      	movs	r1, #2
 8001dae:	6019      	str	r1, [r3, #0]
 8001db0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001db4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	fa93 f1a3 	rbit	r1, r3
 8001dbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001dc6:	6019      	str	r1, [r3, #0]
  return result;
 8001dc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dcc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	fab3 f383 	clz	r3, r3
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	f003 031f 	and.w	r3, r3, #31
 8001de2:	2101      	movs	r1, #1
 8001de4:	fa01 f303 	lsl.w	r3, r1, r3
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d197      	bne.n	8001d1e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0304 	and.w	r3, r3, #4
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 81a5 	beq.w	800214e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e04:	2300      	movs	r3, #0
 8001e06:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e0a:	4b1c      	ldr	r3, [pc, #112]	; (8001e7c <HAL_RCC_OscConfig+0x8f8>)
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d116      	bne.n	8001e44 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e16:	4b19      	ldr	r3, [pc, #100]	; (8001e7c <HAL_RCC_OscConfig+0x8f8>)
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	4a18      	ldr	r2, [pc, #96]	; (8001e7c <HAL_RCC_OscConfig+0x8f8>)
 8001e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e20:	61d3      	str	r3, [r2, #28]
 8001e22:	4b16      	ldr	r3, [pc, #88]	; (8001e7c <HAL_RCC_OscConfig+0x8f8>)
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001e2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e3c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e44:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <HAL_RCC_OscConfig+0x900>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d121      	bne.n	8001e94 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e50:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <HAL_RCC_OscConfig+0x900>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a0b      	ldr	r2, [pc, #44]	; (8001e84 <HAL_RCC_OscConfig+0x900>)
 8001e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e5a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e5c:	f7ff f85c 	bl	8000f18 <HAL_GetTick>
 8001e60:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e64:	e010      	b.n	8001e88 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e66:	f7ff f857 	bl	8000f18 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b64      	cmp	r3, #100	; 0x64
 8001e74:	d908      	bls.n	8001e88 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e3d1      	b.n	800261e <HAL_RCC_OscConfig+0x109a>
 8001e7a:	bf00      	nop
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	10908120 	.word	0x10908120
 8001e84:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e88:	4b8d      	ldr	r3, [pc, #564]	; (80020c0 <HAL_RCC_OscConfig+0xb3c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0e8      	beq.n	8001e66 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e98:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d106      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x92e>
 8001ea4:	4b87      	ldr	r3, [pc, #540]	; (80020c4 <HAL_RCC_OscConfig+0xb40>)
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	4a86      	ldr	r2, [pc, #536]	; (80020c4 <HAL_RCC_OscConfig+0xb40>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6213      	str	r3, [r2, #32]
 8001eb0:	e035      	b.n	8001f1e <HAL_RCC_OscConfig+0x99a>
 8001eb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10c      	bne.n	8001edc <HAL_RCC_OscConfig+0x958>
 8001ec2:	4b80      	ldr	r3, [pc, #512]	; (80020c4 <HAL_RCC_OscConfig+0xb40>)
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	4a7f      	ldr	r2, [pc, #508]	; (80020c4 <HAL_RCC_OscConfig+0xb40>)
 8001ec8:	f023 0301 	bic.w	r3, r3, #1
 8001ecc:	6213      	str	r3, [r2, #32]
 8001ece:	4b7d      	ldr	r3, [pc, #500]	; (80020c4 <HAL_RCC_OscConfig+0xb40>)
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	4a7c      	ldr	r2, [pc, #496]	; (80020c4 <HAL_RCC_OscConfig+0xb40>)
 8001ed4:	f023 0304 	bic.w	r3, r3, #4
 8001ed8:	6213      	str	r3, [r2, #32]
 8001eda:	e020      	b.n	8001f1e <HAL_RCC_OscConfig+0x99a>
 8001edc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	2b05      	cmp	r3, #5
 8001eea:	d10c      	bne.n	8001f06 <HAL_RCC_OscConfig+0x982>
 8001eec:	4b75      	ldr	r3, [pc, #468]	; (80020c4 <HAL_RCC_OscConfig+0xb40>)
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	4a74      	ldr	r2, [pc, #464]	; (80020c4 <HAL_RCC_OscConfig+0xb40>)
 8001ef2:	f043 0304 	orr.w	r3, r3, #4
 8001ef6:	6213      	str	r3, [r2, #32]
 8001ef8:	4b72      	ldr	r3, [pc, #456]	; (80020c4 <HAL_RCC_OscConfig+0xb40>)
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	4a71      	ldr	r2, [pc, #452]	; (80020c4 <HAL_RCC_OscConfig+0xb40>)
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	6213      	str	r3, [r2, #32]
 8001f04:	e00b      	b.n	8001f1e <HAL_RCC_OscConfig+0x99a>
 8001f06:	4b6f      	ldr	r3, [pc, #444]	; (80020c4 <HAL_RCC_OscConfig+0xb40>)
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	4a6e      	ldr	r2, [pc, #440]	; (80020c4 <HAL_RCC_OscConfig+0xb40>)
 8001f0c:	f023 0301 	bic.w	r3, r3, #1
 8001f10:	6213      	str	r3, [r2, #32]
 8001f12:	4b6c      	ldr	r3, [pc, #432]	; (80020c4 <HAL_RCC_OscConfig+0xb40>)
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	4a6b      	ldr	r2, [pc, #428]	; (80020c4 <HAL_RCC_OscConfig+0xb40>)
 8001f18:	f023 0304 	bic.w	r3, r3, #4
 8001f1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f22:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 8081 	beq.w	8002032 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f30:	f7fe fff2 	bl	8000f18 <HAL_GetTick>
 8001f34:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f38:	e00b      	b.n	8001f52 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f3a:	f7fe ffed 	bl	8000f18 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e365      	b.n	800261e <HAL_RCC_OscConfig+0x109a>
 8001f52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f56:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f62:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	fa93 f2a3 	rbit	r2, r3
 8001f6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f70:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f7a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001f7e:	2202      	movs	r2, #2
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f86:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	fa93 f2a3 	rbit	r2, r3
 8001f90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f94:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001f98:	601a      	str	r2, [r3, #0]
  return result;
 8001f9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f9e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001fa2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa4:	fab3 f383 	clz	r3, r3
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	095b      	lsrs	r3, r3, #5
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	f043 0302 	orr.w	r3, r3, #2
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d102      	bne.n	8001fbe <HAL_RCC_OscConfig+0xa3a>
 8001fb8:	4b42      	ldr	r3, [pc, #264]	; (80020c4 <HAL_RCC_OscConfig+0xb40>)
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	e013      	b.n	8001fe6 <HAL_RCC_OscConfig+0xa62>
 8001fbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fc2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fce:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	fa93 f2a3 	rbit	r2, r3
 8001fd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fdc:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	4b38      	ldr	r3, [pc, #224]	; (80020c4 <HAL_RCC_OscConfig+0xb40>)
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fea:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001fee:	2102      	movs	r1, #2
 8001ff0:	6011      	str	r1, [r2, #0]
 8001ff2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ff6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001ffa:	6812      	ldr	r2, [r2, #0]
 8001ffc:	fa92 f1a2 	rbit	r1, r2
 8002000:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002004:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002008:	6011      	str	r1, [r2, #0]
  return result;
 800200a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800200e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	fab2 f282 	clz	r2, r2
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	f002 021f 	and.w	r2, r2, #31
 8002024:	2101      	movs	r1, #1
 8002026:	fa01 f202 	lsl.w	r2, r1, r2
 800202a:	4013      	ands	r3, r2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d084      	beq.n	8001f3a <HAL_RCC_OscConfig+0x9b6>
 8002030:	e083      	b.n	800213a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002032:	f7fe ff71 	bl	8000f18 <HAL_GetTick>
 8002036:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800203a:	e00b      	b.n	8002054 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800203c:	f7fe ff6c 	bl	8000f18 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	f241 3288 	movw	r2, #5000	; 0x1388
 800204c:	4293      	cmp	r3, r2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e2e4      	b.n	800261e <HAL_RCC_OscConfig+0x109a>
 8002054:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002058:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800205c:	2202      	movs	r2, #2
 800205e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002060:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002064:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	fa93 f2a3 	rbit	r2, r3
 800206e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002072:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800207c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002080:	2202      	movs	r2, #2
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002088:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	fa93 f2a3 	rbit	r2, r3
 8002092:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002096:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800209a:	601a      	str	r2, [r3, #0]
  return result;
 800209c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020a0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80020a4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a6:	fab3 f383 	clz	r3, r3
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	095b      	lsrs	r3, r3, #5
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	f043 0302 	orr.w	r3, r3, #2
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d106      	bne.n	80020c8 <HAL_RCC_OscConfig+0xb44>
 80020ba:	4b02      	ldr	r3, [pc, #8]	; (80020c4 <HAL_RCC_OscConfig+0xb40>)
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	e017      	b.n	80020f0 <HAL_RCC_OscConfig+0xb6c>
 80020c0:	40007000 	.word	0x40007000
 80020c4:	40021000 	.word	0x40021000
 80020c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020cc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80020d0:	2202      	movs	r2, #2
 80020d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020d8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	fa93 f2a3 	rbit	r2, r3
 80020e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020e6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	4bb3      	ldr	r3, [pc, #716]	; (80023bc <HAL_RCC_OscConfig+0xe38>)
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020f4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80020f8:	2102      	movs	r1, #2
 80020fa:	6011      	str	r1, [r2, #0]
 80020fc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002100:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002104:	6812      	ldr	r2, [r2, #0]
 8002106:	fa92 f1a2 	rbit	r1, r2
 800210a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800210e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002112:	6011      	str	r1, [r2, #0]
  return result;
 8002114:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002118:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800211c:	6812      	ldr	r2, [r2, #0]
 800211e:	fab2 f282 	clz	r2, r2
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	f002 021f 	and.w	r2, r2, #31
 800212e:	2101      	movs	r1, #1
 8002130:	fa01 f202 	lsl.w	r2, r1, r2
 8002134:	4013      	ands	r3, r2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d180      	bne.n	800203c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800213a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800213e:	2b01      	cmp	r3, #1
 8002140:	d105      	bne.n	800214e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002142:	4b9e      	ldr	r3, [pc, #632]	; (80023bc <HAL_RCC_OscConfig+0xe38>)
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	4a9d      	ldr	r2, [pc, #628]	; (80023bc <HAL_RCC_OscConfig+0xe38>)
 8002148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800214c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800214e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002152:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 825e 	beq.w	800261c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002160:	4b96      	ldr	r3, [pc, #600]	; (80023bc <HAL_RCC_OscConfig+0xe38>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 030c 	and.w	r3, r3, #12
 8002168:	2b08      	cmp	r3, #8
 800216a:	f000 821f 	beq.w	80025ac <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800216e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002172:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	2b02      	cmp	r3, #2
 800217c:	f040 8170 	bne.w	8002460 <HAL_RCC_OscConfig+0xedc>
 8002180:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002184:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002188:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800218c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002192:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	fa93 f2a3 	rbit	r2, r3
 800219c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021a0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80021a4:	601a      	str	r2, [r3, #0]
  return result;
 80021a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021aa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80021ae:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b0:	fab3 f383 	clz	r3, r3
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021ba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	461a      	mov	r2, r3
 80021c2:	2300      	movs	r3, #0
 80021c4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c6:	f7fe fea7 	bl	8000f18 <HAL_GetTick>
 80021ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ce:	e009      	b.n	80021e4 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d0:	f7fe fea2 	bl	8000f18 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e21c      	b.n	800261e <HAL_RCC_OscConfig+0x109a>
 80021e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021e8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80021ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021f6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	fa93 f2a3 	rbit	r2, r3
 8002200:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002204:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002208:	601a      	str	r2, [r3, #0]
  return result;
 800220a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800220e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002212:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002214:	fab3 f383 	clz	r3, r3
 8002218:	b2db      	uxtb	r3, r3
 800221a:	095b      	lsrs	r3, r3, #5
 800221c:	b2db      	uxtb	r3, r3
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b01      	cmp	r3, #1
 8002226:	d102      	bne.n	800222e <HAL_RCC_OscConfig+0xcaa>
 8002228:	4b64      	ldr	r3, [pc, #400]	; (80023bc <HAL_RCC_OscConfig+0xe38>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	e027      	b.n	800227e <HAL_RCC_OscConfig+0xcfa>
 800222e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002232:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002236:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800223a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002240:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	fa93 f2a3 	rbit	r2, r3
 800224a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800224e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002258:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800225c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002266:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	fa93 f2a3 	rbit	r2, r3
 8002270:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002274:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	4b50      	ldr	r3, [pc, #320]	; (80023bc <HAL_RCC_OscConfig+0xe38>)
 800227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002282:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002286:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800228a:	6011      	str	r1, [r2, #0]
 800228c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002290:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002294:	6812      	ldr	r2, [r2, #0]
 8002296:	fa92 f1a2 	rbit	r1, r2
 800229a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800229e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80022a2:	6011      	str	r1, [r2, #0]
  return result;
 80022a4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022a8:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80022ac:	6812      	ldr	r2, [r2, #0]
 80022ae:	fab2 f282 	clz	r2, r2
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	f042 0220 	orr.w	r2, r2, #32
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	f002 021f 	and.w	r2, r2, #31
 80022be:	2101      	movs	r1, #1
 80022c0:	fa01 f202 	lsl.w	r2, r1, r2
 80022c4:	4013      	ands	r3, r2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d182      	bne.n	80021d0 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ca:	4b3c      	ldr	r3, [pc, #240]	; (80023bc <HAL_RCC_OscConfig+0xe38>)
 80022cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ce:	f023 020f 	bic.w	r2, r3, #15
 80022d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	4937      	ldr	r1, [pc, #220]	; (80023bc <HAL_RCC_OscConfig+0xe38>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	62cb      	str	r3, [r1, #44]	; 0x2c
 80022e4:	4b35      	ldr	r3, [pc, #212]	; (80023bc <HAL_RCC_OscConfig+0xe38>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80022ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6a19      	ldr	r1, [r3, #32]
 80022f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	430b      	orrs	r3, r1
 8002306:	492d      	ldr	r1, [pc, #180]	; (80023bc <HAL_RCC_OscConfig+0xe38>)
 8002308:	4313      	orrs	r3, r2
 800230a:	604b      	str	r3, [r1, #4]
 800230c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002310:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002314:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002318:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800231e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	fa93 f2a3 	rbit	r2, r3
 8002328:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800232c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002330:	601a      	str	r2, [r3, #0]
  return result;
 8002332:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002336:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800233a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800233c:	fab3 f383 	clz	r3, r3
 8002340:	b2db      	uxtb	r3, r3
 8002342:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002346:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	461a      	mov	r2, r3
 800234e:	2301      	movs	r3, #1
 8002350:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002352:	f7fe fde1 	bl	8000f18 <HAL_GetTick>
 8002356:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800235a:	e009      	b.n	8002370 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800235c:	f7fe fddc 	bl	8000f18 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e156      	b.n	800261e <HAL_RCC_OscConfig+0x109a>
 8002370:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002374:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002378:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800237c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002382:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	fa93 f2a3 	rbit	r2, r3
 800238c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002390:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002394:	601a      	str	r2, [r3, #0]
  return result;
 8002396:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800239a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800239e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023a0:	fab3 f383 	clz	r3, r3
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	095b      	lsrs	r3, r3, #5
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d105      	bne.n	80023c0 <HAL_RCC_OscConfig+0xe3c>
 80023b4:	4b01      	ldr	r3, [pc, #4]	; (80023bc <HAL_RCC_OscConfig+0xe38>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	e02a      	b.n	8002410 <HAL_RCC_OscConfig+0xe8c>
 80023ba:	bf00      	nop
 80023bc:	40021000 	.word	0x40021000
 80023c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023c4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80023c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023d2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	fa93 f2a3 	rbit	r2, r3
 80023dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023e0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ea:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80023ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023f8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	fa93 f2a3 	rbit	r2, r3
 8002402:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002406:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	4b86      	ldr	r3, [pc, #536]	; (8002628 <HAL_RCC_OscConfig+0x10a4>)
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002414:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002418:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800241c:	6011      	str	r1, [r2, #0]
 800241e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002422:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002426:	6812      	ldr	r2, [r2, #0]
 8002428:	fa92 f1a2 	rbit	r1, r2
 800242c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002430:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002434:	6011      	str	r1, [r2, #0]
  return result;
 8002436:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800243a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800243e:	6812      	ldr	r2, [r2, #0]
 8002440:	fab2 f282 	clz	r2, r2
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	f042 0220 	orr.w	r2, r2, #32
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	f002 021f 	and.w	r2, r2, #31
 8002450:	2101      	movs	r1, #1
 8002452:	fa01 f202 	lsl.w	r2, r1, r2
 8002456:	4013      	ands	r3, r2
 8002458:	2b00      	cmp	r3, #0
 800245a:	f43f af7f 	beq.w	800235c <HAL_RCC_OscConfig+0xdd8>
 800245e:	e0dd      	b.n	800261c <HAL_RCC_OscConfig+0x1098>
 8002460:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002464:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002468:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800246c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002472:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	fa93 f2a3 	rbit	r2, r3
 800247c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002480:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002484:	601a      	str	r2, [r3, #0]
  return result;
 8002486:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800248a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800248e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002490:	fab3 f383 	clz	r3, r3
 8002494:	b2db      	uxtb	r3, r3
 8002496:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800249a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	461a      	mov	r2, r3
 80024a2:	2300      	movs	r3, #0
 80024a4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a6:	f7fe fd37 	bl	8000f18 <HAL_GetTick>
 80024aa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ae:	e009      	b.n	80024c4 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b0:	f7fe fd32 	bl	8000f18 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e0ac      	b.n	800261e <HAL_RCC_OscConfig+0x109a>
 80024c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024c8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80024cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024d6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	fa93 f2a3 	rbit	r2, r3
 80024e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024e4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80024e8:	601a      	str	r2, [r3, #0]
  return result;
 80024ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ee:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80024f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f4:	fab3 f383 	clz	r3, r3
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	095b      	lsrs	r3, r3, #5
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b01      	cmp	r3, #1
 8002506:	d102      	bne.n	800250e <HAL_RCC_OscConfig+0xf8a>
 8002508:	4b47      	ldr	r3, [pc, #284]	; (8002628 <HAL_RCC_OscConfig+0x10a4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	e027      	b.n	800255e <HAL_RCC_OscConfig+0xfda>
 800250e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002512:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002516:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800251a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002520:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	fa93 f2a3 	rbit	r2, r3
 800252a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800252e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002538:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800253c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002546:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	fa93 f2a3 	rbit	r2, r3
 8002550:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002554:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	4b33      	ldr	r3, [pc, #204]	; (8002628 <HAL_RCC_OscConfig+0x10a4>)
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002562:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002566:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800256a:	6011      	str	r1, [r2, #0]
 800256c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002570:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002574:	6812      	ldr	r2, [r2, #0]
 8002576:	fa92 f1a2 	rbit	r1, r2
 800257a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800257e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002582:	6011      	str	r1, [r2, #0]
  return result;
 8002584:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002588:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800258c:	6812      	ldr	r2, [r2, #0]
 800258e:	fab2 f282 	clz	r2, r2
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	f042 0220 	orr.w	r2, r2, #32
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	f002 021f 	and.w	r2, r2, #31
 800259e:	2101      	movs	r1, #1
 80025a0:	fa01 f202 	lsl.w	r2, r1, r2
 80025a4:	4013      	ands	r3, r2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d182      	bne.n	80024b0 <HAL_RCC_OscConfig+0xf2c>
 80025aa:	e037      	b.n	800261c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e02e      	b.n	800261e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025c0:	4b19      	ldr	r3, [pc, #100]	; (8002628 <HAL_RCC_OscConfig+0x10a4>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80025c8:	4b17      	ldr	r3, [pc, #92]	; (8002628 <HAL_RCC_OscConfig+0x10a4>)
 80025ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025cc:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80025d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80025d4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80025d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d117      	bne.n	8002618 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80025e8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80025ec:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d10b      	bne.n	8002618 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002600:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002604:	f003 020f 	and.w	r2, r3, #15
 8002608:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800260c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002614:	429a      	cmp	r2, r3
 8002616:	d001      	beq.n	800261c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e000      	b.n	800261e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40021000 	.word	0x40021000

0800262c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b09e      	sub	sp, #120	; 0x78
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002636:	2300      	movs	r3, #0
 8002638:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e162      	b.n	800290a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002644:	4b90      	ldr	r3, [pc, #576]	; (8002888 <HAL_RCC_ClockConfig+0x25c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	429a      	cmp	r2, r3
 8002650:	d910      	bls.n	8002674 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002652:	4b8d      	ldr	r3, [pc, #564]	; (8002888 <HAL_RCC_ClockConfig+0x25c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f023 0207 	bic.w	r2, r3, #7
 800265a:	498b      	ldr	r1, [pc, #556]	; (8002888 <HAL_RCC_ClockConfig+0x25c>)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	4313      	orrs	r3, r2
 8002660:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002662:	4b89      	ldr	r3, [pc, #548]	; (8002888 <HAL_RCC_ClockConfig+0x25c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	429a      	cmp	r2, r3
 800266e:	d001      	beq.n	8002674 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e14a      	b.n	800290a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d008      	beq.n	8002692 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002680:	4b82      	ldr	r3, [pc, #520]	; (800288c <HAL_RCC_ClockConfig+0x260>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	497f      	ldr	r1, [pc, #508]	; (800288c <HAL_RCC_ClockConfig+0x260>)
 800268e:	4313      	orrs	r3, r2
 8002690:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	f000 80dc 	beq.w	8002858 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d13c      	bne.n	8002722 <HAL_RCC_ClockConfig+0xf6>
 80026a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026ac:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026b0:	fa93 f3a3 	rbit	r3, r3
 80026b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80026b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b8:	fab3 f383 	clz	r3, r3
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	095b      	lsrs	r3, r3, #5
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d102      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xa6>
 80026cc:	4b6f      	ldr	r3, [pc, #444]	; (800288c <HAL_RCC_ClockConfig+0x260>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	e00f      	b.n	80026f2 <HAL_RCC_ClockConfig+0xc6>
 80026d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	667b      	str	r3, [r7, #100]	; 0x64
 80026e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026e4:	663b      	str	r3, [r7, #96]	; 0x60
 80026e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026e8:	fa93 f3a3 	rbit	r3, r3
 80026ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026ee:	4b67      	ldr	r3, [pc, #412]	; (800288c <HAL_RCC_ClockConfig+0x260>)
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80026f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026fa:	fa92 f2a2 	rbit	r2, r2
 80026fe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002700:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002702:	fab2 f282 	clz	r2, r2
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	f042 0220 	orr.w	r2, r2, #32
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	f002 021f 	and.w	r2, r2, #31
 8002712:	2101      	movs	r1, #1
 8002714:	fa01 f202 	lsl.w	r2, r1, r2
 8002718:	4013      	ands	r3, r2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d17b      	bne.n	8002816 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e0f3      	b.n	800290a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d13c      	bne.n	80027a4 <HAL_RCC_ClockConfig+0x178>
 800272a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800272e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002732:	fa93 f3a3 	rbit	r3, r3
 8002736:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273a:	fab3 f383 	clz	r3, r3
 800273e:	b2db      	uxtb	r3, r3
 8002740:	095b      	lsrs	r3, r3, #5
 8002742:	b2db      	uxtb	r3, r3
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b01      	cmp	r3, #1
 800274c:	d102      	bne.n	8002754 <HAL_RCC_ClockConfig+0x128>
 800274e:	4b4f      	ldr	r3, [pc, #316]	; (800288c <HAL_RCC_ClockConfig+0x260>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	e00f      	b.n	8002774 <HAL_RCC_ClockConfig+0x148>
 8002754:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002758:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800275c:	fa93 f3a3 	rbit	r3, r3
 8002760:	647b      	str	r3, [r7, #68]	; 0x44
 8002762:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002766:	643b      	str	r3, [r7, #64]	; 0x40
 8002768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800276a:	fa93 f3a3 	rbit	r3, r3
 800276e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002770:	4b46      	ldr	r3, [pc, #280]	; (800288c <HAL_RCC_ClockConfig+0x260>)
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002778:	63ba      	str	r2, [r7, #56]	; 0x38
 800277a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800277c:	fa92 f2a2 	rbit	r2, r2
 8002780:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002782:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002784:	fab2 f282 	clz	r2, r2
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	f042 0220 	orr.w	r2, r2, #32
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	f002 021f 	and.w	r2, r2, #31
 8002794:	2101      	movs	r1, #1
 8002796:	fa01 f202 	lsl.w	r2, r1, r2
 800279a:	4013      	ands	r3, r2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d13a      	bne.n	8002816 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e0b2      	b.n	800290a <HAL_RCC_ClockConfig+0x2de>
 80027a4:	2302      	movs	r3, #2
 80027a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027aa:	fa93 f3a3 	rbit	r3, r3
 80027ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80027b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b2:	fab3 f383 	clz	r3, r3
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	095b      	lsrs	r3, r3, #5
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d102      	bne.n	80027cc <HAL_RCC_ClockConfig+0x1a0>
 80027c6:	4b31      	ldr	r3, [pc, #196]	; (800288c <HAL_RCC_ClockConfig+0x260>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	e00d      	b.n	80027e8 <HAL_RCC_ClockConfig+0x1bc>
 80027cc:	2302      	movs	r3, #2
 80027ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d2:	fa93 f3a3 	rbit	r3, r3
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
 80027d8:	2302      	movs	r3, #2
 80027da:	623b      	str	r3, [r7, #32]
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	fa93 f3a3 	rbit	r3, r3
 80027e2:	61fb      	str	r3, [r7, #28]
 80027e4:	4b29      	ldr	r3, [pc, #164]	; (800288c <HAL_RCC_ClockConfig+0x260>)
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	2202      	movs	r2, #2
 80027ea:	61ba      	str	r2, [r7, #24]
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	fa92 f2a2 	rbit	r2, r2
 80027f2:	617a      	str	r2, [r7, #20]
  return result;
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	fab2 f282 	clz	r2, r2
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	f042 0220 	orr.w	r2, r2, #32
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	f002 021f 	and.w	r2, r2, #31
 8002806:	2101      	movs	r1, #1
 8002808:	fa01 f202 	lsl.w	r2, r1, r2
 800280c:	4013      	ands	r3, r2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e079      	b.n	800290a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002816:	4b1d      	ldr	r3, [pc, #116]	; (800288c <HAL_RCC_ClockConfig+0x260>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f023 0203 	bic.w	r2, r3, #3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	491a      	ldr	r1, [pc, #104]	; (800288c <HAL_RCC_ClockConfig+0x260>)
 8002824:	4313      	orrs	r3, r2
 8002826:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002828:	f7fe fb76 	bl	8000f18 <HAL_GetTick>
 800282c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282e:	e00a      	b.n	8002846 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002830:	f7fe fb72 	bl	8000f18 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	f241 3288 	movw	r2, #5000	; 0x1388
 800283e:	4293      	cmp	r3, r2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e061      	b.n	800290a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002846:	4b11      	ldr	r3, [pc, #68]	; (800288c <HAL_RCC_ClockConfig+0x260>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f003 020c 	and.w	r2, r3, #12
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	429a      	cmp	r2, r3
 8002856:	d1eb      	bne.n	8002830 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002858:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <HAL_RCC_ClockConfig+0x25c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d214      	bcs.n	8002890 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002866:	4b08      	ldr	r3, [pc, #32]	; (8002888 <HAL_RCC_ClockConfig+0x25c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 0207 	bic.w	r2, r3, #7
 800286e:	4906      	ldr	r1, [pc, #24]	; (8002888 <HAL_RCC_ClockConfig+0x25c>)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	4313      	orrs	r3, r2
 8002874:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002876:	4b04      	ldr	r3, [pc, #16]	; (8002888 <HAL_RCC_ClockConfig+0x25c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	429a      	cmp	r2, r3
 8002882:	d005      	beq.n	8002890 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e040      	b.n	800290a <HAL_RCC_ClockConfig+0x2de>
 8002888:	40022000 	.word	0x40022000
 800288c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d008      	beq.n	80028ae <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800289c:	4b1d      	ldr	r3, [pc, #116]	; (8002914 <HAL_RCC_ClockConfig+0x2e8>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	491a      	ldr	r1, [pc, #104]	; (8002914 <HAL_RCC_ClockConfig+0x2e8>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d009      	beq.n	80028ce <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028ba:	4b16      	ldr	r3, [pc, #88]	; (8002914 <HAL_RCC_ClockConfig+0x2e8>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	4912      	ldr	r1, [pc, #72]	; (8002914 <HAL_RCC_ClockConfig+0x2e8>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80028ce:	f000 f829 	bl	8002924 <HAL_RCC_GetSysClockFreq>
 80028d2:	4601      	mov	r1, r0
 80028d4:	4b0f      	ldr	r3, [pc, #60]	; (8002914 <HAL_RCC_ClockConfig+0x2e8>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028dc:	22f0      	movs	r2, #240	; 0xf0
 80028de:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	fa92 f2a2 	rbit	r2, r2
 80028e6:	60fa      	str	r2, [r7, #12]
  return result;
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	fab2 f282 	clz	r2, r2
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	40d3      	lsrs	r3, r2
 80028f2:	4a09      	ldr	r2, [pc, #36]	; (8002918 <HAL_RCC_ClockConfig+0x2ec>)
 80028f4:	5cd3      	ldrb	r3, [r2, r3]
 80028f6:	fa21 f303 	lsr.w	r3, r1, r3
 80028fa:	4a08      	ldr	r2, [pc, #32]	; (800291c <HAL_RCC_ClockConfig+0x2f0>)
 80028fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80028fe:	4b08      	ldr	r3, [pc, #32]	; (8002920 <HAL_RCC_ClockConfig+0x2f4>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f7fe fac4 	bl	8000e90 <HAL_InitTick>
  
  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3778      	adds	r7, #120	; 0x78
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40021000 	.word	0x40021000
 8002918:	080046f4 	.word	0x080046f4
 800291c:	200000a0 	.word	0x200000a0
 8002920:	200000a4 	.word	0x200000a4

08002924 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002924:	b480      	push	{r7}
 8002926:	b08b      	sub	sp, #44	; 0x2c
 8002928:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800292a:	2300      	movs	r3, #0
 800292c:	61fb      	str	r3, [r7, #28]
 800292e:	2300      	movs	r3, #0
 8002930:	61bb      	str	r3, [r7, #24]
 8002932:	2300      	movs	r3, #0
 8002934:	627b      	str	r3, [r7, #36]	; 0x24
 8002936:	2300      	movs	r3, #0
 8002938:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800293a:	2300      	movs	r3, #0
 800293c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800293e:	4b2a      	ldr	r3, [pc, #168]	; (80029e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f003 030c 	and.w	r3, r3, #12
 800294a:	2b04      	cmp	r3, #4
 800294c:	d002      	beq.n	8002954 <HAL_RCC_GetSysClockFreq+0x30>
 800294e:	2b08      	cmp	r3, #8
 8002950:	d003      	beq.n	800295a <HAL_RCC_GetSysClockFreq+0x36>
 8002952:	e03f      	b.n	80029d4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002954:	4b25      	ldr	r3, [pc, #148]	; (80029ec <HAL_RCC_GetSysClockFreq+0xc8>)
 8002956:	623b      	str	r3, [r7, #32]
      break;
 8002958:	e03f      	b.n	80029da <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002960:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002964:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	fa92 f2a2 	rbit	r2, r2
 800296c:	607a      	str	r2, [r7, #4]
  return result;
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	fab2 f282 	clz	r2, r2
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	40d3      	lsrs	r3, r2
 8002978:	4a1d      	ldr	r2, [pc, #116]	; (80029f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800297a:	5cd3      	ldrb	r3, [r2, r3]
 800297c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800297e:	4b1a      	ldr	r3, [pc, #104]	; (80029e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	220f      	movs	r2, #15
 8002988:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	fa92 f2a2 	rbit	r2, r2
 8002990:	60fa      	str	r2, [r7, #12]
  return result;
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	fab2 f282 	clz	r2, r2
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	40d3      	lsrs	r3, r2
 800299c:	4a15      	ldr	r2, [pc, #84]	; (80029f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800299e:	5cd3      	ldrb	r3, [r2, r3]
 80029a0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d008      	beq.n	80029be <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80029ac:	4a0f      	ldr	r2, [pc, #60]	; (80029ec <HAL_RCC_GetSysClockFreq+0xc8>)
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	fb02 f303 	mul.w	r3, r2, r3
 80029ba:	627b      	str	r3, [r7, #36]	; 0x24
 80029bc:	e007      	b.n	80029ce <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80029be:	4a0b      	ldr	r2, [pc, #44]	; (80029ec <HAL_RCC_GetSysClockFreq+0xc8>)
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	fb02 f303 	mul.w	r3, r2, r3
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	623b      	str	r3, [r7, #32]
      break;
 80029d2:	e002      	b.n	80029da <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029d4:	4b05      	ldr	r3, [pc, #20]	; (80029ec <HAL_RCC_GetSysClockFreq+0xc8>)
 80029d6:	623b      	str	r3, [r7, #32]
      break;
 80029d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029da:	6a3b      	ldr	r3, [r7, #32]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	372c      	adds	r7, #44	; 0x2c
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	40021000 	.word	0x40021000
 80029ec:	007a1200 	.word	0x007a1200
 80029f0:	0800470c 	.word	0x0800470c
 80029f4:	0800471c 	.word	0x0800471c

080029f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029fc:	4b03      	ldr	r3, [pc, #12]	; (8002a0c <HAL_RCC_GetHCLKFreq+0x14>)
 80029fe:	681b      	ldr	r3, [r3, #0]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	200000a0 	.word	0x200000a0

08002a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002a16:	f7ff ffef 	bl	80029f8 <HAL_RCC_GetHCLKFreq>
 8002a1a:	4601      	mov	r1, r0
 8002a1c:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a24:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a28:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	fa92 f2a2 	rbit	r2, r2
 8002a30:	603a      	str	r2, [r7, #0]
  return result;
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	fab2 f282 	clz	r2, r2
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	40d3      	lsrs	r3, r2
 8002a3c:	4a04      	ldr	r2, [pc, #16]	; (8002a50 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002a3e:	5cd3      	ldrb	r3, [r2, r3]
 8002a40:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002a44:	4618      	mov	r0, r3
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	08004704 	.word	0x08004704

08002a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002a5a:	f7ff ffcd 	bl	80029f8 <HAL_RCC_GetHCLKFreq>
 8002a5e:	4601      	mov	r1, r0
 8002a60:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002a68:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002a6c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	fa92 f2a2 	rbit	r2, r2
 8002a74:	603a      	str	r2, [r7, #0]
  return result;
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	fab2 f282 	clz	r2, r2
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	40d3      	lsrs	r3, r2
 8002a80:	4a04      	ldr	r2, [pc, #16]	; (8002a94 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002a82:	5cd3      	ldrb	r3, [r2, r3]
 8002a84:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40021000 	.word	0x40021000
 8002a94:	08004704 	.word	0x08004704

08002a98 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b092      	sub	sp, #72	; 0x48
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 80d4 	beq.w	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002abc:	4b4e      	ldr	r3, [pc, #312]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10e      	bne.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ac8:	4b4b      	ldr	r3, [pc, #300]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	4a4a      	ldr	r2, [pc, #296]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ad2:	61d3      	str	r3, [r2, #28]
 8002ad4:	4b48      	ldr	r3, [pc, #288]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae6:	4b45      	ldr	r3, [pc, #276]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d118      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002af2:	4b42      	ldr	r3, [pc, #264]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a41      	ldr	r2, [pc, #260]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002afc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002afe:	f7fe fa0b 	bl	8000f18 <HAL_GetTick>
 8002b02:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b04:	e008      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b06:	f7fe fa07 	bl	8000f18 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b64      	cmp	r3, #100	; 0x64
 8002b12:	d901      	bls.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e1d6      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b18:	4b38      	ldr	r3, [pc, #224]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0f0      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b24:	4b34      	ldr	r3, [pc, #208]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 8084 	beq.w	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d07c      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b44:	4b2c      	ldr	r3, [pc, #176]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b56:	fa93 f3a3 	rbit	r3, r3
 8002b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b5e:	fab3 f383 	clz	r3, r3
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	461a      	mov	r2, r3
 8002b66:	4b26      	ldr	r3, [pc, #152]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b68:	4413      	add	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	2301      	movs	r3, #1
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7a:	fa93 f3a3 	rbit	r3, r3
 8002b7e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b82:	fab3 f383 	clz	r3, r3
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4b1d      	ldr	r3, [pc, #116]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	461a      	mov	r2, r3
 8002b92:	2300      	movs	r3, #0
 8002b94:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b96:	4a18      	ldr	r2, [pc, #96]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b9a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d04b      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba6:	f7fe f9b7 	bl	8000f18 <HAL_GetTick>
 8002baa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bac:	e00a      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bae:	f7fe f9b3 	bl	8000f18 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e180      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bca:	fa93 f3a3 	rbit	r3, r3
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	623b      	str	r3, [r7, #32]
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	fa93 f3a3 	rbit	r3, r3
 8002bda:	61fb      	str	r3, [r7, #28]
  return result;
 8002bdc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bde:	fab3 f383 	clz	r3, r3
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	095b      	lsrs	r3, r3, #5
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	f043 0302 	orr.w	r3, r3, #2
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d108      	bne.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002bf2:	4b01      	ldr	r3, [pc, #4]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	e00d      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	40007000 	.word	0x40007000
 8002c00:	10908100 	.word	0x10908100
 8002c04:	2302      	movs	r3, #2
 8002c06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	fa93 f3a3 	rbit	r3, r3
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	4b9a      	ldr	r3, [pc, #616]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	2202      	movs	r2, #2
 8002c16:	613a      	str	r2, [r7, #16]
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	fa92 f2a2 	rbit	r2, r2
 8002c1e:	60fa      	str	r2, [r7, #12]
  return result;
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	fab2 f282 	clz	r2, r2
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c2c:	b2d2      	uxtb	r2, r2
 8002c2e:	f002 021f 	and.w	r2, r2, #31
 8002c32:	2101      	movs	r1, #1
 8002c34:	fa01 f202 	lsl.w	r2, r1, r2
 8002c38:	4013      	ands	r3, r2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0b7      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002c3e:	4b8f      	ldr	r3, [pc, #572]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	498c      	ldr	r1, [pc, #560]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c50:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d105      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c58:	4b88      	ldr	r3, [pc, #544]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	4a87      	ldr	r2, [pc, #540]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c62:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c70:	4b82      	ldr	r3, [pc, #520]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c74:	f023 0203 	bic.w	r2, r3, #3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	497f      	ldr	r1, [pc, #508]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d008      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c8e:	4b7b      	ldr	r3, [pc, #492]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	4978      	ldr	r1, [pc, #480]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d008      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cac:	4b73      	ldr	r3, [pc, #460]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	4970      	ldr	r1, [pc, #448]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0320 	and.w	r3, r3, #32
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d008      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cca:	4b6c      	ldr	r3, [pc, #432]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	f023 0210 	bic.w	r2, r3, #16
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	4969      	ldr	r1, [pc, #420]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d008      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002ce8:	4b64      	ldr	r3, [pc, #400]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf4:	4961      	ldr	r1, [pc, #388]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d008      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d06:	4b5d      	ldr	r3, [pc, #372]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	f023 0220 	bic.w	r2, r3, #32
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	495a      	ldr	r1, [pc, #360]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d008      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d24:	4b55      	ldr	r3, [pc, #340]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	4952      	ldr	r1, [pc, #328]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d008      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d42:	4b4e      	ldr	r3, [pc, #312]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	494b      	ldr	r1, [pc, #300]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0310 	and.w	r3, r3, #16
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d008      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d60:	4b46      	ldr	r3, [pc, #280]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	4943      	ldr	r1, [pc, #268]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d008      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d7e:	4b3f      	ldr	r3, [pc, #252]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	493c      	ldr	r1, [pc, #240]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d008      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d9c:	4b37      	ldr	r3, [pc, #220]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da8:	4934      	ldr	r1, [pc, #208]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d008      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002dba:	4b30      	ldr	r3, [pc, #192]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbe:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc6:	492d      	ldr	r1, [pc, #180]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002dd8:	4b28      	ldr	r3, [pc, #160]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ddc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de4:	4925      	ldr	r1, [pc, #148]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d008      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002df6:	4b21      	ldr	r3, [pc, #132]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	491e      	ldr	r1, [pc, #120]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d008      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002e14:	4b19      	ldr	r3, [pc, #100]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e18:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e20:	4916      	ldr	r1, [pc, #88]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d008      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002e32:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3e:	490f      	ldr	r1, [pc, #60]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d008      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002e50:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e54:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5c:	4907      	ldr	r1, [pc, #28]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00c      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002e6e:	4b03      	ldr	r3, [pc, #12]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	e002      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002e7a:	bf00      	nop
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e82:	4913      	ldr	r1, [pc, #76]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002e94:	4b0e      	ldr	r3, [pc, #56]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e98:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea0:	490b      	ldr	r1, [pc, #44]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d008      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002eb2:	4b07      	ldr	r3, [pc, #28]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ebe:	4904      	ldr	r1, [pc, #16]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3748      	adds	r7, #72	; 0x48
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40021000 	.word	0x40021000

08002ed4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e040      	b.n	8002f68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d106      	bne.n	8002efc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7fd fe88 	bl	8000c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2224      	movs	r2, #36	; 0x24
 8002f00:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0201 	bic.w	r2, r2, #1
 8002f10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 fbba 	bl	800368c <UART_SetConfig>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d101      	bne.n	8002f22 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e022      	b.n	8002f68 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d002      	beq.n	8002f30 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 fd82 	bl	8003a34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0201 	orr.w	r2, r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 fe09 	bl	8003b78 <UART_CheckIdleState>
 8002f66:	4603      	mov	r3, r0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08a      	sub	sp, #40	; 0x28
 8002f74:	af02      	add	r7, sp, #8
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	603b      	str	r3, [r7, #0]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f84:	2b20      	cmp	r3, #32
 8002f86:	d178      	bne.n	800307a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d002      	beq.n	8002f94 <HAL_UART_Transmit+0x24>
 8002f8e:	88fb      	ldrh	r3, [r7, #6]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e071      	b.n	800307c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2221      	movs	r2, #33	; 0x21
 8002fa4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fa6:	f7fd ffb7 	bl	8000f18 <HAL_GetTick>
 8002faa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	88fa      	ldrh	r2, [r7, #6]
 8002fb0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	88fa      	ldrh	r2, [r7, #6]
 8002fb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fc4:	d108      	bne.n	8002fd8 <HAL_UART_Transmit+0x68>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d104      	bne.n	8002fd8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	61bb      	str	r3, [r7, #24]
 8002fd6:	e003      	b.n	8002fe0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fe0:	e030      	b.n	8003044 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	2180      	movs	r1, #128	; 0x80
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 fe6b 	bl	8003cc8 <UART_WaitOnFlagUntilTimeout>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d004      	beq.n	8003002 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e03c      	b.n	800307c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10b      	bne.n	8003020 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	881a      	ldrh	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003014:	b292      	uxth	r2, r2
 8003016:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	3302      	adds	r3, #2
 800301c:	61bb      	str	r3, [r7, #24]
 800301e:	e008      	b.n	8003032 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	781a      	ldrb	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	b292      	uxth	r2, r2
 800302a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	3301      	adds	r3, #1
 8003030:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003038:	b29b      	uxth	r3, r3
 800303a:	3b01      	subs	r3, #1
 800303c:	b29a      	uxth	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800304a:	b29b      	uxth	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1c8      	bne.n	8002fe2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	2200      	movs	r2, #0
 8003058:	2140      	movs	r1, #64	; 0x40
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 fe34 	bl	8003cc8 <UART_WaitOnFlagUntilTimeout>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d004      	beq.n	8003070 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2220      	movs	r2, #32
 800306a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e005      	b.n	800307c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2220      	movs	r2, #32
 8003074:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	e000      	b.n	800307c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800307a:	2302      	movs	r3, #2
  }
}
 800307c:	4618      	mov	r0, r3
 800307e:	3720      	adds	r7, #32
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b0ba      	sub	sp, #232	; 0xe8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80030aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80030ae:	f640 030f 	movw	r3, #2063	; 0x80f
 80030b2:	4013      	ands	r3, r2
 80030b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80030b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d115      	bne.n	80030ec <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80030c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030c4:	f003 0320 	and.w	r3, r3, #32
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00f      	beq.n	80030ec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d009      	beq.n	80030ec <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 82ab 	beq.w	8003638 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	4798      	blx	r3
      }
      return;
 80030ea:	e2a5      	b.n	8003638 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80030ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 8117 	beq.w	8003324 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80030f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d106      	bne.n	8003110 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003102:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003106:	4b85      	ldr	r3, [pc, #532]	; (800331c <HAL_UART_IRQHandler+0x298>)
 8003108:	4013      	ands	r3, r2
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 810a 	beq.w	8003324 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d011      	beq.n	8003140 <HAL_UART_IRQHandler+0xbc>
 800311c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00b      	beq.n	8003140 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2201      	movs	r2, #1
 800312e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003136:	f043 0201 	orr.w	r2, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d011      	beq.n	8003170 <HAL_UART_IRQHandler+0xec>
 800314c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00b      	beq.n	8003170 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2202      	movs	r2, #2
 800315e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003166:	f043 0204 	orr.w	r2, r3, #4
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	d011      	beq.n	80031a0 <HAL_UART_IRQHandler+0x11c>
 800317c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00b      	beq.n	80031a0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2204      	movs	r2, #4
 800318e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003196:	f043 0202 	orr.w	r2, r3, #2
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80031a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031a4:	f003 0308 	and.w	r3, r3, #8
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d017      	beq.n	80031dc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80031ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031b0:	f003 0320 	and.w	r3, r3, #32
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d105      	bne.n	80031c4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80031b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031bc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00b      	beq.n	80031dc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2208      	movs	r2, #8
 80031ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031d2:	f043 0208 	orr.w	r2, r3, #8
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80031dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d012      	beq.n	800320e <HAL_UART_IRQHandler+0x18a>
 80031e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00c      	beq.n	800320e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003204:	f043 0220 	orr.w	r2, r3, #32
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 8211 	beq.w	800363c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800321a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800321e:	f003 0320 	and.w	r3, r3, #32
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00d      	beq.n	8003242 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800322a:	f003 0320 	and.w	r3, r3, #32
 800322e:	2b00      	cmp	r3, #0
 8003230:	d007      	beq.n	8003242 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003248:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003256:	2b40      	cmp	r3, #64	; 0x40
 8003258:	d005      	beq.n	8003266 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800325a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800325e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003262:	2b00      	cmp	r3, #0
 8003264:	d04f      	beq.n	8003306 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 fe5c 	bl	8003f24 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003276:	2b40      	cmp	r3, #64	; 0x40
 8003278:	d141      	bne.n	80032fe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	3308      	adds	r3, #8
 8003280:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003284:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003288:	e853 3f00 	ldrex	r3, [r3]
 800328c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003290:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003298:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	3308      	adds	r3, #8
 80032a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80032a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80032aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80032b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80032b6:	e841 2300 	strex	r3, r2, [r1]
 80032ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80032be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1d9      	bne.n	800327a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d013      	beq.n	80032f6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032d2:	4a13      	ldr	r2, [pc, #76]	; (8003320 <HAL_UART_IRQHandler+0x29c>)
 80032d4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fd ff72 	bl	80011c4 <HAL_DMA_Abort_IT>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d017      	beq.n	8003316 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80032f0:	4610      	mov	r0, r2
 80032f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f4:	e00f      	b.n	8003316 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f9be 	bl	8003678 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032fc:	e00b      	b.n	8003316 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f9ba 	bl	8003678 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003304:	e007      	b.n	8003316 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f9b6 	bl	8003678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003314:	e192      	b.n	800363c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003316:	bf00      	nop
    return;
 8003318:	e190      	b.n	800363c <HAL_UART_IRQHandler+0x5b8>
 800331a:	bf00      	nop
 800331c:	04000120 	.word	0x04000120
 8003320:	08003fed 	.word	0x08003fed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003328:	2b01      	cmp	r3, #1
 800332a:	f040 814b 	bne.w	80035c4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800332e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003332:	f003 0310 	and.w	r3, r3, #16
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 8144 	beq.w	80035c4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800333c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003340:	f003 0310 	and.w	r3, r3, #16
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 813d 	beq.w	80035c4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2210      	movs	r2, #16
 8003350:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335c:	2b40      	cmp	r3, #64	; 0x40
 800335e:	f040 80b5 	bne.w	80034cc <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800336e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 8164 	beq.w	8003640 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800337e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003382:	429a      	cmp	r2, r3
 8003384:	f080 815c 	bcs.w	8003640 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800338e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	2b20      	cmp	r3, #32
 800339a:	f000 8086 	beq.w	80034aa <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033aa:	e853 3f00 	ldrex	r3, [r3]
 80033ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80033b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	461a      	mov	r2, r3
 80033c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80033c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80033cc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80033d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033d8:	e841 2300 	strex	r3, r2, [r1]
 80033dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80033e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1da      	bne.n	800339e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	3308      	adds	r3, #8
 80033ee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033f2:	e853 3f00 	ldrex	r3, [r3]
 80033f6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80033f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033fa:	f023 0301 	bic.w	r3, r3, #1
 80033fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	3308      	adds	r3, #8
 8003408:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800340c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003410:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003412:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003414:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003418:	e841 2300 	strex	r3, r2, [r1]
 800341c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800341e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1e1      	bne.n	80033e8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	3308      	adds	r3, #8
 800342a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800342e:	e853 3f00 	ldrex	r3, [r3]
 8003432:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003434:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003436:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800343a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	3308      	adds	r3, #8
 8003444:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003448:	66fa      	str	r2, [r7, #108]	; 0x6c
 800344a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800344e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003450:	e841 2300 	strex	r3, r2, [r1]
 8003454:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003456:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1e3      	bne.n	8003424 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2220      	movs	r2, #32
 8003460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003472:	e853 3f00 	ldrex	r3, [r3]
 8003476:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003478:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800347a:	f023 0310 	bic.w	r3, r3, #16
 800347e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	461a      	mov	r2, r3
 8003488:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800348c:	65bb      	str	r3, [r7, #88]	; 0x58
 800348e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003490:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003492:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003494:	e841 2300 	strex	r3, r2, [r1]
 8003498:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800349a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1e4      	bne.n	800346a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7fd fe54 	bl	8001152 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2202      	movs	r2, #2
 80034ae:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034bc:	b29b      	uxth	r3, r3
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	4619      	mov	r1, r3
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7fd f827 	bl	8000518 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80034ca:	e0b9      	b.n	8003640 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034d8:	b29b      	uxth	r3, r3
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 80ab 	beq.w	8003644 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80034ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 80a6 	beq.w	8003644 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003500:	e853 3f00 	ldrex	r3, [r3]
 8003504:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003508:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800350c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	461a      	mov	r2, r3
 8003516:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800351a:	647b      	str	r3, [r7, #68]	; 0x44
 800351c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003520:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003522:	e841 2300 	strex	r3, r2, [r1]
 8003526:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1e4      	bne.n	80034f8 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	3308      	adds	r3, #8
 8003534:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	e853 3f00 	ldrex	r3, [r3]
 800353c:	623b      	str	r3, [r7, #32]
   return(result);
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	f023 0301 	bic.w	r3, r3, #1
 8003544:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	3308      	adds	r3, #8
 800354e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003552:	633a      	str	r2, [r7, #48]	; 0x30
 8003554:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003556:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800355a:	e841 2300 	strex	r3, r2, [r1]
 800355e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1e3      	bne.n	800352e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2220      	movs	r2, #32
 800356a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	e853 3f00 	ldrex	r3, [r3]
 8003586:	60fb      	str	r3, [r7, #12]
   return(result);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f023 0310 	bic.w	r3, r3, #16
 800358e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800359c:	61fb      	str	r3, [r7, #28]
 800359e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a0:	69b9      	ldr	r1, [r7, #24]
 80035a2:	69fa      	ldr	r2, [r7, #28]
 80035a4:	e841 2300 	strex	r3, r2, [r1]
 80035a8:	617b      	str	r3, [r7, #20]
   return(result);
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1e4      	bne.n	800357a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035ba:	4619      	mov	r1, r3
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7fc ffab 	bl	8000518 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80035c2:	e03f      	b.n	8003644 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80035c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00e      	beq.n	80035ee <HAL_UART_IRQHandler+0x56a>
 80035d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d008      	beq.n	80035ee <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80035e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 fee8 	bl	80043bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035ec:	e02d      	b.n	800364a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80035ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00e      	beq.n	8003618 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80035fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003602:	2b00      	cmp	r3, #0
 8003604:	d008      	beq.n	8003618 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800360a:	2b00      	cmp	r3, #0
 800360c:	d01c      	beq.n	8003648 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	4798      	blx	r3
    }
    return;
 8003616:	e017      	b.n	8003648 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800361c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003620:	2b00      	cmp	r3, #0
 8003622:	d012      	beq.n	800364a <HAL_UART_IRQHandler+0x5c6>
 8003624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00c      	beq.n	800364a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 fcf1 	bl	8004018 <UART_EndTransmit_IT>
    return;
 8003636:	e008      	b.n	800364a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003638:	bf00      	nop
 800363a:	e006      	b.n	800364a <HAL_UART_IRQHandler+0x5c6>
    return;
 800363c:	bf00      	nop
 800363e:	e004      	b.n	800364a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003640:	bf00      	nop
 8003642:	e002      	b.n	800364a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003644:	bf00      	nop
 8003646:	e000      	b.n	800364a <HAL_UART_IRQHandler+0x5c6>
    return;
 8003648:	bf00      	nop
  }

}
 800364a:	37e8      	adds	r7, #232	; 0xe8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b088      	sub	sp, #32
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003694:	2300      	movs	r3, #0
 8003696:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	431a      	orrs	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	4b92      	ldr	r3, [pc, #584]	; (8003900 <UART_SetConfig+0x274>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6812      	ldr	r2, [r2, #0]
 80036be:	6979      	ldr	r1, [r7, #20]
 80036c0:	430b      	orrs	r3, r1
 80036c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a80      	ldr	r2, [pc, #512]	; (8003904 <UART_SetConfig+0x278>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d120      	bne.n	800374a <UART_SetConfig+0xbe>
 8003708:	4b7f      	ldr	r3, [pc, #508]	; (8003908 <UART_SetConfig+0x27c>)
 800370a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370c:	f003 0303 	and.w	r3, r3, #3
 8003710:	2b03      	cmp	r3, #3
 8003712:	d817      	bhi.n	8003744 <UART_SetConfig+0xb8>
 8003714:	a201      	add	r2, pc, #4	; (adr r2, 800371c <UART_SetConfig+0x90>)
 8003716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371a:	bf00      	nop
 800371c:	0800372d 	.word	0x0800372d
 8003720:	08003739 	.word	0x08003739
 8003724:	0800373f 	.word	0x0800373f
 8003728:	08003733 	.word	0x08003733
 800372c:	2301      	movs	r3, #1
 800372e:	77fb      	strb	r3, [r7, #31]
 8003730:	e0b5      	b.n	800389e <UART_SetConfig+0x212>
 8003732:	2302      	movs	r3, #2
 8003734:	77fb      	strb	r3, [r7, #31]
 8003736:	e0b2      	b.n	800389e <UART_SetConfig+0x212>
 8003738:	2304      	movs	r3, #4
 800373a:	77fb      	strb	r3, [r7, #31]
 800373c:	e0af      	b.n	800389e <UART_SetConfig+0x212>
 800373e:	2308      	movs	r3, #8
 8003740:	77fb      	strb	r3, [r7, #31]
 8003742:	e0ac      	b.n	800389e <UART_SetConfig+0x212>
 8003744:	2310      	movs	r3, #16
 8003746:	77fb      	strb	r3, [r7, #31]
 8003748:	e0a9      	b.n	800389e <UART_SetConfig+0x212>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a6f      	ldr	r2, [pc, #444]	; (800390c <UART_SetConfig+0x280>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d124      	bne.n	800379e <UART_SetConfig+0x112>
 8003754:	4b6c      	ldr	r3, [pc, #432]	; (8003908 <UART_SetConfig+0x27c>)
 8003756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003758:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800375c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003760:	d011      	beq.n	8003786 <UART_SetConfig+0xfa>
 8003762:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003766:	d817      	bhi.n	8003798 <UART_SetConfig+0x10c>
 8003768:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800376c:	d011      	beq.n	8003792 <UART_SetConfig+0x106>
 800376e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003772:	d811      	bhi.n	8003798 <UART_SetConfig+0x10c>
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <UART_SetConfig+0xf4>
 8003778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800377c:	d006      	beq.n	800378c <UART_SetConfig+0x100>
 800377e:	e00b      	b.n	8003798 <UART_SetConfig+0x10c>
 8003780:	2300      	movs	r3, #0
 8003782:	77fb      	strb	r3, [r7, #31]
 8003784:	e08b      	b.n	800389e <UART_SetConfig+0x212>
 8003786:	2302      	movs	r3, #2
 8003788:	77fb      	strb	r3, [r7, #31]
 800378a:	e088      	b.n	800389e <UART_SetConfig+0x212>
 800378c:	2304      	movs	r3, #4
 800378e:	77fb      	strb	r3, [r7, #31]
 8003790:	e085      	b.n	800389e <UART_SetConfig+0x212>
 8003792:	2308      	movs	r3, #8
 8003794:	77fb      	strb	r3, [r7, #31]
 8003796:	e082      	b.n	800389e <UART_SetConfig+0x212>
 8003798:	2310      	movs	r3, #16
 800379a:	77fb      	strb	r3, [r7, #31]
 800379c:	e07f      	b.n	800389e <UART_SetConfig+0x212>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a5b      	ldr	r2, [pc, #364]	; (8003910 <UART_SetConfig+0x284>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d124      	bne.n	80037f2 <UART_SetConfig+0x166>
 80037a8:	4b57      	ldr	r3, [pc, #348]	; (8003908 <UART_SetConfig+0x27c>)
 80037aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ac:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80037b0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80037b4:	d011      	beq.n	80037da <UART_SetConfig+0x14e>
 80037b6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80037ba:	d817      	bhi.n	80037ec <UART_SetConfig+0x160>
 80037bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80037c0:	d011      	beq.n	80037e6 <UART_SetConfig+0x15a>
 80037c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80037c6:	d811      	bhi.n	80037ec <UART_SetConfig+0x160>
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <UART_SetConfig+0x148>
 80037cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037d0:	d006      	beq.n	80037e0 <UART_SetConfig+0x154>
 80037d2:	e00b      	b.n	80037ec <UART_SetConfig+0x160>
 80037d4:	2300      	movs	r3, #0
 80037d6:	77fb      	strb	r3, [r7, #31]
 80037d8:	e061      	b.n	800389e <UART_SetConfig+0x212>
 80037da:	2302      	movs	r3, #2
 80037dc:	77fb      	strb	r3, [r7, #31]
 80037de:	e05e      	b.n	800389e <UART_SetConfig+0x212>
 80037e0:	2304      	movs	r3, #4
 80037e2:	77fb      	strb	r3, [r7, #31]
 80037e4:	e05b      	b.n	800389e <UART_SetConfig+0x212>
 80037e6:	2308      	movs	r3, #8
 80037e8:	77fb      	strb	r3, [r7, #31]
 80037ea:	e058      	b.n	800389e <UART_SetConfig+0x212>
 80037ec:	2310      	movs	r3, #16
 80037ee:	77fb      	strb	r3, [r7, #31]
 80037f0:	e055      	b.n	800389e <UART_SetConfig+0x212>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a47      	ldr	r2, [pc, #284]	; (8003914 <UART_SetConfig+0x288>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d124      	bne.n	8003846 <UART_SetConfig+0x1ba>
 80037fc:	4b42      	ldr	r3, [pc, #264]	; (8003908 <UART_SetConfig+0x27c>)
 80037fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003800:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003804:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003808:	d011      	beq.n	800382e <UART_SetConfig+0x1a2>
 800380a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800380e:	d817      	bhi.n	8003840 <UART_SetConfig+0x1b4>
 8003810:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003814:	d011      	beq.n	800383a <UART_SetConfig+0x1ae>
 8003816:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800381a:	d811      	bhi.n	8003840 <UART_SetConfig+0x1b4>
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <UART_SetConfig+0x19c>
 8003820:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003824:	d006      	beq.n	8003834 <UART_SetConfig+0x1a8>
 8003826:	e00b      	b.n	8003840 <UART_SetConfig+0x1b4>
 8003828:	2300      	movs	r3, #0
 800382a:	77fb      	strb	r3, [r7, #31]
 800382c:	e037      	b.n	800389e <UART_SetConfig+0x212>
 800382e:	2302      	movs	r3, #2
 8003830:	77fb      	strb	r3, [r7, #31]
 8003832:	e034      	b.n	800389e <UART_SetConfig+0x212>
 8003834:	2304      	movs	r3, #4
 8003836:	77fb      	strb	r3, [r7, #31]
 8003838:	e031      	b.n	800389e <UART_SetConfig+0x212>
 800383a:	2308      	movs	r3, #8
 800383c:	77fb      	strb	r3, [r7, #31]
 800383e:	e02e      	b.n	800389e <UART_SetConfig+0x212>
 8003840:	2310      	movs	r3, #16
 8003842:	77fb      	strb	r3, [r7, #31]
 8003844:	e02b      	b.n	800389e <UART_SetConfig+0x212>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a33      	ldr	r2, [pc, #204]	; (8003918 <UART_SetConfig+0x28c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d124      	bne.n	800389a <UART_SetConfig+0x20e>
 8003850:	4b2d      	ldr	r3, [pc, #180]	; (8003908 <UART_SetConfig+0x27c>)
 8003852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003854:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003858:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800385c:	d011      	beq.n	8003882 <UART_SetConfig+0x1f6>
 800385e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003862:	d817      	bhi.n	8003894 <UART_SetConfig+0x208>
 8003864:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003868:	d011      	beq.n	800388e <UART_SetConfig+0x202>
 800386a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800386e:	d811      	bhi.n	8003894 <UART_SetConfig+0x208>
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <UART_SetConfig+0x1f0>
 8003874:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003878:	d006      	beq.n	8003888 <UART_SetConfig+0x1fc>
 800387a:	e00b      	b.n	8003894 <UART_SetConfig+0x208>
 800387c:	2300      	movs	r3, #0
 800387e:	77fb      	strb	r3, [r7, #31]
 8003880:	e00d      	b.n	800389e <UART_SetConfig+0x212>
 8003882:	2302      	movs	r3, #2
 8003884:	77fb      	strb	r3, [r7, #31]
 8003886:	e00a      	b.n	800389e <UART_SetConfig+0x212>
 8003888:	2304      	movs	r3, #4
 800388a:	77fb      	strb	r3, [r7, #31]
 800388c:	e007      	b.n	800389e <UART_SetConfig+0x212>
 800388e:	2308      	movs	r3, #8
 8003890:	77fb      	strb	r3, [r7, #31]
 8003892:	e004      	b.n	800389e <UART_SetConfig+0x212>
 8003894:	2310      	movs	r3, #16
 8003896:	77fb      	strb	r3, [r7, #31]
 8003898:	e001      	b.n	800389e <UART_SetConfig+0x212>
 800389a:	2310      	movs	r3, #16
 800389c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038a6:	d16b      	bne.n	8003980 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80038a8:	7ffb      	ldrb	r3, [r7, #31]
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d838      	bhi.n	8003920 <UART_SetConfig+0x294>
 80038ae:	a201      	add	r2, pc, #4	; (adr r2, 80038b4 <UART_SetConfig+0x228>)
 80038b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b4:	080038d9 	.word	0x080038d9
 80038b8:	080038e1 	.word	0x080038e1
 80038bc:	080038e9 	.word	0x080038e9
 80038c0:	08003921 	.word	0x08003921
 80038c4:	080038ef 	.word	0x080038ef
 80038c8:	08003921 	.word	0x08003921
 80038cc:	08003921 	.word	0x08003921
 80038d0:	08003921 	.word	0x08003921
 80038d4:	080038f7 	.word	0x080038f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038d8:	f7ff f89a 	bl	8002a10 <HAL_RCC_GetPCLK1Freq>
 80038dc:	61b8      	str	r0, [r7, #24]
        break;
 80038de:	e024      	b.n	800392a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038e0:	f7ff f8b8 	bl	8002a54 <HAL_RCC_GetPCLK2Freq>
 80038e4:	61b8      	str	r0, [r7, #24]
        break;
 80038e6:	e020      	b.n	800392a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038e8:	4b0c      	ldr	r3, [pc, #48]	; (800391c <UART_SetConfig+0x290>)
 80038ea:	61bb      	str	r3, [r7, #24]
        break;
 80038ec:	e01d      	b.n	800392a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038ee:	f7ff f819 	bl	8002924 <HAL_RCC_GetSysClockFreq>
 80038f2:	61b8      	str	r0, [r7, #24]
        break;
 80038f4:	e019      	b.n	800392a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038fa:	61bb      	str	r3, [r7, #24]
        break;
 80038fc:	e015      	b.n	800392a <UART_SetConfig+0x29e>
 80038fe:	bf00      	nop
 8003900:	efff69f3 	.word	0xefff69f3
 8003904:	40013800 	.word	0x40013800
 8003908:	40021000 	.word	0x40021000
 800390c:	40004400 	.word	0x40004400
 8003910:	40004800 	.word	0x40004800
 8003914:	40004c00 	.word	0x40004c00
 8003918:	40005000 	.word	0x40005000
 800391c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003920:	2300      	movs	r3, #0
 8003922:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	77bb      	strb	r3, [r7, #30]
        break;
 8003928:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d073      	beq.n	8003a18 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	005a      	lsls	r2, r3, #1
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	085b      	lsrs	r3, r3, #1
 800393a:	441a      	add	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	fbb2 f3f3 	udiv	r3, r2, r3
 8003944:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	2b0f      	cmp	r3, #15
 800394a:	d916      	bls.n	800397a <UART_SetConfig+0x2ee>
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003952:	d212      	bcs.n	800397a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	b29b      	uxth	r3, r3
 8003958:	f023 030f 	bic.w	r3, r3, #15
 800395c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	085b      	lsrs	r3, r3, #1
 8003962:	b29b      	uxth	r3, r3
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	b29a      	uxth	r2, r3
 800396a:	89fb      	ldrh	r3, [r7, #14]
 800396c:	4313      	orrs	r3, r2
 800396e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	89fa      	ldrh	r2, [r7, #14]
 8003976:	60da      	str	r2, [r3, #12]
 8003978:	e04e      	b.n	8003a18 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	77bb      	strb	r3, [r7, #30]
 800397e:	e04b      	b.n	8003a18 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003980:	7ffb      	ldrb	r3, [r7, #31]
 8003982:	2b08      	cmp	r3, #8
 8003984:	d827      	bhi.n	80039d6 <UART_SetConfig+0x34a>
 8003986:	a201      	add	r2, pc, #4	; (adr r2, 800398c <UART_SetConfig+0x300>)
 8003988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398c:	080039b1 	.word	0x080039b1
 8003990:	080039b9 	.word	0x080039b9
 8003994:	080039c1 	.word	0x080039c1
 8003998:	080039d7 	.word	0x080039d7
 800399c:	080039c7 	.word	0x080039c7
 80039a0:	080039d7 	.word	0x080039d7
 80039a4:	080039d7 	.word	0x080039d7
 80039a8:	080039d7 	.word	0x080039d7
 80039ac:	080039cf 	.word	0x080039cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039b0:	f7ff f82e 	bl	8002a10 <HAL_RCC_GetPCLK1Freq>
 80039b4:	61b8      	str	r0, [r7, #24]
        break;
 80039b6:	e013      	b.n	80039e0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039b8:	f7ff f84c 	bl	8002a54 <HAL_RCC_GetPCLK2Freq>
 80039bc:	61b8      	str	r0, [r7, #24]
        break;
 80039be:	e00f      	b.n	80039e0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039c0:	4b1b      	ldr	r3, [pc, #108]	; (8003a30 <UART_SetConfig+0x3a4>)
 80039c2:	61bb      	str	r3, [r7, #24]
        break;
 80039c4:	e00c      	b.n	80039e0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039c6:	f7fe ffad 	bl	8002924 <HAL_RCC_GetSysClockFreq>
 80039ca:	61b8      	str	r0, [r7, #24]
        break;
 80039cc:	e008      	b.n	80039e0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039d2:	61bb      	str	r3, [r7, #24]
        break;
 80039d4:	e004      	b.n	80039e0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	77bb      	strb	r3, [r7, #30]
        break;
 80039de:	bf00      	nop
    }

    if (pclk != 0U)
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d018      	beq.n	8003a18 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	085a      	lsrs	r2, r3, #1
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	441a      	add	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	2b0f      	cmp	r3, #15
 80039fe:	d909      	bls.n	8003a14 <UART_SetConfig+0x388>
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a06:	d205      	bcs.n	8003a14 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	60da      	str	r2, [r3, #12]
 8003a12:	e001      	b.n	8003a18 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003a24:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3720      	adds	r7, #32
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	007a1200 	.word	0x007a1200

08003a34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00a      	beq.n	8003a5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00a      	beq.n	8003a80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00a      	beq.n	8003aa2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00a      	beq.n	8003ac4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	f003 0310 	and.w	r3, r3, #16
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00a      	beq.n	8003ae6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	f003 0320 	and.w	r3, r3, #32
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d01a      	beq.n	8003b4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b32:	d10a      	bne.n	8003b4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	605a      	str	r2, [r3, #4]
  }
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b098      	sub	sp, #96	; 0x60
 8003b7c:	af02      	add	r7, sp, #8
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b88:	f7fd f9c6 	bl	8000f18 <HAL_GetTick>
 8003b8c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0308 	and.w	r3, r3, #8
 8003b98:	2b08      	cmp	r3, #8
 8003b9a:	d12e      	bne.n	8003bfa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f88c 	bl	8003cc8 <UART_WaitOnFlagUntilTimeout>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d021      	beq.n	8003bfa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bbe:	e853 3f00 	ldrex	r3, [r3]
 8003bc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bca:	653b      	str	r3, [r7, #80]	; 0x50
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bd4:	647b      	str	r3, [r7, #68]	; 0x44
 8003bd6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003bda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bdc:	e841 2300 	strex	r3, r2, [r1]
 8003be0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1e6      	bne.n	8003bb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2220      	movs	r2, #32
 8003bec:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e062      	b.n	8003cc0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	d149      	bne.n	8003c9c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c10:	2200      	movs	r2, #0
 8003c12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f856 	bl	8003cc8 <UART_WaitOnFlagUntilTimeout>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d03c      	beq.n	8003c9c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	e853 3f00 	ldrex	r3, [r3]
 8003c2e:	623b      	str	r3, [r7, #32]
   return(result);
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c40:	633b      	str	r3, [r7, #48]	; 0x30
 8003c42:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c48:	e841 2300 	strex	r3, r2, [r1]
 8003c4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1e6      	bne.n	8003c22 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3308      	adds	r3, #8
 8003c5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	e853 3f00 	ldrex	r3, [r3]
 8003c62:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f023 0301 	bic.w	r3, r3, #1
 8003c6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	3308      	adds	r3, #8
 8003c72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c74:	61fa      	str	r2, [r7, #28]
 8003c76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c78:	69b9      	ldr	r1, [r7, #24]
 8003c7a:	69fa      	ldr	r2, [r7, #28]
 8003c7c:	e841 2300 	strex	r3, r2, [r1]
 8003c80:	617b      	str	r3, [r7, #20]
   return(result);
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1e5      	bne.n	8003c54 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e011      	b.n	8003cc0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3758      	adds	r7, #88	; 0x58
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	603b      	str	r3, [r7, #0]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cd8:	e049      	b.n	8003d6e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce0:	d045      	beq.n	8003d6e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce2:	f7fd f919 	bl	8000f18 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d302      	bcc.n	8003cf8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e048      	b.n	8003d8e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0304 	and.w	r3, r3, #4
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d031      	beq.n	8003d6e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	f003 0308 	and.w	r3, r3, #8
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d110      	bne.n	8003d3a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2208      	movs	r2, #8
 8003d1e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f8ff 	bl	8003f24 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2208      	movs	r2, #8
 8003d2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e029      	b.n	8003d8e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d48:	d111      	bne.n	8003d6e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 f8e5 	bl	8003f24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e00f      	b.n	8003d8e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	69da      	ldr	r2, [r3, #28]
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	4013      	ands	r3, r2
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	bf0c      	ite	eq
 8003d7e:	2301      	moveq	r3, #1
 8003d80:	2300      	movne	r3, #0
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	461a      	mov	r2, r3
 8003d86:	79fb      	ldrb	r3, [r7, #7]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d0a6      	beq.n	8003cda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b097      	sub	sp, #92	; 0x5c
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	4613      	mov	r3, r2
 8003da4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	68ba      	ldr	r2, [r7, #8]
 8003daa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	88fa      	ldrh	r2, [r7, #6]
 8003db0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	88fa      	ldrh	r2, [r7, #6]
 8003db8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dca:	d10e      	bne.n	8003dea <UART_Start_Receive_IT+0x52>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d105      	bne.n	8003de0 <UART_Start_Receive_IT+0x48>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003dda:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003dde:	e02d      	b.n	8003e3c <UART_Start_Receive_IT+0xa4>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	22ff      	movs	r2, #255	; 0xff
 8003de4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003de8:	e028      	b.n	8003e3c <UART_Start_Receive_IT+0xa4>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10d      	bne.n	8003e0e <UART_Start_Receive_IT+0x76>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d104      	bne.n	8003e04 <UART_Start_Receive_IT+0x6c>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	22ff      	movs	r2, #255	; 0xff
 8003dfe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e02:	e01b      	b.n	8003e3c <UART_Start_Receive_IT+0xa4>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	227f      	movs	r2, #127	; 0x7f
 8003e08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e0c:	e016      	b.n	8003e3c <UART_Start_Receive_IT+0xa4>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e16:	d10d      	bne.n	8003e34 <UART_Start_Receive_IT+0x9c>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d104      	bne.n	8003e2a <UART_Start_Receive_IT+0x92>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	227f      	movs	r2, #127	; 0x7f
 8003e24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e28:	e008      	b.n	8003e3c <UART_Start_Receive_IT+0xa4>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	223f      	movs	r2, #63	; 0x3f
 8003e2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e32:	e003      	b.n	8003e3c <UART_Start_Receive_IT+0xa4>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2222      	movs	r2, #34	; 0x22
 8003e48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3308      	adds	r3, #8
 8003e52:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e56:	e853 3f00 	ldrex	r3, [r3]
 8003e5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5e:	f043 0301 	orr.w	r3, r3, #1
 8003e62:	657b      	str	r3, [r7, #84]	; 0x54
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3308      	adds	r3, #8
 8003e6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e6c:	64ba      	str	r2, [r7, #72]	; 0x48
 8003e6e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e70:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e74:	e841 2300 	strex	r3, r2, [r1]
 8003e78:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003e7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1e5      	bne.n	8003e4c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e88:	d107      	bne.n	8003e9a <UART_Start_Receive_IT+0x102>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d103      	bne.n	8003e9a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4a21      	ldr	r2, [pc, #132]	; (8003f1c <UART_Start_Receive_IT+0x184>)
 8003e96:	669a      	str	r2, [r3, #104]	; 0x68
 8003e98:	e002      	b.n	8003ea0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4a20      	ldr	r2, [pc, #128]	; (8003f20 <UART_Start_Receive_IT+0x188>)
 8003e9e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d019      	beq.n	8003edc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb0:	e853 3f00 	ldrex	r3, [r3]
 8003eb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ec6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ec8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ecc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ece:	e841 2300 	strex	r3, r2, [r1]
 8003ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1e6      	bne.n	8003ea8 <UART_Start_Receive_IT+0x110>
 8003eda:	e018      	b.n	8003f0e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	e853 3f00 	ldrex	r3, [r3]
 8003ee8:	613b      	str	r3, [r7, #16]
   return(result);
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f043 0320 	orr.w	r3, r3, #32
 8003ef0:	653b      	str	r3, [r7, #80]	; 0x50
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003efa:	623b      	str	r3, [r7, #32]
 8003efc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efe:	69f9      	ldr	r1, [r7, #28]
 8003f00:	6a3a      	ldr	r2, [r7, #32]
 8003f02:	e841 2300 	strex	r3, r2, [r1]
 8003f06:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1e6      	bne.n	8003edc <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	375c      	adds	r7, #92	; 0x5c
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	08004215 	.word	0x08004215
 8003f20:	0800406d 	.word	0x0800406d

08003f24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b095      	sub	sp, #84	; 0x54
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f34:	e853 3f00 	ldrex	r3, [r3]
 8003f38:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	461a      	mov	r2, r3
 8003f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f4a:	643b      	str	r3, [r7, #64]	; 0x40
 8003f4c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f52:	e841 2300 	strex	r3, r2, [r1]
 8003f56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1e6      	bne.n	8003f2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3308      	adds	r3, #8
 8003f64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f66:	6a3b      	ldr	r3, [r7, #32]
 8003f68:	e853 3f00 	ldrex	r3, [r3]
 8003f6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	f023 0301 	bic.w	r3, r3, #1
 8003f74:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	3308      	adds	r3, #8
 8003f7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f86:	e841 2300 	strex	r3, r2, [r1]
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1e5      	bne.n	8003f5e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d118      	bne.n	8003fcc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	e853 3f00 	ldrex	r3, [r3]
 8003fa6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f023 0310 	bic.w	r3, r3, #16
 8003fae:	647b      	str	r3, [r7, #68]	; 0x44
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fb8:	61bb      	str	r3, [r7, #24]
 8003fba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fbc:	6979      	ldr	r1, [r7, #20]
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	e841 2300 	strex	r3, r2, [r1]
 8003fc4:	613b      	str	r3, [r7, #16]
   return(result);
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1e6      	bne.n	8003f9a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003fe0:	bf00      	nop
 8003fe2:	3754      	adds	r7, #84	; 0x54
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f7ff fb34 	bl	8003678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004010:	bf00      	nop
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b088      	sub	sp, #32
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	e853 3f00 	ldrex	r3, [r3]
 800402c:	60bb      	str	r3, [r7, #8]
   return(result);
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004034:	61fb      	str	r3, [r7, #28]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	61bb      	str	r3, [r7, #24]
 8004040:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004042:	6979      	ldr	r1, [r7, #20]
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	e841 2300 	strex	r3, r2, [r1]
 800404a:	613b      	str	r3, [r7, #16]
   return(result);
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1e6      	bne.n	8004020 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2220      	movs	r2, #32
 8004056:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7ff faf6 	bl	8003650 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004064:	bf00      	nop
 8004066:	3720      	adds	r7, #32
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b09c      	sub	sp, #112	; 0x70
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800407a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004084:	2b22      	cmp	r3, #34	; 0x22
 8004086:	f040 80b9 	bne.w	80041fc <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004090:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004094:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004098:	b2d9      	uxtb	r1, r3
 800409a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a4:	400a      	ands	r2, r1
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ae:	1c5a      	adds	r2, r3, #1
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f040 809c 	bne.w	800420c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040dc:	e853 3f00 	ldrex	r3, [r3]
 80040e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80040e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	461a      	mov	r2, r3
 80040f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80040f4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040fa:	e841 2300 	strex	r3, r2, [r1]
 80040fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004100:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1e6      	bne.n	80040d4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	3308      	adds	r3, #8
 800410c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004110:	e853 3f00 	ldrex	r3, [r3]
 8004114:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004118:	f023 0301 	bic.w	r3, r3, #1
 800411c:	667b      	str	r3, [r7, #100]	; 0x64
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	3308      	adds	r3, #8
 8004124:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004126:	647a      	str	r2, [r7, #68]	; 0x44
 8004128:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800412c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800412e:	e841 2300 	strex	r3, r2, [r1]
 8004132:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1e5      	bne.n	8004106 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2220      	movs	r2, #32
 800413e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d018      	beq.n	800418e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	e853 3f00 	ldrex	r3, [r3]
 8004168:	623b      	str	r3, [r7, #32]
   return(result);
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004170:	663b      	str	r3, [r7, #96]	; 0x60
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	461a      	mov	r2, r3
 8004178:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800417a:	633b      	str	r3, [r7, #48]	; 0x30
 800417c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004182:	e841 2300 	strex	r3, r2, [r1]
 8004186:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1e6      	bne.n	800415c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004192:	2b01      	cmp	r3, #1
 8004194:	d12e      	bne.n	80041f4 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	e853 3f00 	ldrex	r3, [r3]
 80041a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f023 0310 	bic.w	r3, r3, #16
 80041b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	461a      	mov	r2, r3
 80041b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041ba:	61fb      	str	r3, [r7, #28]
 80041bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041be:	69b9      	ldr	r1, [r7, #24]
 80041c0:	69fa      	ldr	r2, [r7, #28]
 80041c2:	e841 2300 	strex	r3, r2, [r1]
 80041c6:	617b      	str	r3, [r7, #20]
   return(result);
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1e6      	bne.n	800419c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	f003 0310 	and.w	r3, r3, #16
 80041d8:	2b10      	cmp	r3, #16
 80041da:	d103      	bne.n	80041e4 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2210      	movs	r2, #16
 80041e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80041ea:	4619      	mov	r1, r3
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7fc f993 	bl	8000518 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80041f2:	e00b      	b.n	800420c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7ff fa35 	bl	8003664 <HAL_UART_RxCpltCallback>
}
 80041fa:	e007      	b.n	800420c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699a      	ldr	r2, [r3, #24]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0208 	orr.w	r2, r2, #8
 800420a:	619a      	str	r2, [r3, #24]
}
 800420c:	bf00      	nop
 800420e:	3770      	adds	r7, #112	; 0x70
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b09c      	sub	sp, #112	; 0x70
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004222:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800422c:	2b22      	cmp	r3, #34	; 0x22
 800422e:	f040 80b9 	bne.w	80043a4 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004238:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004240:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004242:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004246:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800424a:	4013      	ands	r3, r2
 800424c:	b29a      	uxth	r2, r3
 800424e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004250:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004256:	1c9a      	adds	r2, r3, #2
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004262:	b29b      	uxth	r3, r3
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004274:	b29b      	uxth	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	f040 809c 	bne.w	80043b4 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004284:	e853 3f00 	ldrex	r3, [r3]
 8004288:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800428a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800428c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004290:	667b      	str	r3, [r7, #100]	; 0x64
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	461a      	mov	r2, r3
 8004298:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800429a:	657b      	str	r3, [r7, #84]	; 0x54
 800429c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80042a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80042a2:	e841 2300 	strex	r3, r2, [r1]
 80042a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80042a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1e6      	bne.n	800427c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	3308      	adds	r3, #8
 80042b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b8:	e853 3f00 	ldrex	r3, [r3]
 80042bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c0:	f023 0301 	bic.w	r3, r3, #1
 80042c4:	663b      	str	r3, [r7, #96]	; 0x60
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	3308      	adds	r3, #8
 80042cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042ce:	643a      	str	r2, [r7, #64]	; 0x40
 80042d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042d6:	e841 2300 	strex	r3, r2, [r1]
 80042da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1e5      	bne.n	80042ae <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d018      	beq.n	8004336 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430a:	6a3b      	ldr	r3, [r7, #32]
 800430c:	e853 3f00 	ldrex	r3, [r3]
 8004310:	61fb      	str	r3, [r7, #28]
   return(result);
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004318:	65fb      	str	r3, [r7, #92]	; 0x5c
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	461a      	mov	r2, r3
 8004320:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004322:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004324:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004326:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800432a:	e841 2300 	strex	r3, r2, [r1]
 800432e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1e6      	bne.n	8004304 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800433a:	2b01      	cmp	r3, #1
 800433c:	d12e      	bne.n	800439c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	e853 3f00 	ldrex	r3, [r3]
 8004350:	60bb      	str	r3, [r7, #8]
   return(result);
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	f023 0310 	bic.w	r3, r3, #16
 8004358:	65bb      	str	r3, [r7, #88]	; 0x58
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	461a      	mov	r2, r3
 8004360:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004362:	61bb      	str	r3, [r7, #24]
 8004364:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004366:	6979      	ldr	r1, [r7, #20]
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	e841 2300 	strex	r3, r2, [r1]
 800436e:	613b      	str	r3, [r7, #16]
   return(result);
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1e6      	bne.n	8004344 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	f003 0310 	and.w	r3, r3, #16
 8004380:	2b10      	cmp	r3, #16
 8004382:	d103      	bne.n	800438c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2210      	movs	r2, #16
 800438a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004392:	4619      	mov	r1, r3
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7fc f8bf 	bl	8000518 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800439a:	e00b      	b.n	80043b4 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f7ff f961 	bl	8003664 <HAL_UART_RxCpltCallback>
}
 80043a2:	e007      	b.n	80043b4 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699a      	ldr	r2, [r3, #24]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0208 	orr.w	r2, r2, #8
 80043b2:	619a      	str	r2, [r3, #24]
}
 80043b4:	bf00      	nop
 80043b6:	3770      	adds	r7, #112	; 0x70
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b08c      	sub	sp, #48	; 0x30
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	4613      	mov	r3, r2
 80043dc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043e4:	2b20      	cmp	r3, #32
 80043e6:	d142      	bne.n	800446e <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d002      	beq.n	80043f4 <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 80043ee:	88fb      	ldrh	r3, [r7, #6]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e03b      	b.n	8004470 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2201      	movs	r2, #1
 80043fc:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8004404:	88fb      	ldrh	r3, [r7, #6]
 8004406:	461a      	mov	r2, r3
 8004408:	68b9      	ldr	r1, [r7, #8]
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f7ff fcc4 	bl	8003d98 <UART_Start_Receive_IT>
 8004410:	4603      	mov	r3, r0
 8004412:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004416:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800441a:	2b00      	cmp	r3, #0
 800441c:	d124      	bne.n	8004468 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004422:	2b01      	cmp	r3, #1
 8004424:	d11d      	bne.n	8004462 <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2210      	movs	r2, #16
 800442c:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	e853 3f00 	ldrex	r3, [r3]
 800443a:	617b      	str	r3, [r7, #20]
   return(result);
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f043 0310 	orr.w	r3, r3, #16
 8004442:	62bb      	str	r3, [r7, #40]	; 0x28
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	461a      	mov	r2, r3
 800444a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444c:	627b      	str	r3, [r7, #36]	; 0x24
 800444e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004450:	6a39      	ldr	r1, [r7, #32]
 8004452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004454:	e841 2300 	strex	r3, r2, [r1]
 8004458:	61fb      	str	r3, [r7, #28]
   return(result);
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1e6      	bne.n	800442e <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 8004460:	e002      	b.n	8004468 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004468:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800446c:	e000      	b.n	8004470 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800446e:	2302      	movs	r3, #2
  }
}
 8004470:	4618      	mov	r0, r3
 8004472:	3730      	adds	r7, #48	; 0x30
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e016      	b.n	80044b8 <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7fc fc42 	bl	8000d14 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68da      	ldr	r2, [r3, #12]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800449c:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	691a      	ldr	r2, [r3, #16]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	ea42 0103 	orr.w	r1, r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689a      	ldr	r2, [r3, #8]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	68d2      	ldr	r2, [r2, #12]
 80044d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <LL_TIM_SetPrescaler>:
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <LL_TIM_SetAutoReload>:
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <LL_TIM_SetRepetitionCounter>:
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <LL_TIM_GenerateEvent_UPDATE>:
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	f043 0201 	orr.w	r2, r3, #1
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	615a      	str	r2, [r3, #20]
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a3f      	ldr	r2, [pc, #252]	; (8004664 <LL_TIM_Init+0x110>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d013      	beq.n	8004594 <LL_TIM_Init+0x40>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004572:	d00f      	beq.n	8004594 <LL_TIM_Init+0x40>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a3c      	ldr	r2, [pc, #240]	; (8004668 <LL_TIM_Init+0x114>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d00b      	beq.n	8004594 <LL_TIM_Init+0x40>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a3b      	ldr	r2, [pc, #236]	; (800466c <LL_TIM_Init+0x118>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d007      	beq.n	8004594 <LL_TIM_Init+0x40>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a3a      	ldr	r2, [pc, #232]	; (8004670 <LL_TIM_Init+0x11c>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d003      	beq.n	8004594 <LL_TIM_Init+0x40>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a39      	ldr	r2, [pc, #228]	; (8004674 <LL_TIM_Init+0x120>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d106      	bne.n	80045a2 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	4313      	orrs	r3, r2
 80045a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a2f      	ldr	r2, [pc, #188]	; (8004664 <LL_TIM_Init+0x110>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d01f      	beq.n	80045ea <LL_TIM_Init+0x96>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045b0:	d01b      	beq.n	80045ea <LL_TIM_Init+0x96>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a2c      	ldr	r2, [pc, #176]	; (8004668 <LL_TIM_Init+0x114>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d017      	beq.n	80045ea <LL_TIM_Init+0x96>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a2b      	ldr	r2, [pc, #172]	; (800466c <LL_TIM_Init+0x118>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d013      	beq.n	80045ea <LL_TIM_Init+0x96>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a2a      	ldr	r2, [pc, #168]	; (8004670 <LL_TIM_Init+0x11c>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d00f      	beq.n	80045ea <LL_TIM_Init+0x96>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a2a      	ldr	r2, [pc, #168]	; (8004678 <LL_TIM_Init+0x124>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d00b      	beq.n	80045ea <LL_TIM_Init+0x96>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a29      	ldr	r2, [pc, #164]	; (800467c <LL_TIM_Init+0x128>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d007      	beq.n	80045ea <LL_TIM_Init+0x96>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a28      	ldr	r2, [pc, #160]	; (8004680 <LL_TIM_Init+0x12c>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d003      	beq.n	80045ea <LL_TIM_Init+0x96>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a23      	ldr	r2, [pc, #140]	; (8004674 <LL_TIM_Init+0x120>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d106      	bne.n	80045f8 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	4619      	mov	r1, r3
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7ff ff79 	bl	80044fc <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	4619      	mov	r1, r3
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f7ff ff65 	bl	80044e0 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a12      	ldr	r2, [pc, #72]	; (8004664 <LL_TIM_Init+0x110>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d013      	beq.n	8004646 <LL_TIM_Init+0xf2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a13      	ldr	r2, [pc, #76]	; (8004670 <LL_TIM_Init+0x11c>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d00f      	beq.n	8004646 <LL_TIM_Init+0xf2>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a13      	ldr	r2, [pc, #76]	; (8004678 <LL_TIM_Init+0x124>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d00b      	beq.n	8004646 <LL_TIM_Init+0xf2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a12      	ldr	r2, [pc, #72]	; (800467c <LL_TIM_Init+0x128>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d007      	beq.n	8004646 <LL_TIM_Init+0xf2>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a11      	ldr	r2, [pc, #68]	; (8004680 <LL_TIM_Init+0x12c>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d003      	beq.n	8004646 <LL_TIM_Init+0xf2>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a0c      	ldr	r2, [pc, #48]	; (8004674 <LL_TIM_Init+0x120>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d105      	bne.n	8004652 <LL_TIM_Init+0xfe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	4619      	mov	r1, r3
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f7ff ff63 	bl	8004518 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7ff ff6e 	bl	8004534 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	40012c00 	.word	0x40012c00
 8004668:	40000400 	.word	0x40000400
 800466c:	40000800 	.word	0x40000800
 8004670:	40013400 	.word	0x40013400
 8004674:	40015000 	.word	0x40015000
 8004678:	40014000 	.word	0x40014000
 800467c:	40014400 	.word	0x40014400
 8004680:	40014800 	.word	0x40014800

08004684 <memset>:
 8004684:	4402      	add	r2, r0
 8004686:	4603      	mov	r3, r0
 8004688:	4293      	cmp	r3, r2
 800468a:	d100      	bne.n	800468e <memset+0xa>
 800468c:	4770      	bx	lr
 800468e:	f803 1b01 	strb.w	r1, [r3], #1
 8004692:	e7f9      	b.n	8004688 <memset+0x4>

08004694 <__libc_init_array>:
 8004694:	b570      	push	{r4, r5, r6, lr}
 8004696:	4d0d      	ldr	r5, [pc, #52]	; (80046cc <__libc_init_array+0x38>)
 8004698:	4c0d      	ldr	r4, [pc, #52]	; (80046d0 <__libc_init_array+0x3c>)
 800469a:	1b64      	subs	r4, r4, r5
 800469c:	10a4      	asrs	r4, r4, #2
 800469e:	2600      	movs	r6, #0
 80046a0:	42a6      	cmp	r6, r4
 80046a2:	d109      	bne.n	80046b8 <__libc_init_array+0x24>
 80046a4:	4d0b      	ldr	r5, [pc, #44]	; (80046d4 <__libc_init_array+0x40>)
 80046a6:	4c0c      	ldr	r4, [pc, #48]	; (80046d8 <__libc_init_array+0x44>)
 80046a8:	f000 f818 	bl	80046dc <_init>
 80046ac:	1b64      	subs	r4, r4, r5
 80046ae:	10a4      	asrs	r4, r4, #2
 80046b0:	2600      	movs	r6, #0
 80046b2:	42a6      	cmp	r6, r4
 80046b4:	d105      	bne.n	80046c2 <__libc_init_array+0x2e>
 80046b6:	bd70      	pop	{r4, r5, r6, pc}
 80046b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046bc:	4798      	blx	r3
 80046be:	3601      	adds	r6, #1
 80046c0:	e7ee      	b.n	80046a0 <__libc_init_array+0xc>
 80046c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80046c6:	4798      	blx	r3
 80046c8:	3601      	adds	r6, #1
 80046ca:	e7f2      	b.n	80046b2 <__libc_init_array+0x1e>
 80046cc:	0800472c 	.word	0x0800472c
 80046d0:	0800472c 	.word	0x0800472c
 80046d4:	0800472c 	.word	0x0800472c
 80046d8:	08004730 	.word	0x08004730

080046dc <_init>:
 80046dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046de:	bf00      	nop
 80046e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046e2:	bc08      	pop	{r3}
 80046e4:	469e      	mov	lr, r3
 80046e6:	4770      	bx	lr

080046e8 <_fini>:
 80046e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ea:	bf00      	nop
 80046ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ee:	bc08      	pop	{r3}
 80046f0:	469e      	mov	lr, r3
 80046f2:	4770      	bx	lr
