
Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c9c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003e30  08003e30  00013e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e68  08003e68  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003e68  08003e68  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e68  08003e68  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e68  08003e68  00013e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e6c  08003e6c  00013e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003e70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000134  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001a4  200001a4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a8f7  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001ace  00000000  00000000  0002a9da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000778  00000000  00000000  0002c4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005b8  00000000  00000000  0002cc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001faa6  00000000  00000000  0002d1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000b177  00000000  00000000  0004cc7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bfc6f  00000000  00000000  00057df5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001d0c  00000000  00000000  00117a64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00119770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003e18 	.word	0x08003e18

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	08003e18 	.word	0x08003e18

080001d4 <HAL_UARTEx_RxEventCallback>:
{
	HAL_UART_Transmit(&huart1, (uint8_t*)data, 2, 1000);
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	460b      	mov	r3, r1
 80001de:	807b      	strh	r3, [r7, #2]
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t*)RxData, 2);
 80001e0:	2202      	movs	r2, #2
 80001e2:	4904      	ldr	r1, [pc, #16]	; (80001f4 <HAL_UARTEx_RxEventCallback+0x20>)
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <HAL_UARTEx_RxEventCallback+0x24>)
 80001e6:	f003 fd97 	bl	8003d18 <HAL_UARTEx_ReceiveToIdle_IT>
}
 80001ea:	bf00      	nop
 80001ec:	3708      	adds	r7, #8
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	2000019c 	.word	0x2000019c
 80001f8:	2000008c 	.word	0x2000008c

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000200:	f000 faba 	bl	8000778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000204:	f000 f87a 	bl	80002fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000208:	f000 f92c 	bl	8000464 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800020c:	f000 f8fa 	bl	8000404 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000210:	f000 f8c8 	bl	80003a4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t*)RxData, 2);
 8000214:	2202      	movs	r2, #2
 8000216:	492f      	ldr	r1, [pc, #188]	; (80002d4 <main+0xd8>)
 8000218:	482f      	ldr	r0, [pc, #188]	; (80002d8 <main+0xdc>)
 800021a:	f003 fd7d 	bl	8003d18 <HAL_UARTEx_ReceiveToIdle_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(RxData[0] == 1){	//Check for red button press
 800021e:	4b2d      	ldr	r3, [pc, #180]	; (80002d4 <main+0xd8>)
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	b2db      	uxtb	r3, r3
 8000224:	2b01      	cmp	r3, #1
 8000226:	d10d      	bne.n	8000244 <main+0x48>
	 		 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2);		//toggle relay to toggle red LED
 8000228:	2104      	movs	r1, #4
 800022a:	482c      	ldr	r0, [pc, #176]	; (80002dc <main+0xe0>)
 800022c:	f000 fe34 	bl	8000e98 <HAL_GPIO_TogglePin>
	 		 RxData[0] = 5;
 8000230:	4b28      	ldr	r3, [pc, #160]	; (80002d4 <main+0xd8>)
 8000232:	2205      	movs	r2, #5
 8000234:	701a      	strb	r2, [r3, #0]
	  		 HAL_UART_Transmit(&huart2, led_a, 20, 10);
 8000236:	230a      	movs	r3, #10
 8000238:	2214      	movs	r2, #20
 800023a:	4929      	ldr	r1, [pc, #164]	; (80002e0 <main+0xe4>)
 800023c:	4829      	ldr	r0, [pc, #164]	; (80002e4 <main+0xe8>)
 800023e:	f002 fb3b 	bl	80028b8 <HAL_UART_Transmit>
 8000242:	e7ec      	b.n	800021e <main+0x22>
	   }else if(RxData[0] == 2){	//Check for green button press
 8000244:	4b23      	ldr	r3, [pc, #140]	; (80002d4 <main+0xd8>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	b2db      	uxtb	r3, r3
 800024a:	2b02      	cmp	r3, #2
 800024c:	d10d      	bne.n	800026a <main+0x6e>
	 	     HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);	//toggle relay to toggle green LED
 800024e:	2108      	movs	r1, #8
 8000250:	4822      	ldr	r0, [pc, #136]	; (80002dc <main+0xe0>)
 8000252:	f000 fe21 	bl	8000e98 <HAL_GPIO_TogglePin>
	         RxData[0] = 5;
 8000256:	4b1f      	ldr	r3, [pc, #124]	; (80002d4 <main+0xd8>)
 8000258:	2205      	movs	r2, #5
 800025a:	701a      	strb	r2, [r3, #0]
	  		 HAL_UART_Transmit(&huart2, led_d, 20, 10);
 800025c:	230a      	movs	r3, #10
 800025e:	2214      	movs	r2, #20
 8000260:	4921      	ldr	r1, [pc, #132]	; (80002e8 <main+0xec>)
 8000262:	4820      	ldr	r0, [pc, #128]	; (80002e4 <main+0xe8>)
 8000264:	f002 fb28 	bl	80028b8 <HAL_UART_Transmit>
 8000268:	e7d9      	b.n	800021e <main+0x22>
	   }else if(RxData[0] == 3){	//Check for yellow button press
 800026a:	4b1a      	ldr	r3, [pc, #104]	; (80002d4 <main+0xd8>)
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	b2db      	uxtb	r3, r3
 8000270:	2b03      	cmp	r3, #3
 8000272:	d10e      	bne.n	8000292 <main+0x96>
	 		 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);	//toggle relay to toggle yellow LED
 8000274:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000278:	481c      	ldr	r0, [pc, #112]	; (80002ec <main+0xf0>)
 800027a:	f000 fe0d 	bl	8000e98 <HAL_GPIO_TogglePin>
	 	     RxData[0] = 5;
 800027e:	4b15      	ldr	r3, [pc, #84]	; (80002d4 <main+0xd8>)
 8000280:	2205      	movs	r2, #5
 8000282:	701a      	strb	r2, [r3, #0]
	  		 HAL_UART_Transmit(&huart2, led_c, 20, 10);
 8000284:	230a      	movs	r3, #10
 8000286:	2214      	movs	r2, #20
 8000288:	4919      	ldr	r1, [pc, #100]	; (80002f0 <main+0xf4>)
 800028a:	4816      	ldr	r0, [pc, #88]	; (80002e4 <main+0xe8>)
 800028c:	f002 fb14 	bl	80028b8 <HAL_UART_Transmit>
 8000290:	e7c5      	b.n	800021e <main+0x22>
	   }else if(RxData[0] == 4){	//Check for blue button press
 8000292:	4b10      	ldr	r3, [pc, #64]	; (80002d4 <main+0xd8>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	b2db      	uxtb	r3, r3
 8000298:	2b04      	cmp	r3, #4
 800029a:	d10e      	bne.n	80002ba <main+0xbe>
	 		 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);	//toggle relay to toggle blue LED
 800029c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002a0:	4812      	ldr	r0, [pc, #72]	; (80002ec <main+0xf0>)
 80002a2:	f000 fdf9 	bl	8000e98 <HAL_GPIO_TogglePin>
	 		 RxData[0] = 5;
 80002a6:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <main+0xd8>)
 80002a8:	2205      	movs	r2, #5
 80002aa:	701a      	strb	r2, [r3, #0]
	 		 HAL_UART_Transmit(&huart2, led_b, 20, 10);
 80002ac:	230a      	movs	r3, #10
 80002ae:	2214      	movs	r2, #20
 80002b0:	4910      	ldr	r1, [pc, #64]	; (80002f4 <main+0xf8>)
 80002b2:	480c      	ldr	r0, [pc, #48]	; (80002e4 <main+0xe8>)
 80002b4:	f002 fb00 	bl	80028b8 <HAL_UART_Transmit>
 80002b8:	e7b1      	b.n	800021e <main+0x22>
	   }else if(RxData[0] == 0){
 80002ba:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <main+0xd8>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	b2db      	uxtb	r3, r3
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d1ac      	bne.n	800021e <main+0x22>
		     HAL_UART_Transmit(&huart2, buf, 20, 10);
 80002c4:	230a      	movs	r3, #10
 80002c6:	2214      	movs	r2, #20
 80002c8:	490b      	ldr	r1, [pc, #44]	; (80002f8 <main+0xfc>)
 80002ca:	4806      	ldr	r0, [pc, #24]	; (80002e4 <main+0xe8>)
 80002cc:	f002 faf4 	bl	80028b8 <HAL_UART_Transmit>
	  if(RxData[0] == 1){	//Check for red button press
 80002d0:	e7a5      	b.n	800021e <main+0x22>
 80002d2:	bf00      	nop
 80002d4:	2000019c 	.word	0x2000019c
 80002d8:	2000008c 	.word	0x2000008c
 80002dc:	48000800 	.word	0x48000800
 80002e0:	20000014 	.word	0x20000014
 80002e4:	20000114 	.word	0x20000114
 80002e8:	20000050 	.word	0x20000050
 80002ec:	48000400 	.word	0x48000400
 80002f0:	2000003c 	.word	0x2000003c
 80002f4:	20000028 	.word	0x20000028
 80002f8:	20000000 	.word	0x20000000

080002fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b0a6      	sub	sp, #152	; 0x98
 8000300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000302:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000306:	2228      	movs	r2, #40	; 0x28
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f003 fd58 	bl	8003dc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000310:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000314:	2200      	movs	r2, #0
 8000316:	601a      	str	r2, [r3, #0]
 8000318:	605a      	str	r2, [r3, #4]
 800031a:	609a      	str	r2, [r3, #8]
 800031c:	60da      	str	r2, [r3, #12]
 800031e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	2258      	movs	r2, #88	; 0x58
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f003 fd4a 	bl	8003dc0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800032c:	2302      	movs	r3, #2
 800032e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000330:	2301      	movs	r3, #1
 8000332:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000334:	2310      	movs	r3, #16
 8000336:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800033a:	2300      	movs	r3, #0
 800033c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000340:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000344:	4618      	mov	r0, r3
 8000346:	f000 fdc1 	bl	8000ecc <HAL_RCC_OscConfig>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000350:	f000 f8ea 	bl	8000528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000354:	230f      	movs	r3, #15
 8000356:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000358:	2300      	movs	r3, #0
 800035a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000368:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800036c:	2100      	movs	r1, #0
 800036e:	4618      	mov	r0, r3
 8000370:	f001 fe00 	bl	8001f74 <HAL_RCC_ClockConfig>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800037a:	f000 f8d5 	bl	8000528 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 800037e:	2303      	movs	r3, #3
 8000380:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000382:	2300      	movs	r3, #0
 8000384:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000386:	2300      	movs	r3, #0
 8000388:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	4618      	mov	r0, r3
 800038e:	f002 f827 	bl	80023e0 <HAL_RCCEx_PeriphCLKConfig>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000398:	f000 f8c6 	bl	8000528 <Error_Handler>
  }
}
 800039c:	bf00      	nop
 800039e:	3798      	adds	r7, #152	; 0x98
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003a8:	4b14      	ldr	r3, [pc, #80]	; (80003fc <MX_USART1_UART_Init+0x58>)
 80003aa:	4a15      	ldr	r2, [pc, #84]	; (8000400 <MX_USART1_UART_Init+0x5c>)
 80003ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <MX_USART1_UART_Init+0x58>)
 80003b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003b6:	4b11      	ldr	r3, [pc, #68]	; (80003fc <MX_USART1_UART_Init+0x58>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <MX_USART1_UART_Init+0x58>)
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003c2:	4b0e      	ldr	r3, [pc, #56]	; (80003fc <MX_USART1_UART_Init+0x58>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003c8:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <MX_USART1_UART_Init+0x58>)
 80003ca:	220c      	movs	r2, #12
 80003cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ce:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <MX_USART1_UART_Init+0x58>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d4:	4b09      	ldr	r3, [pc, #36]	; (80003fc <MX_USART1_UART_Init+0x58>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003da:	4b08      	ldr	r3, [pc, #32]	; (80003fc <MX_USART1_UART_Init+0x58>)
 80003dc:	2200      	movs	r2, #0
 80003de:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <MX_USART1_UART_Init+0x58>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003e6:	4805      	ldr	r0, [pc, #20]	; (80003fc <MX_USART1_UART_Init+0x58>)
 80003e8:	f002 fa18 	bl	800281c <HAL_UART_Init>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80003f2:	f000 f899 	bl	8000528 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	2000008c 	.word	0x2000008c
 8000400:	40013800 	.word	0x40013800

08000404 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000408:	4b14      	ldr	r3, [pc, #80]	; (800045c <MX_USART2_UART_Init+0x58>)
 800040a:	4a15      	ldr	r2, [pc, #84]	; (8000460 <MX_USART2_UART_Init+0x5c>)
 800040c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800040e:	4b13      	ldr	r3, [pc, #76]	; (800045c <MX_USART2_UART_Init+0x58>)
 8000410:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000414:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000416:	4b11      	ldr	r3, [pc, #68]	; (800045c <MX_USART2_UART_Init+0x58>)
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800041c:	4b0f      	ldr	r3, [pc, #60]	; (800045c <MX_USART2_UART_Init+0x58>)
 800041e:	2200      	movs	r2, #0
 8000420:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000422:	4b0e      	ldr	r3, [pc, #56]	; (800045c <MX_USART2_UART_Init+0x58>)
 8000424:	2200      	movs	r2, #0
 8000426:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000428:	4b0c      	ldr	r3, [pc, #48]	; (800045c <MX_USART2_UART_Init+0x58>)
 800042a:	220c      	movs	r2, #12
 800042c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800042e:	4b0b      	ldr	r3, [pc, #44]	; (800045c <MX_USART2_UART_Init+0x58>)
 8000430:	2200      	movs	r2, #0
 8000432:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000434:	4b09      	ldr	r3, [pc, #36]	; (800045c <MX_USART2_UART_Init+0x58>)
 8000436:	2200      	movs	r2, #0
 8000438:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800043a:	4b08      	ldr	r3, [pc, #32]	; (800045c <MX_USART2_UART_Init+0x58>)
 800043c:	2200      	movs	r2, #0
 800043e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000440:	4b06      	ldr	r3, [pc, #24]	; (800045c <MX_USART2_UART_Init+0x58>)
 8000442:	2200      	movs	r2, #0
 8000444:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000446:	4805      	ldr	r0, [pc, #20]	; (800045c <MX_USART2_UART_Init+0x58>)
 8000448:	f002 f9e8 	bl	800281c <HAL_UART_Init>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000452:	f000 f869 	bl	8000528 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000456:	bf00      	nop
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	20000114 	.word	0x20000114
 8000460:	40004400 	.word	0x40004400

08000464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b088      	sub	sp, #32
 8000468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046a:	f107 030c 	add.w	r3, r7, #12
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	60da      	str	r2, [r3, #12]
 8000478:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800047a:	4b28      	ldr	r3, [pc, #160]	; (800051c <MX_GPIO_Init+0xb8>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	4a27      	ldr	r2, [pc, #156]	; (800051c <MX_GPIO_Init+0xb8>)
 8000480:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000484:	6153      	str	r3, [r2, #20]
 8000486:	4b25      	ldr	r3, [pc, #148]	; (800051c <MX_GPIO_Init+0xb8>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800048e:	60bb      	str	r3, [r7, #8]
 8000490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000492:	4b22      	ldr	r3, [pc, #136]	; (800051c <MX_GPIO_Init+0xb8>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	4a21      	ldr	r2, [pc, #132]	; (800051c <MX_GPIO_Init+0xb8>)
 8000498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800049c:	6153      	str	r3, [r2, #20]
 800049e:	4b1f      	ldr	r3, [pc, #124]	; (800051c <MX_GPIO_Init+0xb8>)
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004aa:	4b1c      	ldr	r3, [pc, #112]	; (800051c <MX_GPIO_Init+0xb8>)
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	4a1b      	ldr	r2, [pc, #108]	; (800051c <MX_GPIO_Init+0xb8>)
 80004b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004b4:	6153      	str	r3, [r2, #20]
 80004b6:	4b19      	ldr	r3, [pc, #100]	; (800051c <MX_GPIO_Init+0xb8>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004be:	603b      	str	r3, [r7, #0]
 80004c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80004c2:	2200      	movs	r2, #0
 80004c4:	210c      	movs	r1, #12
 80004c6:	4816      	ldr	r0, [pc, #88]	; (8000520 <MX_GPIO_Init+0xbc>)
 80004c8:	f000 fcce 	bl	8000e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80004cc:	2200      	movs	r2, #0
 80004ce:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80004d2:	4814      	ldr	r0, [pc, #80]	; (8000524 <MX_GPIO_Init+0xc0>)
 80004d4:	f000 fcc8 	bl	8000e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004d8:	230c      	movs	r3, #12
 80004da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004dc:	2301      	movs	r3, #1
 80004de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e0:	2300      	movs	r3, #0
 80004e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e4:	2300      	movs	r3, #0
 80004e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004e8:	f107 030c 	add.w	r3, r7, #12
 80004ec:	4619      	mov	r1, r3
 80004ee:	480c      	ldr	r0, [pc, #48]	; (8000520 <MX_GPIO_Init+0xbc>)
 80004f0:	f000 fb30 	bl	8000b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80004f4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80004f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fa:	2301      	movs	r3, #1
 80004fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000502:	2300      	movs	r3, #0
 8000504:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000506:	f107 030c 	add.w	r3, r7, #12
 800050a:	4619      	mov	r1, r3
 800050c:	4805      	ldr	r0, [pc, #20]	; (8000524 <MX_GPIO_Init+0xc0>)
 800050e:	f000 fb21 	bl	8000b54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000512:	bf00      	nop
 8000514:	3720      	adds	r7, #32
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40021000 	.word	0x40021000
 8000520:	48000800 	.word	0x48000800
 8000524:	48000400 	.word	0x48000400

08000528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800052c:	b672      	cpsid	i
}
 800052e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000530:	e7fe      	b.n	8000530 <Error_Handler+0x8>
	...

08000534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <HAL_MspInit+0x44>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	4a0e      	ldr	r2, [pc, #56]	; (8000578 <HAL_MspInit+0x44>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6193      	str	r3, [r2, #24]
 8000546:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <HAL_MspInit+0x44>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000552:	4b09      	ldr	r3, [pc, #36]	; (8000578 <HAL_MspInit+0x44>)
 8000554:	69db      	ldr	r3, [r3, #28]
 8000556:	4a08      	ldr	r2, [pc, #32]	; (8000578 <HAL_MspInit+0x44>)
 8000558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055c:	61d3      	str	r3, [r2, #28]
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <HAL_MspInit+0x44>)
 8000560:	69db      	ldr	r3, [r3, #28]
 8000562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000566:	603b      	str	r3, [r7, #0]
 8000568:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	40021000 	.word	0x40021000

0800057c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08c      	sub	sp, #48	; 0x30
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000584:	f107 031c 	add.w	r3, r7, #28
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a36      	ldr	r2, [pc, #216]	; (8000674 <HAL_UART_MspInit+0xf8>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d130      	bne.n	8000600 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800059e:	4b36      	ldr	r3, [pc, #216]	; (8000678 <HAL_UART_MspInit+0xfc>)
 80005a0:	699b      	ldr	r3, [r3, #24]
 80005a2:	4a35      	ldr	r2, [pc, #212]	; (8000678 <HAL_UART_MspInit+0xfc>)
 80005a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a8:	6193      	str	r3, [r2, #24]
 80005aa:	4b33      	ldr	r3, [pc, #204]	; (8000678 <HAL_UART_MspInit+0xfc>)
 80005ac:	699b      	ldr	r3, [r3, #24]
 80005ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b2:	61bb      	str	r3, [r7, #24]
 80005b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b6:	4b30      	ldr	r3, [pc, #192]	; (8000678 <HAL_UART_MspInit+0xfc>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	4a2f      	ldr	r2, [pc, #188]	; (8000678 <HAL_UART_MspInit+0xfc>)
 80005bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005c0:	6153      	str	r3, [r2, #20]
 80005c2:	4b2d      	ldr	r3, [pc, #180]	; (8000678 <HAL_UART_MspInit+0xfc>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005ca:	617b      	str	r3, [r7, #20]
 80005cc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80005ce:	2330      	movs	r3, #48	; 0x30
 80005d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d2:	2302      	movs	r3, #2
 80005d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005da:	2303      	movs	r3, #3
 80005dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80005de:	2307      	movs	r3, #7
 80005e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	4619      	mov	r1, r3
 80005e8:	4824      	ldr	r0, [pc, #144]	; (800067c <HAL_UART_MspInit+0x100>)
 80005ea:	f000 fab3 	bl	8000b54 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2100      	movs	r1, #0
 80005f2:	2025      	movs	r0, #37	; 0x25
 80005f4:	f000 fa01 	bl	80009fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005f8:	2025      	movs	r0, #37	; 0x25
 80005fa:	f000 fa1a 	bl	8000a32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005fe:	e035      	b.n	800066c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a1e      	ldr	r2, [pc, #120]	; (8000680 <HAL_UART_MspInit+0x104>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d130      	bne.n	800066c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800060a:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <HAL_UART_MspInit+0xfc>)
 800060c:	69db      	ldr	r3, [r3, #28]
 800060e:	4a1a      	ldr	r2, [pc, #104]	; (8000678 <HAL_UART_MspInit+0xfc>)
 8000610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000614:	61d3      	str	r3, [r2, #28]
 8000616:	4b18      	ldr	r3, [pc, #96]	; (8000678 <HAL_UART_MspInit+0xfc>)
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b15      	ldr	r3, [pc, #84]	; (8000678 <HAL_UART_MspInit+0xfc>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	4a14      	ldr	r2, [pc, #80]	; (8000678 <HAL_UART_MspInit+0xfc>)
 8000628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800062c:	6153      	str	r3, [r2, #20]
 800062e:	4b12      	ldr	r3, [pc, #72]	; (8000678 <HAL_UART_MspInit+0xfc>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800063a:	230c      	movs	r3, #12
 800063c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063e:	2302      	movs	r3, #2
 8000640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000646:	2303      	movs	r3, #3
 8000648:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800064a:	2307      	movs	r3, #7
 800064c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064e:	f107 031c 	add.w	r3, r7, #28
 8000652:	4619      	mov	r1, r3
 8000654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000658:	f000 fa7c 	bl	8000b54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800065c:	2200      	movs	r2, #0
 800065e:	2100      	movs	r1, #0
 8000660:	2026      	movs	r0, #38	; 0x26
 8000662:	f000 f9ca 	bl	80009fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000666:	2026      	movs	r0, #38	; 0x26
 8000668:	f000 f9e3 	bl	8000a32 <HAL_NVIC_EnableIRQ>
}
 800066c:	bf00      	nop
 800066e:	3730      	adds	r7, #48	; 0x30
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40013800 	.word	0x40013800
 8000678:	40021000 	.word	0x40021000
 800067c:	48000800 	.word	0x48000800
 8000680:	40004400 	.word	0x40004400

08000684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000688:	e7fe      	b.n	8000688 <NMI_Handler+0x4>

0800068a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800068e:	e7fe      	b.n	800068e <HardFault_Handler+0x4>

08000690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000694:	e7fe      	b.n	8000694 <MemManage_Handler+0x4>

08000696 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800069a:	e7fe      	b.n	800069a <BusFault_Handler+0x4>

0800069c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <UsageFault_Handler+0x4>

080006a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d0:	f000 f898 	bl	8000804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006dc:	4802      	ldr	r0, [pc, #8]	; (80006e8 <USART1_IRQHandler+0x10>)
 80006de:	f002 f975 	bl	80029cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	2000008c 	.word	0x2000008c

080006ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80006f0:	4802      	ldr	r0, [pc, #8]	; (80006fc <USART2_IRQHandler+0x10>)
 80006f2:	f002 f96b 	bl	80029cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000114 	.word	0x20000114

08000700 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <SystemInit+0x20>)
 8000706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800070a:	4a05      	ldr	r2, [pc, #20]	; (8000720 <SystemInit+0x20>)
 800070c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000710:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000724:	f8df d034 	ldr.w	sp, [pc, #52]	; 800075c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000728:	f7ff ffea 	bl	8000700 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800072c:	480c      	ldr	r0, [pc, #48]	; (8000760 <LoopForever+0x6>)
  ldr r1, =_edata
 800072e:	490d      	ldr	r1, [pc, #52]	; (8000764 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000730:	4a0d      	ldr	r2, [pc, #52]	; (8000768 <LoopForever+0xe>)
  movs r3, #0
 8000732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000734:	e002      	b.n	800073c <LoopCopyDataInit>

08000736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800073a:	3304      	adds	r3, #4

0800073c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800073c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800073e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000740:	d3f9      	bcc.n	8000736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000742:	4a0a      	ldr	r2, [pc, #40]	; (800076c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000744:	4c0a      	ldr	r4, [pc, #40]	; (8000770 <LoopForever+0x16>)
  movs r3, #0
 8000746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000748:	e001      	b.n	800074e <LoopFillZerobss>

0800074a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800074a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800074c:	3204      	adds	r2, #4

0800074e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800074e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000750:	d3fb      	bcc.n	800074a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000752:	f003 fb3d 	bl	8003dd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000756:	f7ff fd51 	bl	80001fc <main>

0800075a <LoopForever>:

LoopForever:
    b LoopForever
 800075a:	e7fe      	b.n	800075a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800075c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000764:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000768:	08003e70 	.word	0x08003e70
  ldr r2, =_sbss
 800076c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000770:	200001a4 	.word	0x200001a4

08000774 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000774:	e7fe      	b.n	8000774 <ADC1_2_IRQHandler>
	...

08000778 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <HAL_Init+0x28>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <HAL_Init+0x28>)
 8000782:	f043 0310 	orr.w	r3, r3, #16
 8000786:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000788:	2003      	movs	r0, #3
 800078a:	f000 f92b 	bl	80009e4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800078e:	200f      	movs	r0, #15
 8000790:	f000 f808 	bl	80007a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000794:	f7ff fece 	bl	8000534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000798:	2300      	movs	r3, #0
}
 800079a:	4618      	mov	r0, r3
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40022000 	.word	0x40022000

080007a4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <HAL_InitTick+0x54>)
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <HAL_InitTick+0x58>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	4619      	mov	r1, r3
 80007b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80007be:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 f943 	bl	8000a4e <HAL_SYSTICK_Config>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
 80007d0:	e00e      	b.n	80007f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2b0f      	cmp	r3, #15
 80007d6:	d80a      	bhi.n	80007ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d8:	2200      	movs	r2, #0
 80007da:	6879      	ldr	r1, [r7, #4]
 80007dc:	f04f 30ff 	mov.w	r0, #4294967295
 80007e0:	f000 f90b 	bl	80009fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007e4:	4a06      	ldr	r2, [pc, #24]	; (8000800 <HAL_InitTick+0x5c>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007ea:	2300      	movs	r3, #0
 80007ec:	e000      	b.n	80007f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000064 	.word	0x20000064
 80007fc:	2000006c 	.word	0x2000006c
 8000800:	20000068 	.word	0x20000068

08000804 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <HAL_IncTick+0x20>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	461a      	mov	r2, r3
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <HAL_IncTick+0x24>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4413      	add	r3, r2
 8000814:	4a04      	ldr	r2, [pc, #16]	; (8000828 <HAL_IncTick+0x24>)
 8000816:	6013      	str	r3, [r2, #0]
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	2000006c 	.word	0x2000006c
 8000828:	200001a0 	.word	0x200001a0

0800082c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000830:	4b03      	ldr	r3, [pc, #12]	; (8000840 <HAL_GetTick+0x14>)
 8000832:	681b      	ldr	r3, [r3, #0]
}
 8000834:	4618      	mov	r0, r3
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	200001a0 	.word	0x200001a0

08000844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <__NVIC_SetPriorityGrouping+0x44>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800085a:	68ba      	ldr	r2, [r7, #8]
 800085c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000860:	4013      	ands	r3, r2
 8000862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800086c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000876:	4a04      	ldr	r2, [pc, #16]	; (8000888 <__NVIC_SetPriorityGrouping+0x44>)
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	60d3      	str	r3, [r2, #12]
}
 800087c:	bf00      	nop
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000890:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	0a1b      	lsrs	r3, r3, #8
 8000896:	f003 0307 	and.w	r3, r3, #7
}
 800089a:	4618      	mov	r0, r3
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	db0b      	blt.n	80008d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	f003 021f 	and.w	r2, r3, #31
 80008c0:	4907      	ldr	r1, [pc, #28]	; (80008e0 <__NVIC_EnableIRQ+0x38>)
 80008c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c6:	095b      	lsrs	r3, r3, #5
 80008c8:	2001      	movs	r0, #1
 80008ca:	fa00 f202 	lsl.w	r2, r0, r2
 80008ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	e000e100 	.word	0xe000e100

080008e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	6039      	str	r1, [r7, #0]
 80008ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	db0a      	blt.n	800090e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	490c      	ldr	r1, [pc, #48]	; (8000930 <__NVIC_SetPriority+0x4c>)
 80008fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000902:	0112      	lsls	r2, r2, #4
 8000904:	b2d2      	uxtb	r2, r2
 8000906:	440b      	add	r3, r1
 8000908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800090c:	e00a      	b.n	8000924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	b2da      	uxtb	r2, r3
 8000912:	4908      	ldr	r1, [pc, #32]	; (8000934 <__NVIC_SetPriority+0x50>)
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	f003 030f 	and.w	r3, r3, #15
 800091a:	3b04      	subs	r3, #4
 800091c:	0112      	lsls	r2, r2, #4
 800091e:	b2d2      	uxtb	r2, r2
 8000920:	440b      	add	r3, r1
 8000922:	761a      	strb	r2, [r3, #24]
}
 8000924:	bf00      	nop
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	e000e100 	.word	0xe000e100
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000938:	b480      	push	{r7}
 800093a:	b089      	sub	sp, #36	; 0x24
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	f003 0307 	and.w	r3, r3, #7
 800094a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800094c:	69fb      	ldr	r3, [r7, #28]
 800094e:	f1c3 0307 	rsb	r3, r3, #7
 8000952:	2b04      	cmp	r3, #4
 8000954:	bf28      	it	cs
 8000956:	2304      	movcs	r3, #4
 8000958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	3304      	adds	r3, #4
 800095e:	2b06      	cmp	r3, #6
 8000960:	d902      	bls.n	8000968 <NVIC_EncodePriority+0x30>
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	3b03      	subs	r3, #3
 8000966:	e000      	b.n	800096a <NVIC_EncodePriority+0x32>
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800096c:	f04f 32ff 	mov.w	r2, #4294967295
 8000970:	69bb      	ldr	r3, [r7, #24]
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	43da      	mvns	r2, r3
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	401a      	ands	r2, r3
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000980:	f04f 31ff 	mov.w	r1, #4294967295
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	fa01 f303 	lsl.w	r3, r1, r3
 800098a:	43d9      	mvns	r1, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000990:	4313      	orrs	r3, r2
         );
}
 8000992:	4618      	mov	r0, r3
 8000994:	3724      	adds	r7, #36	; 0x24
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
	...

080009a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009b0:	d301      	bcc.n	80009b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009b2:	2301      	movs	r3, #1
 80009b4:	e00f      	b.n	80009d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009b6:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <SysTick_Config+0x40>)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3b01      	subs	r3, #1
 80009bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009be:	210f      	movs	r1, #15
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295
 80009c4:	f7ff ff8e 	bl	80008e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <SysTick_Config+0x40>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ce:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <SysTick_Config+0x40>)
 80009d0:	2207      	movs	r2, #7
 80009d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	e000e010 	.word	0xe000e010

080009e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f7ff ff29 	bl	8000844 <__NVIC_SetPriorityGrouping>
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b086      	sub	sp, #24
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	4603      	mov	r3, r0
 8000a02:	60b9      	str	r1, [r7, #8]
 8000a04:	607a      	str	r2, [r7, #4]
 8000a06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a0c:	f7ff ff3e 	bl	800088c <__NVIC_GetPriorityGrouping>
 8000a10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	68b9      	ldr	r1, [r7, #8]
 8000a16:	6978      	ldr	r0, [r7, #20]
 8000a18:	f7ff ff8e 	bl	8000938 <NVIC_EncodePriority>
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a22:	4611      	mov	r1, r2
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff ff5d 	bl	80008e4 <__NVIC_SetPriority>
}
 8000a2a:	bf00      	nop
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b082      	sub	sp, #8
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	4603      	mov	r3, r0
 8000a3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff ff31 	bl	80008a8 <__NVIC_EnableIRQ>
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b082      	sub	sp, #8
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f7ff ffa2 	bl	80009a0 <SysTick_Config>
 8000a5c:	4603      	mov	r3, r0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a74:	2b02      	cmp	r3, #2
 8000a76:	d008      	beq.n	8000a8a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2204      	movs	r2, #4
 8000a7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2200      	movs	r2, #0
 8000a82:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e020      	b.n	8000acc <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f022 020e 	bic.w	r2, r2, #14
 8000a98:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f022 0201 	bic.w	r2, r2, #1
 8000aa8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2201      	movs	r2, #1
 8000abe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000aca:	2300      	movs	r3, #0
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000aea:	2b02      	cmp	r3, #2
 8000aec:	d005      	beq.n	8000afa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2204      	movs	r2, #4
 8000af2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000af4:	2301      	movs	r3, #1
 8000af6:	73fb      	strb	r3, [r7, #15]
 8000af8:	e027      	b.n	8000b4a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f022 020e 	bic.w	r2, r2, #14
 8000b08:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f022 0201 	bic.w	r2, r2, #1
 8000b18:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b22:	2101      	movs	r1, #1
 8000b24:	fa01 f202 	lsl.w	r2, r1, r2
 8000b28:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2200      	movs	r2, #0
 8000b36:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d003      	beq.n	8000b4a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	4798      	blx	r3
    } 
  }
  return status;
 8000b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b087      	sub	sp, #28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b62:	e160      	b.n	8000e26 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	2101      	movs	r1, #1
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b70:	4013      	ands	r3, r2
 8000b72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f000 8152 	beq.w	8000e20 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f003 0303 	and.w	r3, r3, #3
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d005      	beq.n	8000b94 <HAL_GPIO_Init+0x40>
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f003 0303 	and.w	r3, r3, #3
 8000b90:	2b02      	cmp	r3, #2
 8000b92:	d130      	bne.n	8000bf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	2203      	movs	r2, #3
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	68da      	ldr	r2, [r3, #12]
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bca:	2201      	movs	r2, #1
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	091b      	lsrs	r3, r3, #4
 8000be0:	f003 0201 	and.w	r2, r3, #1
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f003 0303 	and.w	r3, r3, #3
 8000bfe:	2b03      	cmp	r3, #3
 8000c00:	d017      	beq.n	8000c32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43db      	mvns	r3, r3
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	4013      	ands	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	689a      	ldr	r2, [r3, #8]
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f003 0303 	and.w	r3, r3, #3
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d123      	bne.n	8000c86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	08da      	lsrs	r2, r3, #3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	3208      	adds	r2, #8
 8000c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	220f      	movs	r2, #15
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	691a      	ldr	r2, [r3, #16]
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	f003 0307 	and.w	r3, r3, #7
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	08da      	lsrs	r2, r3, #3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3208      	adds	r2, #8
 8000c80:	6939      	ldr	r1, [r7, #16]
 8000c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	2203      	movs	r2, #3
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43db      	mvns	r3, r3
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f003 0203 	and.w	r2, r3, #3
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f000 80ac 	beq.w	8000e20 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc8:	4b5e      	ldr	r3, [pc, #376]	; (8000e44 <HAL_GPIO_Init+0x2f0>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	4a5d      	ldr	r2, [pc, #372]	; (8000e44 <HAL_GPIO_Init+0x2f0>)
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	6193      	str	r3, [r2, #24]
 8000cd4:	4b5b      	ldr	r3, [pc, #364]	; (8000e44 <HAL_GPIO_Init+0x2f0>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ce0:	4a59      	ldr	r2, [pc, #356]	; (8000e48 <HAL_GPIO_Init+0x2f4>)
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	089b      	lsrs	r3, r3, #2
 8000ce6:	3302      	adds	r3, #2
 8000ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	f003 0303 	and.w	r3, r3, #3
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	220f      	movs	r2, #15
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4013      	ands	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d0a:	d025      	beq.n	8000d58 <HAL_GPIO_Init+0x204>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a4f      	ldr	r2, [pc, #316]	; (8000e4c <HAL_GPIO_Init+0x2f8>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d01f      	beq.n	8000d54 <HAL_GPIO_Init+0x200>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a4e      	ldr	r2, [pc, #312]	; (8000e50 <HAL_GPIO_Init+0x2fc>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d019      	beq.n	8000d50 <HAL_GPIO_Init+0x1fc>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a4d      	ldr	r2, [pc, #308]	; (8000e54 <HAL_GPIO_Init+0x300>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d013      	beq.n	8000d4c <HAL_GPIO_Init+0x1f8>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a4c      	ldr	r2, [pc, #304]	; (8000e58 <HAL_GPIO_Init+0x304>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d00d      	beq.n	8000d48 <HAL_GPIO_Init+0x1f4>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a4b      	ldr	r2, [pc, #300]	; (8000e5c <HAL_GPIO_Init+0x308>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d007      	beq.n	8000d44 <HAL_GPIO_Init+0x1f0>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a4a      	ldr	r2, [pc, #296]	; (8000e60 <HAL_GPIO_Init+0x30c>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d101      	bne.n	8000d40 <HAL_GPIO_Init+0x1ec>
 8000d3c:	2306      	movs	r3, #6
 8000d3e:	e00c      	b.n	8000d5a <HAL_GPIO_Init+0x206>
 8000d40:	2307      	movs	r3, #7
 8000d42:	e00a      	b.n	8000d5a <HAL_GPIO_Init+0x206>
 8000d44:	2305      	movs	r3, #5
 8000d46:	e008      	b.n	8000d5a <HAL_GPIO_Init+0x206>
 8000d48:	2304      	movs	r3, #4
 8000d4a:	e006      	b.n	8000d5a <HAL_GPIO_Init+0x206>
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	e004      	b.n	8000d5a <HAL_GPIO_Init+0x206>
 8000d50:	2302      	movs	r3, #2
 8000d52:	e002      	b.n	8000d5a <HAL_GPIO_Init+0x206>
 8000d54:	2301      	movs	r3, #1
 8000d56:	e000      	b.n	8000d5a <HAL_GPIO_Init+0x206>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	f002 0203 	and.w	r2, r2, #3
 8000d60:	0092      	lsls	r2, r2, #2
 8000d62:	4093      	lsls	r3, r2
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d6a:	4937      	ldr	r1, [pc, #220]	; (8000e48 <HAL_GPIO_Init+0x2f4>)
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	089b      	lsrs	r3, r3, #2
 8000d70:	3302      	adds	r3, #2
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d78:	4b3a      	ldr	r3, [pc, #232]	; (8000e64 <HAL_GPIO_Init+0x310>)
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	43db      	mvns	r3, r3
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d003      	beq.n	8000d9c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d9c:	4a31      	ldr	r2, [pc, #196]	; (8000e64 <HAL_GPIO_Init+0x310>)
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000da2:	4b30      	ldr	r3, [pc, #192]	; (8000e64 <HAL_GPIO_Init+0x310>)
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	43db      	mvns	r3, r3
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	4013      	ands	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000dc6:	4a27      	ldr	r2, [pc, #156]	; (8000e64 <HAL_GPIO_Init+0x310>)
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dcc:	4b25      	ldr	r3, [pc, #148]	; (8000e64 <HAL_GPIO_Init+0x310>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d003      	beq.n	8000df0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000df0:	4a1c      	ldr	r2, [pc, #112]	; (8000e64 <HAL_GPIO_Init+0x310>)
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000df6:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <HAL_GPIO_Init+0x310>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e1a:	4a12      	ldr	r2, [pc, #72]	; (8000e64 <HAL_GPIO_Init+0x310>)
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	3301      	adds	r3, #1
 8000e24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f47f ae97 	bne.w	8000b64 <HAL_GPIO_Init+0x10>
  }
}
 8000e36:	bf00      	nop
 8000e38:	bf00      	nop
 8000e3a:	371c      	adds	r7, #28
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40010000 	.word	0x40010000
 8000e4c:	48000400 	.word	0x48000400
 8000e50:	48000800 	.word	0x48000800
 8000e54:	48000c00 	.word	0x48000c00
 8000e58:	48001000 	.word	0x48001000
 8000e5c:	48001400 	.word	0x48001400
 8000e60:	48001800 	.word	0x48001800
 8000e64:	40010400 	.word	0x40010400

08000e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	807b      	strh	r3, [r7, #2]
 8000e74:	4613      	mov	r3, r2
 8000e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e78:	787b      	ldrb	r3, [r7, #1]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e7e:	887a      	ldrh	r2, [r7, #2]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e84:	e002      	b.n	8000e8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e86:	887a      	ldrh	r2, [r7, #2]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	695b      	ldr	r3, [r3, #20]
 8000ea8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000eaa:	887a      	ldrh	r2, [r7, #2]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	041a      	lsls	r2, r3, #16
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	43d9      	mvns	r1, r3
 8000eb6:	887b      	ldrh	r3, [r7, #2]
 8000eb8:	400b      	ands	r3, r1
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	619a      	str	r2, [r3, #24]
}
 8000ec0:	bf00      	nop
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ed8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000edc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ede:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ee2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d102      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	f001 b83a 	b.w	8001f66 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ef2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ef6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	f000 816f 	beq.w	80011e6 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f08:	4bb5      	ldr	r3, [pc, #724]	; (80011e0 <HAL_RCC_OscConfig+0x314>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 030c 	and.w	r3, r3, #12
 8000f10:	2b04      	cmp	r3, #4
 8000f12:	d00c      	beq.n	8000f2e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f14:	4bb2      	ldr	r3, [pc, #712]	; (80011e0 <HAL_RCC_OscConfig+0x314>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 030c 	and.w	r3, r3, #12
 8000f1c:	2b08      	cmp	r3, #8
 8000f1e:	d15c      	bne.n	8000fda <HAL_RCC_OscConfig+0x10e>
 8000f20:	4baf      	ldr	r3, [pc, #700]	; (80011e0 <HAL_RCC_OscConfig+0x314>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f2c:	d155      	bne.n	8000fda <HAL_RCC_OscConfig+0x10e>
 8000f2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f32:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f36:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000f3a:	fa93 f3a3 	rbit	r3, r3
 8000f3e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f42:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f46:	fab3 f383 	clz	r3, r3
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	095b      	lsrs	r3, r3, #5
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d102      	bne.n	8000f60 <HAL_RCC_OscConfig+0x94>
 8000f5a:	4ba1      	ldr	r3, [pc, #644]	; (80011e0 <HAL_RCC_OscConfig+0x314>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	e015      	b.n	8000f8c <HAL_RCC_OscConfig+0xc0>
 8000f60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f64:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f68:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000f6c:	fa93 f3a3 	rbit	r3, r3
 8000f70:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000f74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f78:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000f7c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000f80:	fa93 f3a3 	rbit	r3, r3
 8000f84:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000f88:	4b95      	ldr	r3, [pc, #596]	; (80011e0 <HAL_RCC_OscConfig+0x314>)
 8000f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f90:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000f94:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000f98:	fa92 f2a2 	rbit	r2, r2
 8000f9c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000fa0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000fa4:	fab2 f282 	clz	r2, r2
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	f042 0220 	orr.w	r2, r2, #32
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	f002 021f 	and.w	r2, r2, #31
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fba:	4013      	ands	r3, r2
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f000 8111 	beq.w	80011e4 <HAL_RCC_OscConfig+0x318>
 8000fc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fc6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f040 8108 	bne.w	80011e4 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	f000 bfc6 	b.w	8001f66 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fde:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fea:	d106      	bne.n	8000ffa <HAL_RCC_OscConfig+0x12e>
 8000fec:	4b7c      	ldr	r3, [pc, #496]	; (80011e0 <HAL_RCC_OscConfig+0x314>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a7b      	ldr	r2, [pc, #492]	; (80011e0 <HAL_RCC_OscConfig+0x314>)
 8000ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	e036      	b.n	8001068 <HAL_RCC_OscConfig+0x19c>
 8000ffa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ffe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d10c      	bne.n	8001024 <HAL_RCC_OscConfig+0x158>
 800100a:	4b75      	ldr	r3, [pc, #468]	; (80011e0 <HAL_RCC_OscConfig+0x314>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a74      	ldr	r2, [pc, #464]	; (80011e0 <HAL_RCC_OscConfig+0x314>)
 8001010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001014:	6013      	str	r3, [r2, #0]
 8001016:	4b72      	ldr	r3, [pc, #456]	; (80011e0 <HAL_RCC_OscConfig+0x314>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a71      	ldr	r2, [pc, #452]	; (80011e0 <HAL_RCC_OscConfig+0x314>)
 800101c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	e021      	b.n	8001068 <HAL_RCC_OscConfig+0x19c>
 8001024:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001028:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001034:	d10c      	bne.n	8001050 <HAL_RCC_OscConfig+0x184>
 8001036:	4b6a      	ldr	r3, [pc, #424]	; (80011e0 <HAL_RCC_OscConfig+0x314>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a69      	ldr	r2, [pc, #420]	; (80011e0 <HAL_RCC_OscConfig+0x314>)
 800103c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001040:	6013      	str	r3, [r2, #0]
 8001042:	4b67      	ldr	r3, [pc, #412]	; (80011e0 <HAL_RCC_OscConfig+0x314>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a66      	ldr	r2, [pc, #408]	; (80011e0 <HAL_RCC_OscConfig+0x314>)
 8001048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800104c:	6013      	str	r3, [r2, #0]
 800104e:	e00b      	b.n	8001068 <HAL_RCC_OscConfig+0x19c>
 8001050:	4b63      	ldr	r3, [pc, #396]	; (80011e0 <HAL_RCC_OscConfig+0x314>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a62      	ldr	r2, [pc, #392]	; (80011e0 <HAL_RCC_OscConfig+0x314>)
 8001056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	4b60      	ldr	r3, [pc, #384]	; (80011e0 <HAL_RCC_OscConfig+0x314>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a5f      	ldr	r2, [pc, #380]	; (80011e0 <HAL_RCC_OscConfig+0x314>)
 8001062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001066:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001068:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800106c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d059      	beq.n	800112c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001078:	f7ff fbd8 	bl	800082c <HAL_GetTick>
 800107c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001080:	e00a      	b.n	8001098 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001082:	f7ff fbd3 	bl	800082c <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b64      	cmp	r3, #100	; 0x64
 8001090:	d902      	bls.n	8001098 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	f000 bf67 	b.w	8001f66 <HAL_RCC_OscConfig+0x109a>
 8001098:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800109c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80010a4:	fa93 f3a3 	rbit	r3, r3
 80010a8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80010ac:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b0:	fab3 f383 	clz	r3, r3
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	095b      	lsrs	r3, r3, #5
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d102      	bne.n	80010ca <HAL_RCC_OscConfig+0x1fe>
 80010c4:	4b46      	ldr	r3, [pc, #280]	; (80011e0 <HAL_RCC_OscConfig+0x314>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	e015      	b.n	80010f6 <HAL_RCC_OscConfig+0x22a>
 80010ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ce:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80010d6:	fa93 f3a3 	rbit	r3, r3
 80010da:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80010de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010e2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80010e6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80010ea:	fa93 f3a3 	rbit	r3, r3
 80010ee:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80010f2:	4b3b      	ldr	r3, [pc, #236]	; (80011e0 <HAL_RCC_OscConfig+0x314>)
 80010f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010fa:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80010fe:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001102:	fa92 f2a2 	rbit	r2, r2
 8001106:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800110a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800110e:	fab2 f282 	clz	r2, r2
 8001112:	b2d2      	uxtb	r2, r2
 8001114:	f042 0220 	orr.w	r2, r2, #32
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	f002 021f 	and.w	r2, r2, #31
 800111e:	2101      	movs	r1, #1
 8001120:	fa01 f202 	lsl.w	r2, r1, r2
 8001124:	4013      	ands	r3, r2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d0ab      	beq.n	8001082 <HAL_RCC_OscConfig+0x1b6>
 800112a:	e05c      	b.n	80011e6 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112c:	f7ff fb7e 	bl	800082c <HAL_GetTick>
 8001130:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001134:	e00a      	b.n	800114c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001136:	f7ff fb79 	bl	800082c <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b64      	cmp	r3, #100	; 0x64
 8001144:	d902      	bls.n	800114c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	f000 bf0d 	b.w	8001f66 <HAL_RCC_OscConfig+0x109a>
 800114c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001150:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001154:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001158:	fa93 f3a3 	rbit	r3, r3
 800115c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001160:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001164:	fab3 f383 	clz	r3, r3
 8001168:	b2db      	uxtb	r3, r3
 800116a:	095b      	lsrs	r3, r3, #5
 800116c:	b2db      	uxtb	r3, r3
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b01      	cmp	r3, #1
 8001176:	d102      	bne.n	800117e <HAL_RCC_OscConfig+0x2b2>
 8001178:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <HAL_RCC_OscConfig+0x314>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	e015      	b.n	80011aa <HAL_RCC_OscConfig+0x2de>
 800117e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001182:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001186:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800118a:	fa93 f3a3 	rbit	r3, r3
 800118e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001192:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001196:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800119a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800119e:	fa93 f3a3 	rbit	r3, r3
 80011a2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <HAL_RCC_OscConfig+0x314>)
 80011a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011ae:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80011b2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80011b6:	fa92 f2a2 	rbit	r2, r2
 80011ba:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80011be:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80011c2:	fab2 f282 	clz	r2, r2
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	f042 0220 	orr.w	r2, r2, #32
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	f002 021f 	and.w	r2, r2, #31
 80011d2:	2101      	movs	r1, #1
 80011d4:	fa01 f202 	lsl.w	r2, r1, r2
 80011d8:	4013      	ands	r3, r2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1ab      	bne.n	8001136 <HAL_RCC_OscConfig+0x26a>
 80011de:	e002      	b.n	80011e6 <HAL_RCC_OscConfig+0x31a>
 80011e0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 817f 	beq.w	80014fa <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011fc:	4ba7      	ldr	r3, [pc, #668]	; (800149c <HAL_RCC_OscConfig+0x5d0>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 030c 	and.w	r3, r3, #12
 8001204:	2b00      	cmp	r3, #0
 8001206:	d00c      	beq.n	8001222 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001208:	4ba4      	ldr	r3, [pc, #656]	; (800149c <HAL_RCC_OscConfig+0x5d0>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 030c 	and.w	r3, r3, #12
 8001210:	2b08      	cmp	r3, #8
 8001212:	d173      	bne.n	80012fc <HAL_RCC_OscConfig+0x430>
 8001214:	4ba1      	ldr	r3, [pc, #644]	; (800149c <HAL_RCC_OscConfig+0x5d0>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800121c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001220:	d16c      	bne.n	80012fc <HAL_RCC_OscConfig+0x430>
 8001222:	2302      	movs	r3, #2
 8001224:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001228:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800122c:	fa93 f3a3 	rbit	r3, r3
 8001230:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001234:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001238:	fab3 f383 	clz	r3, r3
 800123c:	b2db      	uxtb	r3, r3
 800123e:	095b      	lsrs	r3, r3, #5
 8001240:	b2db      	uxtb	r3, r3
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b01      	cmp	r3, #1
 800124a:	d102      	bne.n	8001252 <HAL_RCC_OscConfig+0x386>
 800124c:	4b93      	ldr	r3, [pc, #588]	; (800149c <HAL_RCC_OscConfig+0x5d0>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	e013      	b.n	800127a <HAL_RCC_OscConfig+0x3ae>
 8001252:	2302      	movs	r3, #2
 8001254:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001258:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800125c:	fa93 f3a3 	rbit	r3, r3
 8001260:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001264:	2302      	movs	r3, #2
 8001266:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800126a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800126e:	fa93 f3a3 	rbit	r3, r3
 8001272:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001276:	4b89      	ldr	r3, [pc, #548]	; (800149c <HAL_RCC_OscConfig+0x5d0>)
 8001278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127a:	2202      	movs	r2, #2
 800127c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001280:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001284:	fa92 f2a2 	rbit	r2, r2
 8001288:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800128c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001290:	fab2 f282 	clz	r2, r2
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	f042 0220 	orr.w	r2, r2, #32
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	f002 021f 	and.w	r2, r2, #31
 80012a0:	2101      	movs	r1, #1
 80012a2:	fa01 f202 	lsl.w	r2, r1, r2
 80012a6:	4013      	ands	r3, r2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d00a      	beq.n	80012c2 <HAL_RCC_OscConfig+0x3f6>
 80012ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d002      	beq.n	80012c2 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	f000 be52 	b.w	8001f66 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c2:	4b76      	ldr	r3, [pc, #472]	; (800149c <HAL_RCC_OscConfig+0x5d0>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	21f8      	movs	r1, #248	; 0xf8
 80012d8:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012dc:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80012e0:	fa91 f1a1 	rbit	r1, r1
 80012e4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80012e8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80012ec:	fab1 f181 	clz	r1, r1
 80012f0:	b2c9      	uxtb	r1, r1
 80012f2:	408b      	lsls	r3, r1
 80012f4:	4969      	ldr	r1, [pc, #420]	; (800149c <HAL_RCC_OscConfig+0x5d0>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012fa:	e0fe      	b.n	80014fa <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001300:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	2b00      	cmp	r3, #0
 800130a:	f000 8088 	beq.w	800141e <HAL_RCC_OscConfig+0x552>
 800130e:	2301      	movs	r3, #1
 8001310:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001314:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001318:	fa93 f3a3 	rbit	r3, r3
 800131c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001320:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001324:	fab3 f383 	clz	r3, r3
 8001328:	b2db      	uxtb	r3, r3
 800132a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800132e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	461a      	mov	r2, r3
 8001336:	2301      	movs	r3, #1
 8001338:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133a:	f7ff fa77 	bl	800082c <HAL_GetTick>
 800133e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001342:	e00a      	b.n	800135a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001344:	f7ff fa72 	bl	800082c <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d902      	bls.n	800135a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	f000 be06 	b.w	8001f66 <HAL_RCC_OscConfig+0x109a>
 800135a:	2302      	movs	r3, #2
 800135c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001360:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001364:	fa93 f3a3 	rbit	r3, r3
 8001368:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800136c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001370:	fab3 f383 	clz	r3, r3
 8001374:	b2db      	uxtb	r3, r3
 8001376:	095b      	lsrs	r3, r3, #5
 8001378:	b2db      	uxtb	r3, r3
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b01      	cmp	r3, #1
 8001382:	d102      	bne.n	800138a <HAL_RCC_OscConfig+0x4be>
 8001384:	4b45      	ldr	r3, [pc, #276]	; (800149c <HAL_RCC_OscConfig+0x5d0>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	e013      	b.n	80013b2 <HAL_RCC_OscConfig+0x4e6>
 800138a:	2302      	movs	r3, #2
 800138c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001390:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001394:	fa93 f3a3 	rbit	r3, r3
 8001398:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800139c:	2302      	movs	r3, #2
 800139e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80013a2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80013a6:	fa93 f3a3 	rbit	r3, r3
 80013aa:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80013ae:	4b3b      	ldr	r3, [pc, #236]	; (800149c <HAL_RCC_OscConfig+0x5d0>)
 80013b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b2:	2202      	movs	r2, #2
 80013b4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80013b8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80013bc:	fa92 f2a2 	rbit	r2, r2
 80013c0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80013c4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80013c8:	fab2 f282 	clz	r2, r2
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	f042 0220 	orr.w	r2, r2, #32
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	f002 021f 	and.w	r2, r2, #31
 80013d8:	2101      	movs	r1, #1
 80013da:	fa01 f202 	lsl.w	r2, r1, r2
 80013de:	4013      	ands	r3, r2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0af      	beq.n	8001344 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e4:	4b2d      	ldr	r3, [pc, #180]	; (800149c <HAL_RCC_OscConfig+0x5d0>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	21f8      	movs	r1, #248	; 0xf8
 80013fa:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fe:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001402:	fa91 f1a1 	rbit	r1, r1
 8001406:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800140a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800140e:	fab1 f181 	clz	r1, r1
 8001412:	b2c9      	uxtb	r1, r1
 8001414:	408b      	lsls	r3, r1
 8001416:	4921      	ldr	r1, [pc, #132]	; (800149c <HAL_RCC_OscConfig+0x5d0>)
 8001418:	4313      	orrs	r3, r2
 800141a:	600b      	str	r3, [r1, #0]
 800141c:	e06d      	b.n	80014fa <HAL_RCC_OscConfig+0x62e>
 800141e:	2301      	movs	r3, #1
 8001420:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001424:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001428:	fa93 f3a3 	rbit	r3, r3
 800142c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001430:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001434:	fab3 f383 	clz	r3, r3
 8001438:	b2db      	uxtb	r3, r3
 800143a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800143e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	461a      	mov	r2, r3
 8001446:	2300      	movs	r3, #0
 8001448:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144a:	f7ff f9ef 	bl	800082c <HAL_GetTick>
 800144e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001452:	e00a      	b.n	800146a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001454:	f7ff f9ea 	bl	800082c <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d902      	bls.n	800146a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	f000 bd7e 	b.w	8001f66 <HAL_RCC_OscConfig+0x109a>
 800146a:	2302      	movs	r3, #2
 800146c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001470:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001474:	fa93 f3a3 	rbit	r3, r3
 8001478:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800147c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001480:	fab3 f383 	clz	r3, r3
 8001484:	b2db      	uxtb	r3, r3
 8001486:	095b      	lsrs	r3, r3, #5
 8001488:	b2db      	uxtb	r3, r3
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b01      	cmp	r3, #1
 8001492:	d105      	bne.n	80014a0 <HAL_RCC_OscConfig+0x5d4>
 8001494:	4b01      	ldr	r3, [pc, #4]	; (800149c <HAL_RCC_OscConfig+0x5d0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	e016      	b.n	80014c8 <HAL_RCC_OscConfig+0x5fc>
 800149a:	bf00      	nop
 800149c:	40021000 	.word	0x40021000
 80014a0:	2302      	movs	r3, #2
 80014a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80014aa:	fa93 f3a3 	rbit	r3, r3
 80014ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80014b2:	2302      	movs	r3, #2
 80014b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80014b8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80014bc:	fa93 f3a3 	rbit	r3, r3
 80014c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80014c4:	4bbf      	ldr	r3, [pc, #764]	; (80017c4 <HAL_RCC_OscConfig+0x8f8>)
 80014c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c8:	2202      	movs	r2, #2
 80014ca:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80014ce:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80014d2:	fa92 f2a2 	rbit	r2, r2
 80014d6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80014da:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80014de:	fab2 f282 	clz	r2, r2
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	f042 0220 	orr.w	r2, r2, #32
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	f002 021f 	and.w	r2, r2, #31
 80014ee:	2101      	movs	r1, #1
 80014f0:	fa01 f202 	lsl.w	r2, r1, r2
 80014f4:	4013      	ands	r3, r2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1ac      	bne.n	8001454 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014fe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0308 	and.w	r3, r3, #8
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 8113 	beq.w	8001736 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001510:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001514:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d07c      	beq.n	800161a <HAL_RCC_OscConfig+0x74e>
 8001520:	2301      	movs	r3, #1
 8001522:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800152a:	fa93 f3a3 	rbit	r3, r3
 800152e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001532:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001536:	fab3 f383 	clz	r3, r3
 800153a:	b2db      	uxtb	r3, r3
 800153c:	461a      	mov	r2, r3
 800153e:	4ba2      	ldr	r3, [pc, #648]	; (80017c8 <HAL_RCC_OscConfig+0x8fc>)
 8001540:	4413      	add	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	461a      	mov	r2, r3
 8001546:	2301      	movs	r3, #1
 8001548:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800154a:	f7ff f96f 	bl	800082c <HAL_GetTick>
 800154e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001552:	e00a      	b.n	800156a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001554:	f7ff f96a 	bl	800082c <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d902      	bls.n	800156a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	f000 bcfe 	b.w	8001f66 <HAL_RCC_OscConfig+0x109a>
 800156a:	2302      	movs	r3, #2
 800156c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001570:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001574:	fa93 f2a3 	rbit	r2, r3
 8001578:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800157c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001586:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800158a:	2202      	movs	r2, #2
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001592:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	fa93 f2a3 	rbit	r2, r3
 800159c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015ae:	2202      	movs	r2, #2
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	fa93 f2a3 	rbit	r2, r3
 80015c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015c4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80015c8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ca:	4b7e      	ldr	r3, [pc, #504]	; (80017c4 <HAL_RCC_OscConfig+0x8f8>)
 80015cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015d2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015d6:	2102      	movs	r1, #2
 80015d8:	6019      	str	r1, [r3, #0]
 80015da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015de:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	fa93 f1a3 	rbit	r1, r3
 80015e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80015f0:	6019      	str	r1, [r3, #0]
  return result;
 80015f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015f6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	fab3 f383 	clz	r3, r3
 8001600:	b2db      	uxtb	r3, r3
 8001602:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001606:	b2db      	uxtb	r3, r3
 8001608:	f003 031f 	and.w	r3, r3, #31
 800160c:	2101      	movs	r1, #1
 800160e:	fa01 f303 	lsl.w	r3, r1, r3
 8001612:	4013      	ands	r3, r2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d09d      	beq.n	8001554 <HAL_RCC_OscConfig+0x688>
 8001618:	e08d      	b.n	8001736 <HAL_RCC_OscConfig+0x86a>
 800161a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800161e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001622:	2201      	movs	r2, #1
 8001624:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001626:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800162a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	fa93 f2a3 	rbit	r2, r3
 8001634:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001638:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800163c:	601a      	str	r2, [r3, #0]
  return result;
 800163e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001642:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001646:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001648:	fab3 f383 	clz	r3, r3
 800164c:	b2db      	uxtb	r3, r3
 800164e:	461a      	mov	r2, r3
 8001650:	4b5d      	ldr	r3, [pc, #372]	; (80017c8 <HAL_RCC_OscConfig+0x8fc>)
 8001652:	4413      	add	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	461a      	mov	r2, r3
 8001658:	2300      	movs	r3, #0
 800165a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165c:	f7ff f8e6 	bl	800082c <HAL_GetTick>
 8001660:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001664:	e00a      	b.n	800167c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001666:	f7ff f8e1 	bl	800082c <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d902      	bls.n	800167c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	f000 bc75 	b.w	8001f66 <HAL_RCC_OscConfig+0x109a>
 800167c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001680:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001684:	2202      	movs	r2, #2
 8001686:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001688:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800168c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	fa93 f2a3 	rbit	r2, r3
 8001696:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800169a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80016a8:	2202      	movs	r2, #2
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	fa93 f2a3 	rbit	r2, r3
 80016ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016c8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016cc:	2202      	movs	r2, #2
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016d4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	fa93 f2a3 	rbit	r2, r3
 80016de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016e2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80016e6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e8:	4b36      	ldr	r3, [pc, #216]	; (80017c4 <HAL_RCC_OscConfig+0x8f8>)
 80016ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016f0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80016f4:	2102      	movs	r1, #2
 80016f6:	6019      	str	r1, [r3, #0]
 80016f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016fc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	fa93 f1a3 	rbit	r1, r3
 8001706:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800170a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800170e:	6019      	str	r1, [r3, #0]
  return result;
 8001710:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001714:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	fab3 f383 	clz	r3, r3
 800171e:	b2db      	uxtb	r3, r3
 8001720:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001724:	b2db      	uxtb	r3, r3
 8001726:	f003 031f 	and.w	r3, r3, #31
 800172a:	2101      	movs	r1, #1
 800172c:	fa01 f303 	lsl.w	r3, r1, r3
 8001730:	4013      	ands	r3, r2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d197      	bne.n	8001666 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001736:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800173a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0304 	and.w	r3, r3, #4
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 81a5 	beq.w	8001a96 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800174c:	2300      	movs	r3, #0
 800174e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001752:	4b1c      	ldr	r3, [pc, #112]	; (80017c4 <HAL_RCC_OscConfig+0x8f8>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d116      	bne.n	800178c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800175e:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <HAL_RCC_OscConfig+0x8f8>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	4a18      	ldr	r2, [pc, #96]	; (80017c4 <HAL_RCC_OscConfig+0x8f8>)
 8001764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001768:	61d3      	str	r3, [r2, #28]
 800176a:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <HAL_RCC_OscConfig+0x8f8>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001772:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001776:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001780:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001784:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001786:	2301      	movs	r3, #1
 8001788:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <HAL_RCC_OscConfig+0x900>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001794:	2b00      	cmp	r3, #0
 8001796:	d121      	bne.n	80017dc <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <HAL_RCC_OscConfig+0x900>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a0b      	ldr	r2, [pc, #44]	; (80017cc <HAL_RCC_OscConfig+0x900>)
 800179e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017a4:	f7ff f842 	bl	800082c <HAL_GetTick>
 80017a8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ac:	e010      	b.n	80017d0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ae:	f7ff f83d 	bl	800082c <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b64      	cmp	r3, #100	; 0x64
 80017bc:	d908      	bls.n	80017d0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e3d1      	b.n	8001f66 <HAL_RCC_OscConfig+0x109a>
 80017c2:	bf00      	nop
 80017c4:	40021000 	.word	0x40021000
 80017c8:	10908120 	.word	0x10908120
 80017cc:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d0:	4b8d      	ldr	r3, [pc, #564]	; (8001a08 <HAL_RCC_OscConfig+0xb3c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0e8      	beq.n	80017ae <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d106      	bne.n	80017fa <HAL_RCC_OscConfig+0x92e>
 80017ec:	4b87      	ldr	r3, [pc, #540]	; (8001a0c <HAL_RCC_OscConfig+0xb40>)
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	4a86      	ldr	r2, [pc, #536]	; (8001a0c <HAL_RCC_OscConfig+0xb40>)
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	6213      	str	r3, [r2, #32]
 80017f8:	e035      	b.n	8001866 <HAL_RCC_OscConfig+0x99a>
 80017fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017fe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10c      	bne.n	8001824 <HAL_RCC_OscConfig+0x958>
 800180a:	4b80      	ldr	r3, [pc, #512]	; (8001a0c <HAL_RCC_OscConfig+0xb40>)
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	4a7f      	ldr	r2, [pc, #508]	; (8001a0c <HAL_RCC_OscConfig+0xb40>)
 8001810:	f023 0301 	bic.w	r3, r3, #1
 8001814:	6213      	str	r3, [r2, #32]
 8001816:	4b7d      	ldr	r3, [pc, #500]	; (8001a0c <HAL_RCC_OscConfig+0xb40>)
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	4a7c      	ldr	r2, [pc, #496]	; (8001a0c <HAL_RCC_OscConfig+0xb40>)
 800181c:	f023 0304 	bic.w	r3, r3, #4
 8001820:	6213      	str	r3, [r2, #32]
 8001822:	e020      	b.n	8001866 <HAL_RCC_OscConfig+0x99a>
 8001824:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001828:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	2b05      	cmp	r3, #5
 8001832:	d10c      	bne.n	800184e <HAL_RCC_OscConfig+0x982>
 8001834:	4b75      	ldr	r3, [pc, #468]	; (8001a0c <HAL_RCC_OscConfig+0xb40>)
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	4a74      	ldr	r2, [pc, #464]	; (8001a0c <HAL_RCC_OscConfig+0xb40>)
 800183a:	f043 0304 	orr.w	r3, r3, #4
 800183e:	6213      	str	r3, [r2, #32]
 8001840:	4b72      	ldr	r3, [pc, #456]	; (8001a0c <HAL_RCC_OscConfig+0xb40>)
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	4a71      	ldr	r2, [pc, #452]	; (8001a0c <HAL_RCC_OscConfig+0xb40>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	6213      	str	r3, [r2, #32]
 800184c:	e00b      	b.n	8001866 <HAL_RCC_OscConfig+0x99a>
 800184e:	4b6f      	ldr	r3, [pc, #444]	; (8001a0c <HAL_RCC_OscConfig+0xb40>)
 8001850:	6a1b      	ldr	r3, [r3, #32]
 8001852:	4a6e      	ldr	r2, [pc, #440]	; (8001a0c <HAL_RCC_OscConfig+0xb40>)
 8001854:	f023 0301 	bic.w	r3, r3, #1
 8001858:	6213      	str	r3, [r2, #32]
 800185a:	4b6c      	ldr	r3, [pc, #432]	; (8001a0c <HAL_RCC_OscConfig+0xb40>)
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	4a6b      	ldr	r2, [pc, #428]	; (8001a0c <HAL_RCC_OscConfig+0xb40>)
 8001860:	f023 0304 	bic.w	r3, r3, #4
 8001864:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001866:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800186a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 8081 	beq.w	800197a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001878:	f7fe ffd8 	bl	800082c <HAL_GetTick>
 800187c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001880:	e00b      	b.n	800189a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001882:	f7fe ffd3 	bl	800082c <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001892:	4293      	cmp	r3, r2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e365      	b.n	8001f66 <HAL_RCC_OscConfig+0x109a>
 800189a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800189e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80018a2:	2202      	movs	r2, #2
 80018a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018aa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	fa93 f2a3 	rbit	r2, r3
 80018b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018b8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018c2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018c6:	2202      	movs	r2, #2
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ce:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	fa93 f2a3 	rbit	r2, r3
 80018d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018dc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80018e0:	601a      	str	r2, [r3, #0]
  return result;
 80018e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018e6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80018ea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ec:	fab3 f383 	clz	r3, r3
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	095b      	lsrs	r3, r3, #5
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	f043 0302 	orr.w	r3, r3, #2
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d102      	bne.n	8001906 <HAL_RCC_OscConfig+0xa3a>
 8001900:	4b42      	ldr	r3, [pc, #264]	; (8001a0c <HAL_RCC_OscConfig+0xb40>)
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	e013      	b.n	800192e <HAL_RCC_OscConfig+0xa62>
 8001906:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800190a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800190e:	2202      	movs	r2, #2
 8001910:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001912:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001916:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	fa93 f2a3 	rbit	r2, r3
 8001920:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001924:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	4b38      	ldr	r3, [pc, #224]	; (8001a0c <HAL_RCC_OscConfig+0xb40>)
 800192c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001932:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001936:	2102      	movs	r1, #2
 8001938:	6011      	str	r1, [r2, #0]
 800193a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800193e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001942:	6812      	ldr	r2, [r2, #0]
 8001944:	fa92 f1a2 	rbit	r1, r2
 8001948:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800194c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001950:	6011      	str	r1, [r2, #0]
  return result;
 8001952:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001956:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	fab2 f282 	clz	r2, r2
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	f002 021f 	and.w	r2, r2, #31
 800196c:	2101      	movs	r1, #1
 800196e:	fa01 f202 	lsl.w	r2, r1, r2
 8001972:	4013      	ands	r3, r2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d084      	beq.n	8001882 <HAL_RCC_OscConfig+0x9b6>
 8001978:	e083      	b.n	8001a82 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197a:	f7fe ff57 	bl	800082c <HAL_GetTick>
 800197e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001982:	e00b      	b.n	800199c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001984:	f7fe ff52 	bl	800082c <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	f241 3288 	movw	r2, #5000	; 0x1388
 8001994:	4293      	cmp	r3, r2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e2e4      	b.n	8001f66 <HAL_RCC_OscConfig+0x109a>
 800199c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019a0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80019a4:	2202      	movs	r2, #2
 80019a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ac:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	fa93 f2a3 	rbit	r2, r3
 80019b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ba:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019c4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019c8:	2202      	movs	r2, #2
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019d0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	fa93 f2a3 	rbit	r2, r3
 80019da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019de:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80019e2:	601a      	str	r2, [r3, #0]
  return result;
 80019e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019e8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80019ec:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ee:	fab3 f383 	clz	r3, r3
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	095b      	lsrs	r3, r3, #5
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	f043 0302 	orr.w	r3, r3, #2
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d106      	bne.n	8001a10 <HAL_RCC_OscConfig+0xb44>
 8001a02:	4b02      	ldr	r3, [pc, #8]	; (8001a0c <HAL_RCC_OscConfig+0xb40>)
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	e017      	b.n	8001a38 <HAL_RCC_OscConfig+0xb6c>
 8001a08:	40007000 	.word	0x40007000
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a14:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001a18:	2202      	movs	r2, #2
 8001a1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a20:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	fa93 f2a3 	rbit	r2, r3
 8001a2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a2e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	4bb3      	ldr	r3, [pc, #716]	; (8001d04 <HAL_RCC_OscConfig+0xe38>)
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a3c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a40:	2102      	movs	r1, #2
 8001a42:	6011      	str	r1, [r2, #0]
 8001a44:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a48:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a4c:	6812      	ldr	r2, [r2, #0]
 8001a4e:	fa92 f1a2 	rbit	r1, r2
 8001a52:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a56:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001a5a:	6011      	str	r1, [r2, #0]
  return result;
 8001a5c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a60:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001a64:	6812      	ldr	r2, [r2, #0]
 8001a66:	fab2 f282 	clz	r2, r2
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	f002 021f 	and.w	r2, r2, #31
 8001a76:	2101      	movs	r1, #1
 8001a78:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d180      	bne.n	8001984 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a82:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d105      	bne.n	8001a96 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a8a:	4b9e      	ldr	r3, [pc, #632]	; (8001d04 <HAL_RCC_OscConfig+0xe38>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	4a9d      	ldr	r2, [pc, #628]	; (8001d04 <HAL_RCC_OscConfig+0xe38>)
 8001a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a94:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a9a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 825e 	beq.w	8001f64 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aa8:	4b96      	ldr	r3, [pc, #600]	; (8001d04 <HAL_RCC_OscConfig+0xe38>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 030c 	and.w	r3, r3, #12
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	f000 821f 	beq.w	8001ef4 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ab6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	f040 8170 	bne.w	8001da8 <HAL_RCC_OscConfig+0xedc>
 8001ac8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001acc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001ad0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ad4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ada:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	fa93 f2a3 	rbit	r2, r3
 8001ae4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ae8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001aec:	601a      	str	r2, [r3, #0]
  return result;
 8001aee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001af6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af8:	fab3 f383 	clz	r3, r3
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b02:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	461a      	mov	r2, r3
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0e:	f7fe fe8d 	bl	800082c <HAL_GetTick>
 8001b12:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b16:	e009      	b.n	8001b2c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b18:	f7fe fe88 	bl	800082c <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e21c      	b.n	8001f66 <HAL_RCC_OscConfig+0x109a>
 8001b2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b30:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b3e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	fa93 f2a3 	rbit	r2, r3
 8001b48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b4c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b50:	601a      	str	r2, [r3, #0]
  return result;
 8001b52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b56:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b5a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b5c:	fab3 f383 	clz	r3, r3
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	095b      	lsrs	r3, r3, #5
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d102      	bne.n	8001b76 <HAL_RCC_OscConfig+0xcaa>
 8001b70:	4b64      	ldr	r3, [pc, #400]	; (8001d04 <HAL_RCC_OscConfig+0xe38>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	e027      	b.n	8001bc6 <HAL_RCC_OscConfig+0xcfa>
 8001b76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b7a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001b7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b88:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	fa93 f2a3 	rbit	r2, r3
 8001b92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b96:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ba0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001ba4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bae:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	fa93 f2a3 	rbit	r2, r3
 8001bb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bbc:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	4b50      	ldr	r3, [pc, #320]	; (8001d04 <HAL_RCC_OscConfig+0xe38>)
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bca:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001bce:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bd2:	6011      	str	r1, [r2, #0]
 8001bd4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bd8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001bdc:	6812      	ldr	r2, [r2, #0]
 8001bde:	fa92 f1a2 	rbit	r1, r2
 8001be2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001be6:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001bea:	6011      	str	r1, [r2, #0]
  return result;
 8001bec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bf0:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001bf4:	6812      	ldr	r2, [r2, #0]
 8001bf6:	fab2 f282 	clz	r2, r2
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	f042 0220 	orr.w	r2, r2, #32
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	f002 021f 	and.w	r2, r2, #31
 8001c06:	2101      	movs	r1, #1
 8001c08:	fa01 f202 	lsl.w	r2, r1, r2
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d182      	bne.n	8001b18 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c12:	4b3c      	ldr	r3, [pc, #240]	; (8001d04 <HAL_RCC_OscConfig+0xe38>)
 8001c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c16:	f023 020f 	bic.w	r2, r3, #15
 8001c1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c1e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c26:	4937      	ldr	r1, [pc, #220]	; (8001d04 <HAL_RCC_OscConfig+0xe38>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001c2c:	4b35      	ldr	r3, [pc, #212]	; (8001d04 <HAL_RCC_OscConfig+0xe38>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001c34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c38:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6a19      	ldr	r1, [r3, #32]
 8001c40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c44:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	430b      	orrs	r3, r1
 8001c4e:	492d      	ldr	r1, [pc, #180]	; (8001d04 <HAL_RCC_OscConfig+0xe38>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	604b      	str	r3, [r1, #4]
 8001c54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c58:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c66:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	fa93 f2a3 	rbit	r2, r3
 8001c70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c74:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c78:	601a      	str	r2, [r3, #0]
  return result;
 8001c7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c7e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c82:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c84:	fab3 f383 	clz	r3, r3
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c8e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	461a      	mov	r2, r3
 8001c96:	2301      	movs	r3, #1
 8001c98:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9a:	f7fe fdc7 	bl	800082c <HAL_GetTick>
 8001c9e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ca2:	e009      	b.n	8001cb8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca4:	f7fe fdc2 	bl	800082c <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e156      	b.n	8001f66 <HAL_RCC_OscConfig+0x109a>
 8001cb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cbc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001cc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cca:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	fa93 f2a3 	rbit	r2, r3
 8001cd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001cdc:	601a      	str	r2, [r3, #0]
  return result;
 8001cde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ce6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ce8:	fab3 f383 	clz	r3, r3
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	095b      	lsrs	r3, r3, #5
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d105      	bne.n	8001d08 <HAL_RCC_OscConfig+0xe3c>
 8001cfc:	4b01      	ldr	r3, [pc, #4]	; (8001d04 <HAL_RCC_OscConfig+0xe38>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	e02a      	b.n	8001d58 <HAL_RCC_OscConfig+0xe8c>
 8001d02:	bf00      	nop
 8001d04:	40021000 	.word	0x40021000
 8001d08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d0c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001d10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d1a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	fa93 f2a3 	rbit	r2, r3
 8001d24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d28:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d32:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001d36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d40:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	fa93 f2a3 	rbit	r2, r3
 8001d4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d4e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	4b86      	ldr	r3, [pc, #536]	; (8001f70 <HAL_RCC_OscConfig+0x10a4>)
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d5c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d60:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d64:	6011      	str	r1, [r2, #0]
 8001d66:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d6a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	fa92 f1a2 	rbit	r1, r2
 8001d74:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d78:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001d7c:	6011      	str	r1, [r2, #0]
  return result;
 8001d7e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d82:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	fab2 f282 	clz	r2, r2
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	f042 0220 	orr.w	r2, r2, #32
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	f002 021f 	and.w	r2, r2, #31
 8001d98:	2101      	movs	r1, #1
 8001d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d9e:	4013      	ands	r3, r2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f43f af7f 	beq.w	8001ca4 <HAL_RCC_OscConfig+0xdd8>
 8001da6:	e0dd      	b.n	8001f64 <HAL_RCC_OscConfig+0x1098>
 8001da8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dac:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001db0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001db4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dba:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	fa93 f2a3 	rbit	r2, r3
 8001dc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001dcc:	601a      	str	r2, [r3, #0]
  return result;
 8001dce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001dd6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd8:	fab3 f383 	clz	r3, r3
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001de2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	461a      	mov	r2, r3
 8001dea:	2300      	movs	r3, #0
 8001dec:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dee:	f7fe fd1d 	bl	800082c <HAL_GetTick>
 8001df2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df6:	e009      	b.n	8001e0c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df8:	f7fe fd18 	bl	800082c <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e0ac      	b.n	8001f66 <HAL_RCC_OscConfig+0x109a>
 8001e0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e10:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e1e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	fa93 f2a3 	rbit	r2, r3
 8001e28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e2c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e30:	601a      	str	r2, [r3, #0]
  return result;
 8001e32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e36:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e3a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e3c:	fab3 f383 	clz	r3, r3
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	095b      	lsrs	r3, r3, #5
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d102      	bne.n	8001e56 <HAL_RCC_OscConfig+0xf8a>
 8001e50:	4b47      	ldr	r3, [pc, #284]	; (8001f70 <HAL_RCC_OscConfig+0x10a4>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	e027      	b.n	8001ea6 <HAL_RCC_OscConfig+0xfda>
 8001e56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e5a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001e5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e68:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	fa93 f2a3 	rbit	r2, r3
 8001e72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e76:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e80:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001e84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e8e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	fa93 f2a3 	rbit	r2, r3
 8001e98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e9c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	4b33      	ldr	r3, [pc, #204]	; (8001f70 <HAL_RCC_OscConfig+0x10a4>)
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001eaa:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001eae:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001eb2:	6011      	str	r1, [r2, #0]
 8001eb4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001eb8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ebc:	6812      	ldr	r2, [r2, #0]
 8001ebe:	fa92 f1a2 	rbit	r1, r2
 8001ec2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ec6:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001eca:	6011      	str	r1, [r2, #0]
  return result;
 8001ecc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ed0:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001ed4:	6812      	ldr	r2, [r2, #0]
 8001ed6:	fab2 f282 	clz	r2, r2
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	f042 0220 	orr.w	r2, r2, #32
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	f002 021f 	and.w	r2, r2, #31
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8001eec:	4013      	ands	r3, r2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d182      	bne.n	8001df8 <HAL_RCC_OscConfig+0xf2c>
 8001ef2:	e037      	b.n	8001f64 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ef8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d101      	bne.n	8001f08 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e02e      	b.n	8001f66 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f08:	4b19      	ldr	r3, [pc, #100]	; (8001f70 <HAL_RCC_OscConfig+0x10a4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001f10:	4b17      	ldr	r3, [pc, #92]	; (8001f70 <HAL_RCC_OscConfig+0x10a4>)
 8001f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f14:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f18:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001f1c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001f20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f24:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d117      	bne.n	8001f60 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001f30:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001f34:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f3c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d10b      	bne.n	8001f60 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001f48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f4c:	f003 020f 	and.w	r2, r3, #15
 8001f50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f54:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d001      	beq.n	8001f64 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e000      	b.n	8001f66 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40021000 	.word	0x40021000

08001f74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b09e      	sub	sp, #120	; 0x78
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e162      	b.n	8002252 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f8c:	4b90      	ldr	r3, [pc, #576]	; (80021d0 <HAL_RCC_ClockConfig+0x25c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d910      	bls.n	8001fbc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9a:	4b8d      	ldr	r3, [pc, #564]	; (80021d0 <HAL_RCC_ClockConfig+0x25c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 0207 	bic.w	r2, r3, #7
 8001fa2:	498b      	ldr	r1, [pc, #556]	; (80021d0 <HAL_RCC_ClockConfig+0x25c>)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001faa:	4b89      	ldr	r3, [pc, #548]	; (80021d0 <HAL_RCC_ClockConfig+0x25c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d001      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e14a      	b.n	8002252 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d008      	beq.n	8001fda <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc8:	4b82      	ldr	r3, [pc, #520]	; (80021d4 <HAL_RCC_ClockConfig+0x260>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	497f      	ldr	r1, [pc, #508]	; (80021d4 <HAL_RCC_ClockConfig+0x260>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 80dc 	beq.w	80021a0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d13c      	bne.n	800206a <HAL_RCC_ClockConfig+0xf6>
 8001ff0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ff4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ff8:	fa93 f3a3 	rbit	r3, r3
 8001ffc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002000:	fab3 f383 	clz	r3, r3
 8002004:	b2db      	uxtb	r3, r3
 8002006:	095b      	lsrs	r3, r3, #5
 8002008:	b2db      	uxtb	r3, r3
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b01      	cmp	r3, #1
 8002012:	d102      	bne.n	800201a <HAL_RCC_ClockConfig+0xa6>
 8002014:	4b6f      	ldr	r3, [pc, #444]	; (80021d4 <HAL_RCC_ClockConfig+0x260>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	e00f      	b.n	800203a <HAL_RCC_ClockConfig+0xc6>
 800201a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800201e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002020:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002022:	fa93 f3a3 	rbit	r3, r3
 8002026:	667b      	str	r3, [r7, #100]	; 0x64
 8002028:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800202c:	663b      	str	r3, [r7, #96]	; 0x60
 800202e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002030:	fa93 f3a3 	rbit	r3, r3
 8002034:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002036:	4b67      	ldr	r3, [pc, #412]	; (80021d4 <HAL_RCC_ClockConfig+0x260>)
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800203e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002040:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002042:	fa92 f2a2 	rbit	r2, r2
 8002046:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002048:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800204a:	fab2 f282 	clz	r2, r2
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	f042 0220 	orr.w	r2, r2, #32
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	f002 021f 	and.w	r2, r2, #31
 800205a:	2101      	movs	r1, #1
 800205c:	fa01 f202 	lsl.w	r2, r1, r2
 8002060:	4013      	ands	r3, r2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d17b      	bne.n	800215e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e0f3      	b.n	8002252 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d13c      	bne.n	80020ec <HAL_RCC_ClockConfig+0x178>
 8002072:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002076:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800207a:	fa93 f3a3 	rbit	r3, r3
 800207e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002082:	fab3 f383 	clz	r3, r3
 8002086:	b2db      	uxtb	r3, r3
 8002088:	095b      	lsrs	r3, r3, #5
 800208a:	b2db      	uxtb	r3, r3
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b01      	cmp	r3, #1
 8002094:	d102      	bne.n	800209c <HAL_RCC_ClockConfig+0x128>
 8002096:	4b4f      	ldr	r3, [pc, #316]	; (80021d4 <HAL_RCC_ClockConfig+0x260>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	e00f      	b.n	80020bc <HAL_RCC_ClockConfig+0x148>
 800209c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020a0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020a4:	fa93 f3a3 	rbit	r3, r3
 80020a8:	647b      	str	r3, [r7, #68]	; 0x44
 80020aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020ae:	643b      	str	r3, [r7, #64]	; 0x40
 80020b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020b2:	fa93 f3a3 	rbit	r3, r3
 80020b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020b8:	4b46      	ldr	r3, [pc, #280]	; (80021d4 <HAL_RCC_ClockConfig+0x260>)
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020c0:	63ba      	str	r2, [r7, #56]	; 0x38
 80020c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020c4:	fa92 f2a2 	rbit	r2, r2
 80020c8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80020ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020cc:	fab2 f282 	clz	r2, r2
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	f042 0220 	orr.w	r2, r2, #32
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	f002 021f 	and.w	r2, r2, #31
 80020dc:	2101      	movs	r1, #1
 80020de:	fa01 f202 	lsl.w	r2, r1, r2
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d13a      	bne.n	800215e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e0b2      	b.n	8002252 <HAL_RCC_ClockConfig+0x2de>
 80020ec:	2302      	movs	r3, #2
 80020ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f2:	fa93 f3a3 	rbit	r3, r3
 80020f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80020f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fa:	fab3 f383 	clz	r3, r3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	095b      	lsrs	r3, r3, #5
 8002102:	b2db      	uxtb	r3, r3
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b01      	cmp	r3, #1
 800210c:	d102      	bne.n	8002114 <HAL_RCC_ClockConfig+0x1a0>
 800210e:	4b31      	ldr	r3, [pc, #196]	; (80021d4 <HAL_RCC_ClockConfig+0x260>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	e00d      	b.n	8002130 <HAL_RCC_ClockConfig+0x1bc>
 8002114:	2302      	movs	r3, #2
 8002116:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211a:	fa93 f3a3 	rbit	r3, r3
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
 8002120:	2302      	movs	r3, #2
 8002122:	623b      	str	r3, [r7, #32]
 8002124:	6a3b      	ldr	r3, [r7, #32]
 8002126:	fa93 f3a3 	rbit	r3, r3
 800212a:	61fb      	str	r3, [r7, #28]
 800212c:	4b29      	ldr	r3, [pc, #164]	; (80021d4 <HAL_RCC_ClockConfig+0x260>)
 800212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002130:	2202      	movs	r2, #2
 8002132:	61ba      	str	r2, [r7, #24]
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	fa92 f2a2 	rbit	r2, r2
 800213a:	617a      	str	r2, [r7, #20]
  return result;
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	fab2 f282 	clz	r2, r2
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	f042 0220 	orr.w	r2, r2, #32
 8002148:	b2d2      	uxtb	r2, r2
 800214a:	f002 021f 	and.w	r2, r2, #31
 800214e:	2101      	movs	r1, #1
 8002150:	fa01 f202 	lsl.w	r2, r1, r2
 8002154:	4013      	ands	r3, r2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e079      	b.n	8002252 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800215e:	4b1d      	ldr	r3, [pc, #116]	; (80021d4 <HAL_RCC_ClockConfig+0x260>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f023 0203 	bic.w	r2, r3, #3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	491a      	ldr	r1, [pc, #104]	; (80021d4 <HAL_RCC_ClockConfig+0x260>)
 800216c:	4313      	orrs	r3, r2
 800216e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002170:	f7fe fb5c 	bl	800082c <HAL_GetTick>
 8002174:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002176:	e00a      	b.n	800218e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002178:	f7fe fb58 	bl	800082c <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	f241 3288 	movw	r2, #5000	; 0x1388
 8002186:	4293      	cmp	r3, r2
 8002188:	d901      	bls.n	800218e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e061      	b.n	8002252 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218e:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <HAL_RCC_ClockConfig+0x260>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 020c 	and.w	r2, r3, #12
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	429a      	cmp	r2, r3
 800219e:	d1eb      	bne.n	8002178 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <HAL_RCC_ClockConfig+0x25c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d214      	bcs.n	80021d8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ae:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <HAL_RCC_ClockConfig+0x25c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f023 0207 	bic.w	r2, r3, #7
 80021b6:	4906      	ldr	r1, [pc, #24]	; (80021d0 <HAL_RCC_ClockConfig+0x25c>)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021be:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <HAL_RCC_ClockConfig+0x25c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e040      	b.n	8002252 <HAL_RCC_ClockConfig+0x2de>
 80021d0:	40022000 	.word	0x40022000
 80021d4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d008      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021e4:	4b1d      	ldr	r3, [pc, #116]	; (800225c <HAL_RCC_ClockConfig+0x2e8>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	491a      	ldr	r1, [pc, #104]	; (800225c <HAL_RCC_ClockConfig+0x2e8>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d009      	beq.n	8002216 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002202:	4b16      	ldr	r3, [pc, #88]	; (800225c <HAL_RCC_ClockConfig+0x2e8>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	4912      	ldr	r1, [pc, #72]	; (800225c <HAL_RCC_ClockConfig+0x2e8>)
 8002212:	4313      	orrs	r3, r2
 8002214:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002216:	f000 f829 	bl	800226c <HAL_RCC_GetSysClockFreq>
 800221a:	4601      	mov	r1, r0
 800221c:	4b0f      	ldr	r3, [pc, #60]	; (800225c <HAL_RCC_ClockConfig+0x2e8>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002224:	22f0      	movs	r2, #240	; 0xf0
 8002226:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	fa92 f2a2 	rbit	r2, r2
 800222e:	60fa      	str	r2, [r7, #12]
  return result;
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	fab2 f282 	clz	r2, r2
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	40d3      	lsrs	r3, r2
 800223a:	4a09      	ldr	r2, [pc, #36]	; (8002260 <HAL_RCC_ClockConfig+0x2ec>)
 800223c:	5cd3      	ldrb	r3, [r2, r3]
 800223e:	fa21 f303 	lsr.w	r3, r1, r3
 8002242:	4a08      	ldr	r2, [pc, #32]	; (8002264 <HAL_RCC_ClockConfig+0x2f0>)
 8002244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002246:	4b08      	ldr	r3, [pc, #32]	; (8002268 <HAL_RCC_ClockConfig+0x2f4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe faaa 	bl	80007a4 <HAL_InitTick>
  
  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3778      	adds	r7, #120	; 0x78
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40021000 	.word	0x40021000
 8002260:	08003e30 	.word	0x08003e30
 8002264:	20000064 	.word	0x20000064
 8002268:	20000068 	.word	0x20000068

0800226c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800226c:	b480      	push	{r7}
 800226e:	b08b      	sub	sp, #44	; 0x2c
 8002270:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]
 8002276:	2300      	movs	r3, #0
 8002278:	61bb      	str	r3, [r7, #24]
 800227a:	2300      	movs	r3, #0
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002286:	4b2a      	ldr	r3, [pc, #168]	; (8002330 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f003 030c 	and.w	r3, r3, #12
 8002292:	2b04      	cmp	r3, #4
 8002294:	d002      	beq.n	800229c <HAL_RCC_GetSysClockFreq+0x30>
 8002296:	2b08      	cmp	r3, #8
 8002298:	d003      	beq.n	80022a2 <HAL_RCC_GetSysClockFreq+0x36>
 800229a:	e03f      	b.n	800231c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800229c:	4b25      	ldr	r3, [pc, #148]	; (8002334 <HAL_RCC_GetSysClockFreq+0xc8>)
 800229e:	623b      	str	r3, [r7, #32]
      break;
 80022a0:	e03f      	b.n	8002322 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80022a8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80022ac:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	fa92 f2a2 	rbit	r2, r2
 80022b4:	607a      	str	r2, [r7, #4]
  return result;
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	fab2 f282 	clz	r2, r2
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	40d3      	lsrs	r3, r2
 80022c0:	4a1d      	ldr	r2, [pc, #116]	; (8002338 <HAL_RCC_GetSysClockFreq+0xcc>)
 80022c2:	5cd3      	ldrb	r3, [r2, r3]
 80022c4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80022c6:	4b1a      	ldr	r3, [pc, #104]	; (8002330 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	220f      	movs	r2, #15
 80022d0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	fa92 f2a2 	rbit	r2, r2
 80022d8:	60fa      	str	r2, [r7, #12]
  return result;
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	fab2 f282 	clz	r2, r2
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	40d3      	lsrs	r3, r2
 80022e4:	4a15      	ldr	r2, [pc, #84]	; (800233c <HAL_RCC_GetSysClockFreq+0xd0>)
 80022e6:	5cd3      	ldrb	r3, [r2, r3]
 80022e8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d008      	beq.n	8002306 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022f4:	4a0f      	ldr	r2, [pc, #60]	; (8002334 <HAL_RCC_GetSysClockFreq+0xc8>)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	fb02 f303 	mul.w	r3, r2, r3
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
 8002304:	e007      	b.n	8002316 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002306:	4a0b      	ldr	r2, [pc, #44]	; (8002334 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	fbb2 f2f3 	udiv	r2, r2, r3
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	fb02 f303 	mul.w	r3, r2, r3
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	623b      	str	r3, [r7, #32]
      break;
 800231a:	e002      	b.n	8002322 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800231c:	4b05      	ldr	r3, [pc, #20]	; (8002334 <HAL_RCC_GetSysClockFreq+0xc8>)
 800231e:	623b      	str	r3, [r7, #32]
      break;
 8002320:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002322:	6a3b      	ldr	r3, [r7, #32]
}
 8002324:	4618      	mov	r0, r3
 8002326:	372c      	adds	r7, #44	; 0x2c
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	40021000 	.word	0x40021000
 8002334:	007a1200 	.word	0x007a1200
 8002338:	08003e48 	.word	0x08003e48
 800233c:	08003e58 	.word	0x08003e58

08002340 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <HAL_RCC_GetHCLKFreq+0x14>)
 8002346:	681b      	ldr	r3, [r3, #0]
}
 8002348:	4618      	mov	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	20000064 	.word	0x20000064

08002358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800235e:	f7ff ffef 	bl	8002340 <HAL_RCC_GetHCLKFreq>
 8002362:	4601      	mov	r1, r0
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800236c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002370:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	fa92 f2a2 	rbit	r2, r2
 8002378:	603a      	str	r2, [r7, #0]
  return result;
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	fab2 f282 	clz	r2, r2
 8002380:	b2d2      	uxtb	r2, r2
 8002382:	40d3      	lsrs	r3, r2
 8002384:	4a04      	ldr	r2, [pc, #16]	; (8002398 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002386:	5cd3      	ldrb	r3, [r2, r3]
 8002388:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40021000 	.word	0x40021000
 8002398:	08003e40 	.word	0x08003e40

0800239c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80023a2:	f7ff ffcd 	bl	8002340 <HAL_RCC_GetHCLKFreq>
 80023a6:	4601      	mov	r1, r0
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80023b0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80023b4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	fa92 f2a2 	rbit	r2, r2
 80023bc:	603a      	str	r2, [r7, #0]
  return result;
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	fab2 f282 	clz	r2, r2
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	40d3      	lsrs	r3, r2
 80023c8:	4a04      	ldr	r2, [pc, #16]	; (80023dc <HAL_RCC_GetPCLK2Freq+0x40>)
 80023ca:	5cd3      	ldrb	r3, [r2, r3]
 80023cc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80023d0:	4618      	mov	r0, r3
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40021000 	.word	0x40021000
 80023dc:	08003e40 	.word	0x08003e40

080023e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b092      	sub	sp, #72	; 0x48
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80023f0:	2300      	movs	r3, #0
 80023f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 80d4 	beq.w	80025ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002404:	4b4e      	ldr	r3, [pc, #312]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10e      	bne.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002410:	4b4b      	ldr	r3, [pc, #300]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	4a4a      	ldr	r2, [pc, #296]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800241a:	61d3      	str	r3, [r2, #28]
 800241c:	4b48      	ldr	r3, [pc, #288]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002428:	2301      	movs	r3, #1
 800242a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242e:	4b45      	ldr	r3, [pc, #276]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002436:	2b00      	cmp	r3, #0
 8002438:	d118      	bne.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800243a:	4b42      	ldr	r3, [pc, #264]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a41      	ldr	r2, [pc, #260]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002444:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002446:	f7fe f9f1 	bl	800082c <HAL_GetTick>
 800244a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244c:	e008      	b.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800244e:	f7fe f9ed 	bl	800082c <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b64      	cmp	r3, #100	; 0x64
 800245a:	d901      	bls.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e1d6      	b.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002460:	4b38      	ldr	r3, [pc, #224]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0f0      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800246c:	4b34      	ldr	r3, [pc, #208]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002474:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 8084 	beq.w	8002586 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002486:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002488:	429a      	cmp	r2, r3
 800248a:	d07c      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800248c:	4b2c      	ldr	r3, [pc, #176]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002494:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002496:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800249a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249e:	fa93 f3a3 	rbit	r3, r3
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80024a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024a6:	fab3 f383 	clz	r3, r3
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	461a      	mov	r2, r3
 80024ae:	4b26      	ldr	r3, [pc, #152]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024b0:	4413      	add	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	461a      	mov	r2, r3
 80024b6:	2301      	movs	r3, #1
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c2:	fa93 f3a3 	rbit	r3, r3
 80024c6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80024c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	461a      	mov	r2, r3
 80024d2:	4b1d      	ldr	r3, [pc, #116]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	461a      	mov	r2, r3
 80024da:	2300      	movs	r3, #0
 80024dc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024de:	4a18      	ldr	r2, [pc, #96]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024e2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d04b      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ee:	f7fe f99d 	bl	800082c <HAL_GetTick>
 80024f2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f4:	e00a      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f6:	f7fe f999 	bl	800082c <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	f241 3288 	movw	r2, #5000	; 0x1388
 8002504:	4293      	cmp	r3, r2
 8002506:	d901      	bls.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e180      	b.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800250c:	2302      	movs	r3, #2
 800250e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002512:	fa93 f3a3 	rbit	r3, r3
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
 8002518:	2302      	movs	r3, #2
 800251a:	623b      	str	r3, [r7, #32]
 800251c:	6a3b      	ldr	r3, [r7, #32]
 800251e:	fa93 f3a3 	rbit	r3, r3
 8002522:	61fb      	str	r3, [r7, #28]
  return result;
 8002524:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002526:	fab3 f383 	clz	r3, r3
 800252a:	b2db      	uxtb	r3, r3
 800252c:	095b      	lsrs	r3, r3, #5
 800252e:	b2db      	uxtb	r3, r3
 8002530:	f043 0302 	orr.w	r3, r3, #2
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d108      	bne.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800253a:	4b01      	ldr	r3, [pc, #4]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	e00d      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002540:	40021000 	.word	0x40021000
 8002544:	40007000 	.word	0x40007000
 8002548:	10908100 	.word	0x10908100
 800254c:	2302      	movs	r3, #2
 800254e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	fa93 f3a3 	rbit	r3, r3
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	4b9a      	ldr	r3, [pc, #616]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	2202      	movs	r2, #2
 800255e:	613a      	str	r2, [r7, #16]
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	fa92 f2a2 	rbit	r2, r2
 8002566:	60fa      	str	r2, [r7, #12]
  return result;
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	fab2 f282 	clz	r2, r2
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	f002 021f 	and.w	r2, r2, #31
 800257a:	2101      	movs	r1, #1
 800257c:	fa01 f202 	lsl.w	r2, r1, r2
 8002580:	4013      	ands	r3, r2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0b7      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002586:	4b8f      	ldr	r3, [pc, #572]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	498c      	ldr	r1, [pc, #560]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002594:	4313      	orrs	r3, r2
 8002596:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002598:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800259c:	2b01      	cmp	r3, #1
 800259e:	d105      	bne.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a0:	4b88      	ldr	r3, [pc, #544]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	4a87      	ldr	r2, [pc, #540]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025b8:	4b82      	ldr	r3, [pc, #520]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025bc:	f023 0203 	bic.w	r2, r3, #3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	497f      	ldr	r1, [pc, #508]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d008      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025d6:	4b7b      	ldr	r3, [pc, #492]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	4978      	ldr	r1, [pc, #480]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d008      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025f4:	4b73      	ldr	r3, [pc, #460]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	4970      	ldr	r1, [pc, #448]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002602:	4313      	orrs	r3, r2
 8002604:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0320 	and.w	r3, r3, #32
 800260e:	2b00      	cmp	r3, #0
 8002610:	d008      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002612:	4b6c      	ldr	r3, [pc, #432]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	f023 0210 	bic.w	r2, r3, #16
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	4969      	ldr	r1, [pc, #420]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002620:	4313      	orrs	r3, r2
 8002622:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d008      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002630:	4b64      	ldr	r3, [pc, #400]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263c:	4961      	ldr	r1, [pc, #388]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800263e:	4313      	orrs	r3, r2
 8002640:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264a:	2b00      	cmp	r3, #0
 800264c:	d008      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800264e:	4b5d      	ldr	r3, [pc, #372]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	f023 0220 	bic.w	r2, r3, #32
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	495a      	ldr	r1, [pc, #360]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800265c:	4313      	orrs	r3, r2
 800265e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d008      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800266c:	4b55      	ldr	r3, [pc, #340]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	4952      	ldr	r1, [pc, #328]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800267a:	4313      	orrs	r3, r2
 800267c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d008      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800268a:	4b4e      	ldr	r3, [pc, #312]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	494b      	ldr	r1, [pc, #300]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002698:	4313      	orrs	r3, r2
 800269a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0310 	and.w	r3, r3, #16
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d008      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026a8:	4b46      	ldr	r3, [pc, #280]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	4943      	ldr	r1, [pc, #268]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d008      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026c6:	4b3f      	ldr	r3, [pc, #252]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	493c      	ldr	r1, [pc, #240]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d008      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80026e4:	4b37      	ldr	r3, [pc, #220]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f0:	4934      	ldr	r1, [pc, #208]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d008      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002702:	4b30      	ldr	r3, [pc, #192]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002706:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270e:	492d      	ldr	r1, [pc, #180]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002710:	4313      	orrs	r3, r2
 8002712:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d008      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002720:	4b28      	ldr	r3, [pc, #160]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002724:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800272c:	4925      	ldr	r1, [pc, #148]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800272e:	4313      	orrs	r3, r2
 8002730:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d008      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800273e:	4b21      	ldr	r3, [pc, #132]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	491e      	ldr	r1, [pc, #120]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800274c:	4313      	orrs	r3, r2
 800274e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d008      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800275c:	4b19      	ldr	r3, [pc, #100]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002760:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002768:	4916      	ldr	r1, [pc, #88]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800276a:	4313      	orrs	r3, r2
 800276c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d008      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800277a:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002786:	490f      	ldr	r1, [pc, #60]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002788:	4313      	orrs	r3, r2
 800278a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d008      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002798:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800279a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a4:	4907      	ldr	r1, [pc, #28]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00c      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80027b6:	4b03      	ldr	r3, [pc, #12]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	e002      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80027c2:	bf00      	nop
 80027c4:	40021000 	.word	0x40021000
 80027c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ca:	4913      	ldr	r1, [pc, #76]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d008      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80027dc:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e8:	490b      	ldr	r1, [pc, #44]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d008      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80027fa:	4b07      	ldr	r3, [pc, #28]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002806:	4904      	ldr	r1, [pc, #16]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002808:	4313      	orrs	r3, r2
 800280a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3748      	adds	r7, #72	; 0x48
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40021000 	.word	0x40021000

0800281c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e040      	b.n	80028b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002832:	2b00      	cmp	r3, #0
 8002834:	d106      	bne.n	8002844 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7fd fe9c 	bl	800057c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2224      	movs	r2, #36	; 0x24
 8002848:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 0201 	bic.w	r2, r2, #1
 8002858:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 fbba 	bl	8002fd4 <UART_SetConfig>
 8002860:	4603      	mov	r3, r0
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e022      	b.n	80028b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 fd82 	bl	800337c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002886:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002896:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0201 	orr.w	r2, r2, #1
 80028a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 fe09 	bl	80034c0 <UART_CheckIdleState>
 80028ae:	4603      	mov	r3, r0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08a      	sub	sp, #40	; 0x28
 80028bc:	af02      	add	r7, sp, #8
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	603b      	str	r3, [r7, #0]
 80028c4:	4613      	mov	r3, r2
 80028c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028cc:	2b20      	cmp	r3, #32
 80028ce:	d178      	bne.n	80029c2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d002      	beq.n	80028dc <HAL_UART_Transmit+0x24>
 80028d6:	88fb      	ldrh	r3, [r7, #6]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e071      	b.n	80029c4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2221      	movs	r2, #33	; 0x21
 80028ec:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028ee:	f7fd ff9d 	bl	800082c <HAL_GetTick>
 80028f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	88fa      	ldrh	r2, [r7, #6]
 80028f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	88fa      	ldrh	r2, [r7, #6]
 8002900:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800290c:	d108      	bne.n	8002920 <HAL_UART_Transmit+0x68>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d104      	bne.n	8002920 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	61bb      	str	r3, [r7, #24]
 800291e:	e003      	b.n	8002928 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002924:	2300      	movs	r3, #0
 8002926:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002928:	e030      	b.n	800298c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	2200      	movs	r2, #0
 8002932:	2180      	movs	r1, #128	; 0x80
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 fe6b 	bl	8003610 <UART_WaitOnFlagUntilTimeout>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d004      	beq.n	800294a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2220      	movs	r2, #32
 8002944:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e03c      	b.n	80029c4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10b      	bne.n	8002968 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	881a      	ldrh	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800295c:	b292      	uxth	r2, r2
 800295e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	3302      	adds	r3, #2
 8002964:	61bb      	str	r3, [r7, #24]
 8002966:	e008      	b.n	800297a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	781a      	ldrb	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	b292      	uxth	r2, r2
 8002972:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	3301      	adds	r3, #1
 8002978:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002980:	b29b      	uxth	r3, r3
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002992:	b29b      	uxth	r3, r3
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1c8      	bne.n	800292a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	2200      	movs	r2, #0
 80029a0:	2140      	movs	r1, #64	; 0x40
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 fe34 	bl	8003610 <UART_WaitOnFlagUntilTimeout>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d004      	beq.n	80029b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2220      	movs	r2, #32
 80029b2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e005      	b.n	80029c4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2220      	movs	r2, #32
 80029bc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	e000      	b.n	80029c4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80029c2:	2302      	movs	r3, #2
  }
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3720      	adds	r7, #32
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b0ba      	sub	sp, #232	; 0xe8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80029f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80029f6:	f640 030f 	movw	r3, #2063	; 0x80f
 80029fa:	4013      	ands	r3, r2
 80029fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002a00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d115      	bne.n	8002a34 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a0c:	f003 0320 	and.w	r3, r3, #32
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00f      	beq.n	8002a34 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a18:	f003 0320 	and.w	r3, r3, #32
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d009      	beq.n	8002a34 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 82ab 	beq.w	8002f80 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	4798      	blx	r3
      }
      return;
 8002a32:	e2a5      	b.n	8002f80 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002a34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 8117 	beq.w	8002c6c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002a3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d106      	bne.n	8002a58 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002a4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002a4e:	4b85      	ldr	r3, [pc, #532]	; (8002c64 <HAL_UART_IRQHandler+0x298>)
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 810a 	beq.w	8002c6c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d011      	beq.n	8002a88 <HAL_UART_IRQHandler+0xbc>
 8002a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00b      	beq.n	8002a88 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2201      	movs	r2, #1
 8002a76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a7e:	f043 0201 	orr.w	r2, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d011      	beq.n	8002ab8 <HAL_UART_IRQHandler+0xec>
 8002a94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00b      	beq.n	8002ab8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aae:	f043 0204 	orr.w	r2, r3, #4
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d011      	beq.n	8002ae8 <HAL_UART_IRQHandler+0x11c>
 8002ac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00b      	beq.n	8002ae8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2204      	movs	r2, #4
 8002ad6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ade:	f043 0202 	orr.w	r2, r3, #2
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aec:	f003 0308 	and.w	r3, r3, #8
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d017      	beq.n	8002b24 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002af8:	f003 0320 	and.w	r3, r3, #32
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d105      	bne.n	8002b0c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002b00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b04:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00b      	beq.n	8002b24 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2208      	movs	r2, #8
 8002b12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b1a:	f043 0208 	orr.w	r2, r3, #8
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d012      	beq.n	8002b56 <HAL_UART_IRQHandler+0x18a>
 8002b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00c      	beq.n	8002b56 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b4c:	f043 0220 	orr.w	r2, r3, #32
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 8211 	beq.w	8002f84 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b66:	f003 0320 	and.w	r3, r3, #32
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00d      	beq.n	8002b8a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b72:	f003 0320 	and.w	r3, r3, #32
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d007      	beq.n	8002b8a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9e:	2b40      	cmp	r3, #64	; 0x40
 8002ba0:	d005      	beq.n	8002bae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002ba2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ba6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d04f      	beq.n	8002c4e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 fe5c 	bl	800386c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbe:	2b40      	cmp	r3, #64	; 0x40
 8002bc0:	d141      	bne.n	8002c46 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	3308      	adds	r3, #8
 8002bc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bd0:	e853 3f00 	ldrex	r3, [r3]
 8002bd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002bd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002be0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	3308      	adds	r3, #8
 8002bea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002bee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002bf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002bfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002bfe:	e841 2300 	strex	r3, r2, [r1]
 8002c02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002c06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1d9      	bne.n	8002bc2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d013      	beq.n	8002c3e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c1a:	4a13      	ldr	r2, [pc, #76]	; (8002c68 <HAL_UART_IRQHandler+0x29c>)
 8002c1c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fd ff58 	bl	8000ad8 <HAL_DMA_Abort_IT>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d017      	beq.n	8002c5e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002c38:	4610      	mov	r0, r2
 8002c3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c3c:	e00f      	b.n	8002c5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f9be 	bl	8002fc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c44:	e00b      	b.n	8002c5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f9ba 	bl	8002fc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c4c:	e007      	b.n	8002c5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f9b6 	bl	8002fc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002c5c:	e192      	b.n	8002f84 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c5e:	bf00      	nop
    return;
 8002c60:	e190      	b.n	8002f84 <HAL_UART_IRQHandler+0x5b8>
 8002c62:	bf00      	nop
 8002c64:	04000120 	.word	0x04000120
 8002c68:	08003935 	.word	0x08003935

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	f040 814b 	bne.w	8002f0c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c7a:	f003 0310 	and.w	r3, r3, #16
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 8144 	beq.w	8002f0c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c88:	f003 0310 	and.w	r3, r3, #16
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 813d 	beq.w	8002f0c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2210      	movs	r2, #16
 8002c98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca4:	2b40      	cmp	r3, #64	; 0x40
 8002ca6:	f040 80b5 	bne.w	8002e14 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002cb6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 8164 	beq.w	8002f88 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002cc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	f080 815c 	bcs.w	8002f88 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cd6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	2b20      	cmp	r3, #32
 8002ce2:	f000 8086 	beq.w	8002df2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cf2:	e853 3f00 	ldrex	r3, [r3]
 8002cf6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002cfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002d10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d14:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d18:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d1c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d20:	e841 2300 	strex	r3, r2, [r1]
 8002d24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1da      	bne.n	8002ce6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	3308      	adds	r3, #8
 8002d36:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d3a:	e853 3f00 	ldrex	r3, [r3]
 8002d3e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d42:	f023 0301 	bic.w	r3, r3, #1
 8002d46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	3308      	adds	r3, #8
 8002d50:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d54:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d58:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d5c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d60:	e841 2300 	strex	r3, r2, [r1]
 8002d64:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002d66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1e1      	bne.n	8002d30 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	3308      	adds	r3, #8
 8002d72:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d76:	e853 3f00 	ldrex	r3, [r3]
 8002d7a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	3308      	adds	r3, #8
 8002d8c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d90:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d92:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d94:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d96:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d98:	e841 2300 	strex	r3, r2, [r1]
 8002d9c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1e3      	bne.n	8002d6c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dba:	e853 3f00 	ldrex	r3, [r3]
 8002dbe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002dc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dc2:	f023 0310 	bic.w	r3, r3, #16
 8002dc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002dd4:	65bb      	str	r3, [r7, #88]	; 0x58
 8002dd6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002dda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ddc:	e841 2300 	strex	r3, r2, [r1]
 8002de0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1e4      	bne.n	8002db2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7fd fe3a 	bl	8000a66 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2202      	movs	r2, #2
 8002df6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7fd f9e1 	bl	80001d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e12:	e0b9      	b.n	8002f88 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 80ab 	beq.w	8002f8c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002e36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 80a6 	beq.w	8002f8c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e48:	e853 3f00 	ldrex	r3, [r3]
 8002e4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e62:	647b      	str	r3, [r7, #68]	; 0x44
 8002e64:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e6a:	e841 2300 	strex	r3, r2, [r1]
 8002e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1e4      	bne.n	8002e40 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	3308      	adds	r3, #8
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	e853 3f00 	ldrex	r3, [r3]
 8002e84:	623b      	str	r3, [r7, #32]
   return(result);
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	f023 0301 	bic.w	r3, r3, #1
 8002e8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	3308      	adds	r3, #8
 8002e96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e9a:	633a      	str	r2, [r7, #48]	; 0x30
 8002e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ea2:	e841 2300 	strex	r3, r2, [r1]
 8002ea6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1e3      	bne.n	8002e76 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2220      	movs	r2, #32
 8002eb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	e853 3f00 	ldrex	r3, [r3]
 8002ece:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f023 0310 	bic.w	r3, r3, #16
 8002ed6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ee4:	61fb      	str	r3, [r7, #28]
 8002ee6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee8:	69b9      	ldr	r1, [r7, #24]
 8002eea:	69fa      	ldr	r2, [r7, #28]
 8002eec:	e841 2300 	strex	r3, r2, [r1]
 8002ef0:	617b      	str	r3, [r7, #20]
   return(result);
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1e4      	bne.n	8002ec2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002efe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f02:	4619      	mov	r1, r3
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f7fd f965 	bl	80001d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f0a:	e03f      	b.n	8002f8c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00e      	beq.n	8002f36 <HAL_UART_IRQHandler+0x56a>
 8002f18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d008      	beq.n	8002f36 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 fee8 	bl	8003d04 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f34:	e02d      	b.n	8002f92 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00e      	beq.n	8002f60 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002f42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d008      	beq.n	8002f60 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d01c      	beq.n	8002f90 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	4798      	blx	r3
    }
    return;
 8002f5e:	e017      	b.n	8002f90 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d012      	beq.n	8002f92 <HAL_UART_IRQHandler+0x5c6>
 8002f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00c      	beq.n	8002f92 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 fcf1 	bl	8003960 <UART_EndTransmit_IT>
    return;
 8002f7e:	e008      	b.n	8002f92 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002f80:	bf00      	nop
 8002f82:	e006      	b.n	8002f92 <HAL_UART_IRQHandler+0x5c6>
    return;
 8002f84:	bf00      	nop
 8002f86:	e004      	b.n	8002f92 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002f88:	bf00      	nop
 8002f8a:	e002      	b.n	8002f92 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002f8c:	bf00      	nop
 8002f8e:	e000      	b.n	8002f92 <HAL_UART_IRQHandler+0x5c6>
    return;
 8002f90:	bf00      	nop
  }

}
 8002f92:	37e8      	adds	r7, #232	; 0xe8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b088      	sub	sp, #32
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	4b92      	ldr	r3, [pc, #584]	; (8003248 <UART_SetConfig+0x274>)
 8003000:	4013      	ands	r3, r2
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6812      	ldr	r2, [r2, #0]
 8003006:	6979      	ldr	r1, [r7, #20]
 8003008:	430b      	orrs	r3, r1
 800300a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	4313      	orrs	r3, r2
 8003030:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	430a      	orrs	r2, r1
 8003044:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a80      	ldr	r2, [pc, #512]	; (800324c <UART_SetConfig+0x278>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d120      	bne.n	8003092 <UART_SetConfig+0xbe>
 8003050:	4b7f      	ldr	r3, [pc, #508]	; (8003250 <UART_SetConfig+0x27c>)
 8003052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003054:	f003 0303 	and.w	r3, r3, #3
 8003058:	2b03      	cmp	r3, #3
 800305a:	d817      	bhi.n	800308c <UART_SetConfig+0xb8>
 800305c:	a201      	add	r2, pc, #4	; (adr r2, 8003064 <UART_SetConfig+0x90>)
 800305e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003062:	bf00      	nop
 8003064:	08003075 	.word	0x08003075
 8003068:	08003081 	.word	0x08003081
 800306c:	08003087 	.word	0x08003087
 8003070:	0800307b 	.word	0x0800307b
 8003074:	2301      	movs	r3, #1
 8003076:	77fb      	strb	r3, [r7, #31]
 8003078:	e0b5      	b.n	80031e6 <UART_SetConfig+0x212>
 800307a:	2302      	movs	r3, #2
 800307c:	77fb      	strb	r3, [r7, #31]
 800307e:	e0b2      	b.n	80031e6 <UART_SetConfig+0x212>
 8003080:	2304      	movs	r3, #4
 8003082:	77fb      	strb	r3, [r7, #31]
 8003084:	e0af      	b.n	80031e6 <UART_SetConfig+0x212>
 8003086:	2308      	movs	r3, #8
 8003088:	77fb      	strb	r3, [r7, #31]
 800308a:	e0ac      	b.n	80031e6 <UART_SetConfig+0x212>
 800308c:	2310      	movs	r3, #16
 800308e:	77fb      	strb	r3, [r7, #31]
 8003090:	e0a9      	b.n	80031e6 <UART_SetConfig+0x212>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a6f      	ldr	r2, [pc, #444]	; (8003254 <UART_SetConfig+0x280>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d124      	bne.n	80030e6 <UART_SetConfig+0x112>
 800309c:	4b6c      	ldr	r3, [pc, #432]	; (8003250 <UART_SetConfig+0x27c>)
 800309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030a8:	d011      	beq.n	80030ce <UART_SetConfig+0xfa>
 80030aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030ae:	d817      	bhi.n	80030e0 <UART_SetConfig+0x10c>
 80030b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030b4:	d011      	beq.n	80030da <UART_SetConfig+0x106>
 80030b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030ba:	d811      	bhi.n	80030e0 <UART_SetConfig+0x10c>
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d003      	beq.n	80030c8 <UART_SetConfig+0xf4>
 80030c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c4:	d006      	beq.n	80030d4 <UART_SetConfig+0x100>
 80030c6:	e00b      	b.n	80030e0 <UART_SetConfig+0x10c>
 80030c8:	2300      	movs	r3, #0
 80030ca:	77fb      	strb	r3, [r7, #31]
 80030cc:	e08b      	b.n	80031e6 <UART_SetConfig+0x212>
 80030ce:	2302      	movs	r3, #2
 80030d0:	77fb      	strb	r3, [r7, #31]
 80030d2:	e088      	b.n	80031e6 <UART_SetConfig+0x212>
 80030d4:	2304      	movs	r3, #4
 80030d6:	77fb      	strb	r3, [r7, #31]
 80030d8:	e085      	b.n	80031e6 <UART_SetConfig+0x212>
 80030da:	2308      	movs	r3, #8
 80030dc:	77fb      	strb	r3, [r7, #31]
 80030de:	e082      	b.n	80031e6 <UART_SetConfig+0x212>
 80030e0:	2310      	movs	r3, #16
 80030e2:	77fb      	strb	r3, [r7, #31]
 80030e4:	e07f      	b.n	80031e6 <UART_SetConfig+0x212>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a5b      	ldr	r2, [pc, #364]	; (8003258 <UART_SetConfig+0x284>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d124      	bne.n	800313a <UART_SetConfig+0x166>
 80030f0:	4b57      	ldr	r3, [pc, #348]	; (8003250 <UART_SetConfig+0x27c>)
 80030f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80030f8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80030fc:	d011      	beq.n	8003122 <UART_SetConfig+0x14e>
 80030fe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003102:	d817      	bhi.n	8003134 <UART_SetConfig+0x160>
 8003104:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003108:	d011      	beq.n	800312e <UART_SetConfig+0x15a>
 800310a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800310e:	d811      	bhi.n	8003134 <UART_SetConfig+0x160>
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <UART_SetConfig+0x148>
 8003114:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003118:	d006      	beq.n	8003128 <UART_SetConfig+0x154>
 800311a:	e00b      	b.n	8003134 <UART_SetConfig+0x160>
 800311c:	2300      	movs	r3, #0
 800311e:	77fb      	strb	r3, [r7, #31]
 8003120:	e061      	b.n	80031e6 <UART_SetConfig+0x212>
 8003122:	2302      	movs	r3, #2
 8003124:	77fb      	strb	r3, [r7, #31]
 8003126:	e05e      	b.n	80031e6 <UART_SetConfig+0x212>
 8003128:	2304      	movs	r3, #4
 800312a:	77fb      	strb	r3, [r7, #31]
 800312c:	e05b      	b.n	80031e6 <UART_SetConfig+0x212>
 800312e:	2308      	movs	r3, #8
 8003130:	77fb      	strb	r3, [r7, #31]
 8003132:	e058      	b.n	80031e6 <UART_SetConfig+0x212>
 8003134:	2310      	movs	r3, #16
 8003136:	77fb      	strb	r3, [r7, #31]
 8003138:	e055      	b.n	80031e6 <UART_SetConfig+0x212>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a47      	ldr	r2, [pc, #284]	; (800325c <UART_SetConfig+0x288>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d124      	bne.n	800318e <UART_SetConfig+0x1ba>
 8003144:	4b42      	ldr	r3, [pc, #264]	; (8003250 <UART_SetConfig+0x27c>)
 8003146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003148:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800314c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003150:	d011      	beq.n	8003176 <UART_SetConfig+0x1a2>
 8003152:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003156:	d817      	bhi.n	8003188 <UART_SetConfig+0x1b4>
 8003158:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800315c:	d011      	beq.n	8003182 <UART_SetConfig+0x1ae>
 800315e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003162:	d811      	bhi.n	8003188 <UART_SetConfig+0x1b4>
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <UART_SetConfig+0x19c>
 8003168:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800316c:	d006      	beq.n	800317c <UART_SetConfig+0x1a8>
 800316e:	e00b      	b.n	8003188 <UART_SetConfig+0x1b4>
 8003170:	2300      	movs	r3, #0
 8003172:	77fb      	strb	r3, [r7, #31]
 8003174:	e037      	b.n	80031e6 <UART_SetConfig+0x212>
 8003176:	2302      	movs	r3, #2
 8003178:	77fb      	strb	r3, [r7, #31]
 800317a:	e034      	b.n	80031e6 <UART_SetConfig+0x212>
 800317c:	2304      	movs	r3, #4
 800317e:	77fb      	strb	r3, [r7, #31]
 8003180:	e031      	b.n	80031e6 <UART_SetConfig+0x212>
 8003182:	2308      	movs	r3, #8
 8003184:	77fb      	strb	r3, [r7, #31]
 8003186:	e02e      	b.n	80031e6 <UART_SetConfig+0x212>
 8003188:	2310      	movs	r3, #16
 800318a:	77fb      	strb	r3, [r7, #31]
 800318c:	e02b      	b.n	80031e6 <UART_SetConfig+0x212>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a33      	ldr	r2, [pc, #204]	; (8003260 <UART_SetConfig+0x28c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d124      	bne.n	80031e2 <UART_SetConfig+0x20e>
 8003198:	4b2d      	ldr	r3, [pc, #180]	; (8003250 <UART_SetConfig+0x27c>)
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80031a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031a4:	d011      	beq.n	80031ca <UART_SetConfig+0x1f6>
 80031a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031aa:	d817      	bhi.n	80031dc <UART_SetConfig+0x208>
 80031ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031b0:	d011      	beq.n	80031d6 <UART_SetConfig+0x202>
 80031b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031b6:	d811      	bhi.n	80031dc <UART_SetConfig+0x208>
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <UART_SetConfig+0x1f0>
 80031bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031c0:	d006      	beq.n	80031d0 <UART_SetConfig+0x1fc>
 80031c2:	e00b      	b.n	80031dc <UART_SetConfig+0x208>
 80031c4:	2300      	movs	r3, #0
 80031c6:	77fb      	strb	r3, [r7, #31]
 80031c8:	e00d      	b.n	80031e6 <UART_SetConfig+0x212>
 80031ca:	2302      	movs	r3, #2
 80031cc:	77fb      	strb	r3, [r7, #31]
 80031ce:	e00a      	b.n	80031e6 <UART_SetConfig+0x212>
 80031d0:	2304      	movs	r3, #4
 80031d2:	77fb      	strb	r3, [r7, #31]
 80031d4:	e007      	b.n	80031e6 <UART_SetConfig+0x212>
 80031d6:	2308      	movs	r3, #8
 80031d8:	77fb      	strb	r3, [r7, #31]
 80031da:	e004      	b.n	80031e6 <UART_SetConfig+0x212>
 80031dc:	2310      	movs	r3, #16
 80031de:	77fb      	strb	r3, [r7, #31]
 80031e0:	e001      	b.n	80031e6 <UART_SetConfig+0x212>
 80031e2:	2310      	movs	r3, #16
 80031e4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031ee:	d16b      	bne.n	80032c8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80031f0:	7ffb      	ldrb	r3, [r7, #31]
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d838      	bhi.n	8003268 <UART_SetConfig+0x294>
 80031f6:	a201      	add	r2, pc, #4	; (adr r2, 80031fc <UART_SetConfig+0x228>)
 80031f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fc:	08003221 	.word	0x08003221
 8003200:	08003229 	.word	0x08003229
 8003204:	08003231 	.word	0x08003231
 8003208:	08003269 	.word	0x08003269
 800320c:	08003237 	.word	0x08003237
 8003210:	08003269 	.word	0x08003269
 8003214:	08003269 	.word	0x08003269
 8003218:	08003269 	.word	0x08003269
 800321c:	0800323f 	.word	0x0800323f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003220:	f7ff f89a 	bl	8002358 <HAL_RCC_GetPCLK1Freq>
 8003224:	61b8      	str	r0, [r7, #24]
        break;
 8003226:	e024      	b.n	8003272 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003228:	f7ff f8b8 	bl	800239c <HAL_RCC_GetPCLK2Freq>
 800322c:	61b8      	str	r0, [r7, #24]
        break;
 800322e:	e020      	b.n	8003272 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003230:	4b0c      	ldr	r3, [pc, #48]	; (8003264 <UART_SetConfig+0x290>)
 8003232:	61bb      	str	r3, [r7, #24]
        break;
 8003234:	e01d      	b.n	8003272 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003236:	f7ff f819 	bl	800226c <HAL_RCC_GetSysClockFreq>
 800323a:	61b8      	str	r0, [r7, #24]
        break;
 800323c:	e019      	b.n	8003272 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800323e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003242:	61bb      	str	r3, [r7, #24]
        break;
 8003244:	e015      	b.n	8003272 <UART_SetConfig+0x29e>
 8003246:	bf00      	nop
 8003248:	efff69f3 	.word	0xefff69f3
 800324c:	40013800 	.word	0x40013800
 8003250:	40021000 	.word	0x40021000
 8003254:	40004400 	.word	0x40004400
 8003258:	40004800 	.word	0x40004800
 800325c:	40004c00 	.word	0x40004c00
 8003260:	40005000 	.word	0x40005000
 8003264:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	77bb      	strb	r3, [r7, #30]
        break;
 8003270:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d073      	beq.n	8003360 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	005a      	lsls	r2, r3, #1
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	085b      	lsrs	r3, r3, #1
 8003282:	441a      	add	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	fbb2 f3f3 	udiv	r3, r2, r3
 800328c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	2b0f      	cmp	r3, #15
 8003292:	d916      	bls.n	80032c2 <UART_SetConfig+0x2ee>
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800329a:	d212      	bcs.n	80032c2 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	f023 030f 	bic.w	r3, r3, #15
 80032a4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	085b      	lsrs	r3, r3, #1
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	89fb      	ldrh	r3, [r7, #14]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	89fa      	ldrh	r2, [r7, #14]
 80032be:	60da      	str	r2, [r3, #12]
 80032c0:	e04e      	b.n	8003360 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	77bb      	strb	r3, [r7, #30]
 80032c6:	e04b      	b.n	8003360 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032c8:	7ffb      	ldrb	r3, [r7, #31]
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d827      	bhi.n	800331e <UART_SetConfig+0x34a>
 80032ce:	a201      	add	r2, pc, #4	; (adr r2, 80032d4 <UART_SetConfig+0x300>)
 80032d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d4:	080032f9 	.word	0x080032f9
 80032d8:	08003301 	.word	0x08003301
 80032dc:	08003309 	.word	0x08003309
 80032e0:	0800331f 	.word	0x0800331f
 80032e4:	0800330f 	.word	0x0800330f
 80032e8:	0800331f 	.word	0x0800331f
 80032ec:	0800331f 	.word	0x0800331f
 80032f0:	0800331f 	.word	0x0800331f
 80032f4:	08003317 	.word	0x08003317
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032f8:	f7ff f82e 	bl	8002358 <HAL_RCC_GetPCLK1Freq>
 80032fc:	61b8      	str	r0, [r7, #24]
        break;
 80032fe:	e013      	b.n	8003328 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003300:	f7ff f84c 	bl	800239c <HAL_RCC_GetPCLK2Freq>
 8003304:	61b8      	str	r0, [r7, #24]
        break;
 8003306:	e00f      	b.n	8003328 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003308:	4b1b      	ldr	r3, [pc, #108]	; (8003378 <UART_SetConfig+0x3a4>)
 800330a:	61bb      	str	r3, [r7, #24]
        break;
 800330c:	e00c      	b.n	8003328 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800330e:	f7fe ffad 	bl	800226c <HAL_RCC_GetSysClockFreq>
 8003312:	61b8      	str	r0, [r7, #24]
        break;
 8003314:	e008      	b.n	8003328 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800331a:	61bb      	str	r3, [r7, #24]
        break;
 800331c:	e004      	b.n	8003328 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800331e:	2300      	movs	r3, #0
 8003320:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	77bb      	strb	r3, [r7, #30]
        break;
 8003326:	bf00      	nop
    }

    if (pclk != 0U)
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d018      	beq.n	8003360 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	085a      	lsrs	r2, r3, #1
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	441a      	add	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003340:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	2b0f      	cmp	r3, #15
 8003346:	d909      	bls.n	800335c <UART_SetConfig+0x388>
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800334e:	d205      	bcs.n	800335c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	b29a      	uxth	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	60da      	str	r2, [r3, #12]
 800335a:	e001      	b.n	8003360 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800336c:	7fbb      	ldrb	r3, [r7, #30]
}
 800336e:	4618      	mov	r0, r3
 8003370:	3720      	adds	r7, #32
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	007a1200 	.word	0x007a1200

0800337c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00a      	beq.n	80033a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00a      	beq.n	80033c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00a      	beq.n	80033ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00a      	beq.n	800340c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	f003 0310 	and.w	r3, r3, #16
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00a      	beq.n	800342e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	430a      	orrs	r2, r1
 800342c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	f003 0320 	and.w	r3, r3, #32
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00a      	beq.n	8003450 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003458:	2b00      	cmp	r3, #0
 800345a:	d01a      	beq.n	8003492 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800347a:	d10a      	bne.n	8003492 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	605a      	str	r2, [r3, #4]
  }
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b098      	sub	sp, #96	; 0x60
 80034c4:	af02      	add	r7, sp, #8
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034d0:	f7fd f9ac 	bl	800082c <HAL_GetTick>
 80034d4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0308 	and.w	r3, r3, #8
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d12e      	bne.n	8003542 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034ec:	2200      	movs	r2, #0
 80034ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f88c 	bl	8003610 <UART_WaitOnFlagUntilTimeout>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d021      	beq.n	8003542 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003506:	e853 3f00 	ldrex	r3, [r3]
 800350a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800350c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800350e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003512:	653b      	str	r3, [r7, #80]	; 0x50
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	461a      	mov	r2, r3
 800351a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800351c:	647b      	str	r3, [r7, #68]	; 0x44
 800351e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003520:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003522:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003524:	e841 2300 	strex	r3, r2, [r1]
 8003528:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800352a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1e6      	bne.n	80034fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2220      	movs	r2, #32
 8003534:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e062      	b.n	8003608 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b04      	cmp	r3, #4
 800354e:	d149      	bne.n	80035e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003550:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003558:	2200      	movs	r2, #0
 800355a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f856 	bl	8003610 <UART_WaitOnFlagUntilTimeout>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d03c      	beq.n	80035e4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	e853 3f00 	ldrex	r3, [r3]
 8003576:	623b      	str	r3, [r7, #32]
   return(result);
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800357e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	461a      	mov	r2, r3
 8003586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003588:	633b      	str	r3, [r7, #48]	; 0x30
 800358a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800358e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003590:	e841 2300 	strex	r3, r2, [r1]
 8003594:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1e6      	bne.n	800356a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3308      	adds	r3, #8
 80035a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	e853 3f00 	ldrex	r3, [r3]
 80035aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0301 	bic.w	r3, r3, #1
 80035b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	3308      	adds	r3, #8
 80035ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035bc:	61fa      	str	r2, [r7, #28]
 80035be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c0:	69b9      	ldr	r1, [r7, #24]
 80035c2:	69fa      	ldr	r2, [r7, #28]
 80035c4:	e841 2300 	strex	r3, r2, [r1]
 80035c8:	617b      	str	r3, [r7, #20]
   return(result);
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1e5      	bne.n	800359c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2220      	movs	r2, #32
 80035d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e011      	b.n	8003608 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2220      	movs	r2, #32
 80035e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2220      	movs	r2, #32
 80035ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3758      	adds	r7, #88	; 0x58
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	603b      	str	r3, [r7, #0]
 800361c:	4613      	mov	r3, r2
 800361e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003620:	e049      	b.n	80036b6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003628:	d045      	beq.n	80036b6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800362a:	f7fd f8ff 	bl	800082c <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	429a      	cmp	r2, r3
 8003638:	d302      	bcc.n	8003640 <UART_WaitOnFlagUntilTimeout+0x30>
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e048      	b.n	80036d6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0304 	and.w	r3, r3, #4
 800364e:	2b00      	cmp	r3, #0
 8003650:	d031      	beq.n	80036b6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	69db      	ldr	r3, [r3, #28]
 8003658:	f003 0308 	and.w	r3, r3, #8
 800365c:	2b08      	cmp	r3, #8
 800365e:	d110      	bne.n	8003682 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2208      	movs	r2, #8
 8003666:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 f8ff 	bl	800386c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2208      	movs	r2, #8
 8003672:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e029      	b.n	80036d6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800368c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003690:	d111      	bne.n	80036b6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800369a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 f8e5 	bl	800386c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2220      	movs	r2, #32
 80036a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e00f      	b.n	80036d6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	69da      	ldr	r2, [r3, #28]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	4013      	ands	r3, r2
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	bf0c      	ite	eq
 80036c6:	2301      	moveq	r3, #1
 80036c8:	2300      	movne	r3, #0
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	461a      	mov	r2, r3
 80036ce:	79fb      	ldrb	r3, [r7, #7]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d0a6      	beq.n	8003622 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
	...

080036e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b097      	sub	sp, #92	; 0x5c
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	4613      	mov	r3, r2
 80036ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	88fa      	ldrh	r2, [r7, #6]
 80036f8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	88fa      	ldrh	r2, [r7, #6]
 8003700:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003712:	d10e      	bne.n	8003732 <UART_Start_Receive_IT+0x52>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d105      	bne.n	8003728 <UART_Start_Receive_IT+0x48>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003722:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003726:	e02d      	b.n	8003784 <UART_Start_Receive_IT+0xa4>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	22ff      	movs	r2, #255	; 0xff
 800372c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003730:	e028      	b.n	8003784 <UART_Start_Receive_IT+0xa4>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10d      	bne.n	8003756 <UART_Start_Receive_IT+0x76>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d104      	bne.n	800374c <UART_Start_Receive_IT+0x6c>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	22ff      	movs	r2, #255	; 0xff
 8003746:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800374a:	e01b      	b.n	8003784 <UART_Start_Receive_IT+0xa4>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	227f      	movs	r2, #127	; 0x7f
 8003750:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003754:	e016      	b.n	8003784 <UART_Start_Receive_IT+0xa4>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800375e:	d10d      	bne.n	800377c <UART_Start_Receive_IT+0x9c>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d104      	bne.n	8003772 <UART_Start_Receive_IT+0x92>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	227f      	movs	r2, #127	; 0x7f
 800376c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003770:	e008      	b.n	8003784 <UART_Start_Receive_IT+0xa4>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	223f      	movs	r2, #63	; 0x3f
 8003776:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800377a:	e003      	b.n	8003784 <UART_Start_Receive_IT+0xa4>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2222      	movs	r2, #34	; 0x22
 8003790:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	3308      	adds	r3, #8
 800379a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800379e:	e853 3f00 	ldrex	r3, [r3]
 80037a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a6:	f043 0301 	orr.w	r3, r3, #1
 80037aa:	657b      	str	r3, [r7, #84]	; 0x54
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	3308      	adds	r3, #8
 80037b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80037b4:	64ba      	str	r2, [r7, #72]	; 0x48
 80037b6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80037ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037bc:	e841 2300 	strex	r3, r2, [r1]
 80037c0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80037c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1e5      	bne.n	8003794 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d0:	d107      	bne.n	80037e2 <UART_Start_Receive_IT+0x102>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d103      	bne.n	80037e2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	4a21      	ldr	r2, [pc, #132]	; (8003864 <UART_Start_Receive_IT+0x184>)
 80037de:	669a      	str	r2, [r3, #104]	; 0x68
 80037e0:	e002      	b.n	80037e8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	4a20      	ldr	r2, [pc, #128]	; (8003868 <UART_Start_Receive_IT+0x188>)
 80037e6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d019      	beq.n	8003824 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f8:	e853 3f00 	ldrex	r3, [r3]
 80037fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003804:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	461a      	mov	r2, r3
 800380c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800380e:	637b      	str	r3, [r7, #52]	; 0x34
 8003810:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003812:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003814:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003816:	e841 2300 	strex	r3, r2, [r1]
 800381a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800381c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1e6      	bne.n	80037f0 <UART_Start_Receive_IT+0x110>
 8003822:	e018      	b.n	8003856 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	e853 3f00 	ldrex	r3, [r3]
 8003830:	613b      	str	r3, [r7, #16]
   return(result);
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f043 0320 	orr.w	r3, r3, #32
 8003838:	653b      	str	r3, [r7, #80]	; 0x50
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003842:	623b      	str	r3, [r7, #32]
 8003844:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003846:	69f9      	ldr	r1, [r7, #28]
 8003848:	6a3a      	ldr	r2, [r7, #32]
 800384a:	e841 2300 	strex	r3, r2, [r1]
 800384e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1e6      	bne.n	8003824 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	375c      	adds	r7, #92	; 0x5c
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	08003b5d 	.word	0x08003b5d
 8003868:	080039b5 	.word	0x080039b5

0800386c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800386c:	b480      	push	{r7}
 800386e:	b095      	sub	sp, #84	; 0x54
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800387c:	e853 3f00 	ldrex	r3, [r3]
 8003880:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003884:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003888:	64fb      	str	r3, [r7, #76]	; 0x4c
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003892:	643b      	str	r3, [r7, #64]	; 0x40
 8003894:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003896:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003898:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800389a:	e841 2300 	strex	r3, r2, [r1]
 800389e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1e6      	bne.n	8003874 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	3308      	adds	r3, #8
 80038ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	e853 3f00 	ldrex	r3, [r3]
 80038b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	f023 0301 	bic.w	r3, r3, #1
 80038bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3308      	adds	r3, #8
 80038c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038ce:	e841 2300 	strex	r3, r2, [r1]
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1e5      	bne.n	80038a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d118      	bne.n	8003914 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	e853 3f00 	ldrex	r3, [r3]
 80038ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	f023 0310 	bic.w	r3, r3, #16
 80038f6:	647b      	str	r3, [r7, #68]	; 0x44
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	461a      	mov	r2, r3
 80038fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003900:	61bb      	str	r3, [r7, #24]
 8003902:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003904:	6979      	ldr	r1, [r7, #20]
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	e841 2300 	strex	r3, r2, [r1]
 800390c:	613b      	str	r3, [r7, #16]
   return(result);
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1e6      	bne.n	80038e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2220      	movs	r2, #32
 8003918:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003928:	bf00      	nop
 800392a:	3754      	adds	r7, #84	; 0x54
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f7ff fb34 	bl	8002fc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003958:	bf00      	nop
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b088      	sub	sp, #32
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	e853 3f00 	ldrex	r3, [r3]
 8003974:	60bb      	str	r3, [r7, #8]
   return(result);
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800397c:	61fb      	str	r3, [r7, #28]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	61bb      	str	r3, [r7, #24]
 8003988:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398a:	6979      	ldr	r1, [r7, #20]
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	e841 2300 	strex	r3, r2, [r1]
 8003992:	613b      	str	r3, [r7, #16]
   return(result);
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1e6      	bne.n	8003968 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2220      	movs	r2, #32
 800399e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7ff faf6 	bl	8002f98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039ac:	bf00      	nop
 80039ae:	3720      	adds	r7, #32
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b09c      	sub	sp, #112	; 0x70
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80039c2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039cc:	2b22      	cmp	r3, #34	; 0x22
 80039ce:	f040 80b9 	bne.w	8003b44 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80039d8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80039dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80039e0:	b2d9      	uxtb	r1, r3
 80039e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ec:	400a      	ands	r2, r1
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f6:	1c5a      	adds	r2, r3, #1
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f040 809c 	bne.w	8003b54 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a24:	e853 3f00 	ldrex	r3, [r3]
 8003a28:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a30:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	461a      	mov	r2, r3
 8003a38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a3c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a42:	e841 2300 	strex	r3, r2, [r1]
 8003a46:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1e6      	bne.n	8003a1c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	3308      	adds	r3, #8
 8003a54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a58:	e853 3f00 	ldrex	r3, [r3]
 8003a5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a60:	f023 0301 	bic.w	r3, r3, #1
 8003a64:	667b      	str	r3, [r7, #100]	; 0x64
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	3308      	adds	r3, #8
 8003a6c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003a6e:	647a      	str	r2, [r7, #68]	; 0x44
 8003a70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a76:	e841 2300 	strex	r3, r2, [r1]
 8003a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1e5      	bne.n	8003a4e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2220      	movs	r2, #32
 8003a86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d018      	beq.n	8003ad6 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	e853 3f00 	ldrex	r3, [r3]
 8003ab0:	623b      	str	r3, [r7, #32]
   return(result);
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ab8:	663b      	str	r3, [r7, #96]	; 0x60
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ac2:	633b      	str	r3, [r7, #48]	; 0x30
 8003ac4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aca:	e841 2300 	strex	r3, r2, [r1]
 8003ace:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1e6      	bne.n	8003aa4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d12e      	bne.n	8003b3c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	e853 3f00 	ldrex	r3, [r3]
 8003af0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f023 0310 	bic.w	r3, r3, #16
 8003af8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	461a      	mov	r2, r3
 8003b00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b02:	61fb      	str	r3, [r7, #28]
 8003b04:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b06:	69b9      	ldr	r1, [r7, #24]
 8003b08:	69fa      	ldr	r2, [r7, #28]
 8003b0a:	e841 2300 	strex	r3, r2, [r1]
 8003b0e:	617b      	str	r3, [r7, #20]
   return(result);
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1e6      	bne.n	8003ae4 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	f003 0310 	and.w	r3, r3, #16
 8003b20:	2b10      	cmp	r3, #16
 8003b22:	d103      	bne.n	8003b2c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2210      	movs	r2, #16
 8003b2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003b32:	4619      	mov	r1, r3
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f7fc fb4d 	bl	80001d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b3a:	e00b      	b.n	8003b54 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7ff fa35 	bl	8002fac <HAL_UART_RxCpltCallback>
}
 8003b42:	e007      	b.n	8003b54 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699a      	ldr	r2, [r3, #24]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f042 0208 	orr.w	r2, r2, #8
 8003b52:	619a      	str	r2, [r3, #24]
}
 8003b54:	bf00      	nop
 8003b56:	3770      	adds	r7, #112	; 0x70
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b09c      	sub	sp, #112	; 0x70
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003b6a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b74:	2b22      	cmp	r3, #34	; 0x22
 8003b76:	f040 80b9 	bne.w	8003cec <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003b80:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b88:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003b8a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8003b8e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003b92:	4013      	ands	r3, r2
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b98:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9e:	1c9a      	adds	r2, r3, #2
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f040 809c 	bne.w	8003cfc <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bcc:	e853 3f00 	ldrex	r3, [r3]
 8003bd0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003bd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bd8:	667b      	str	r3, [r7, #100]	; 0x64
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	461a      	mov	r2, r3
 8003be0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003be2:	657b      	str	r3, [r7, #84]	; 0x54
 8003be4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003be8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003bea:	e841 2300 	strex	r3, r2, [r1]
 8003bee:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1e6      	bne.n	8003bc4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	3308      	adds	r3, #8
 8003bfc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c00:	e853 3f00 	ldrex	r3, [r3]
 8003c04:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c08:	f023 0301 	bic.w	r3, r3, #1
 8003c0c:	663b      	str	r3, [r7, #96]	; 0x60
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	3308      	adds	r3, #8
 8003c14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c16:	643a      	str	r2, [r7, #64]	; 0x40
 8003c18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c1e:	e841 2300 	strex	r3, r2, [r1]
 8003c22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1e5      	bne.n	8003bf6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d018      	beq.n	8003c7e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	e853 3f00 	ldrex	r3, [r3]
 8003c58:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c6c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c72:	e841 2300 	strex	r3, r2, [r1]
 8003c76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1e6      	bne.n	8003c4c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d12e      	bne.n	8003ce4 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	e853 3f00 	ldrex	r3, [r3]
 8003c98:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	f023 0310 	bic.w	r3, r3, #16
 8003ca0:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003caa:	61bb      	str	r3, [r7, #24]
 8003cac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cae:	6979      	ldr	r1, [r7, #20]
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	e841 2300 	strex	r3, r2, [r1]
 8003cb6:	613b      	str	r3, [r7, #16]
   return(result);
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1e6      	bne.n	8003c8c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	2b10      	cmp	r3, #16
 8003cca:	d103      	bne.n	8003cd4 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2210      	movs	r2, #16
 8003cd2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003cda:	4619      	mov	r1, r3
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7fc fa79 	bl	80001d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ce2:	e00b      	b.n	8003cfc <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f7ff f961 	bl	8002fac <HAL_UART_RxCpltCallback>
}
 8003cea:	e007      	b.n	8003cfc <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699a      	ldr	r2, [r3, #24]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0208 	orr.w	r2, r2, #8
 8003cfa:	619a      	str	r2, [r3, #24]
}
 8003cfc:	bf00      	nop
 8003cfe:	3770      	adds	r7, #112	; 0x70
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08c      	sub	sp, #48	; 0x30
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	4613      	mov	r3, r2
 8003d24:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d2c:	2b20      	cmp	r3, #32
 8003d2e:	d142      	bne.n	8003db6 <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d002      	beq.n	8003d3c <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 8003d36:	88fb      	ldrh	r3, [r7, #6]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e03b      	b.n	8003db8 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2201      	movs	r2, #1
 8003d44:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8003d4c:	88fb      	ldrh	r3, [r7, #6]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	68b9      	ldr	r1, [r7, #8]
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f7ff fcc4 	bl	80036e0 <UART_Start_Receive_IT>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003d5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d124      	bne.n	8003db0 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d11d      	bne.n	8003daa <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2210      	movs	r2, #16
 8003d74:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	e853 3f00 	ldrex	r3, [r3]
 8003d82:	617b      	str	r3, [r7, #20]
   return(result);
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f043 0310 	orr.w	r3, r3, #16
 8003d8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	461a      	mov	r2, r3
 8003d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d94:	627b      	str	r3, [r7, #36]	; 0x24
 8003d96:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d98:	6a39      	ldr	r1, [r7, #32]
 8003d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d9c:	e841 2300 	strex	r3, r2, [r1]
 8003da0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1e6      	bne.n	8003d76 <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 8003da8:	e002      	b.n	8003db0 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003db0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003db4:	e000      	b.n	8003db8 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003db6:	2302      	movs	r3, #2
  }
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3730      	adds	r7, #48	; 0x30
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <memset>:
 8003dc0:	4402      	add	r2, r0
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d100      	bne.n	8003dca <memset+0xa>
 8003dc8:	4770      	bx	lr
 8003dca:	f803 1b01 	strb.w	r1, [r3], #1
 8003dce:	e7f9      	b.n	8003dc4 <memset+0x4>

08003dd0 <__libc_init_array>:
 8003dd0:	b570      	push	{r4, r5, r6, lr}
 8003dd2:	4d0d      	ldr	r5, [pc, #52]	; (8003e08 <__libc_init_array+0x38>)
 8003dd4:	4c0d      	ldr	r4, [pc, #52]	; (8003e0c <__libc_init_array+0x3c>)
 8003dd6:	1b64      	subs	r4, r4, r5
 8003dd8:	10a4      	asrs	r4, r4, #2
 8003dda:	2600      	movs	r6, #0
 8003ddc:	42a6      	cmp	r6, r4
 8003dde:	d109      	bne.n	8003df4 <__libc_init_array+0x24>
 8003de0:	4d0b      	ldr	r5, [pc, #44]	; (8003e10 <__libc_init_array+0x40>)
 8003de2:	4c0c      	ldr	r4, [pc, #48]	; (8003e14 <__libc_init_array+0x44>)
 8003de4:	f000 f818 	bl	8003e18 <_init>
 8003de8:	1b64      	subs	r4, r4, r5
 8003dea:	10a4      	asrs	r4, r4, #2
 8003dec:	2600      	movs	r6, #0
 8003dee:	42a6      	cmp	r6, r4
 8003df0:	d105      	bne.n	8003dfe <__libc_init_array+0x2e>
 8003df2:	bd70      	pop	{r4, r5, r6, pc}
 8003df4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003df8:	4798      	blx	r3
 8003dfa:	3601      	adds	r6, #1
 8003dfc:	e7ee      	b.n	8003ddc <__libc_init_array+0xc>
 8003dfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e02:	4798      	blx	r3
 8003e04:	3601      	adds	r6, #1
 8003e06:	e7f2      	b.n	8003dee <__libc_init_array+0x1e>
 8003e08:	08003e68 	.word	0x08003e68
 8003e0c:	08003e68 	.word	0x08003e68
 8003e10:	08003e68 	.word	0x08003e68
 8003e14:	08003e6c 	.word	0x08003e6c

08003e18 <_init>:
 8003e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e1a:	bf00      	nop
 8003e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e1e:	bc08      	pop	{r3}
 8003e20:	469e      	mov	lr, r3
 8003e22:	4770      	bx	lr

08003e24 <_fini>:
 8003e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e26:	bf00      	nop
 8003e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e2a:	bc08      	pop	{r3}
 8003e2c:	469e      	mov	lr, r3
 8003e2e:	4770      	bx	lr
